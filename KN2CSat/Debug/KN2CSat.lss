
KN2CSat.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000022cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00802000  000022cc  00002360  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000e3  00802024  00802024  00002384  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002384  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000338  00000000  00000000  000023e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00007960  00000000  00000000  00002718  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000013e8  00000000  00000000  0000a078  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000047ba  00000000  00000000  0000b460  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000f98  00000000  00000000  0000fc1c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00027c19  00000000  00000000  00010bb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000394e  00000000  00000000  000387cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002d8  00000000  00000000  0003c11b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00009c7a  00000000  00000000  0003c3f3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	fd c0       	rjmp	.+506    	; 0x1fc <__ctors_end>
       2:	00 00       	nop
       4:	18 c1       	rjmp	.+560    	; 0x236 <__bad_interrupt>
       6:	00 00       	nop
       8:	16 c1       	rjmp	.+556    	; 0x236 <__bad_interrupt>
       a:	00 00       	nop
       c:	14 c1       	rjmp	.+552    	; 0x236 <__bad_interrupt>
       e:	00 00       	nop
      10:	12 c1       	rjmp	.+548    	; 0x236 <__bad_interrupt>
      12:	00 00       	nop
      14:	10 c1       	rjmp	.+544    	; 0x236 <__bad_interrupt>
      16:	00 00       	nop
      18:	0e c1       	rjmp	.+540    	; 0x236 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	0c c1       	rjmp	.+536    	; 0x236 <__bad_interrupt>
      1e:	00 00       	nop
      20:	0a c1       	rjmp	.+532    	; 0x236 <__bad_interrupt>
      22:	00 00       	nop
      24:	08 c1       	rjmp	.+528    	; 0x236 <__bad_interrupt>
      26:	00 00       	nop
      28:	06 c1       	rjmp	.+524    	; 0x236 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	04 c1       	rjmp	.+520    	; 0x236 <__bad_interrupt>
      2e:	00 00       	nop
      30:	02 c1       	rjmp	.+516    	; 0x236 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 43 0c 	jmp	0x1886	; 0x1886 <__vector_13>
      38:	bc c6       	rjmp	.+3448   	; 0xdb2 <__vector_14>
      3a:	00 00       	nop
      3c:	e3 c6       	rjmp	.+3526   	; 0xe04 <__vector_15>
      3e:	00 00       	nop
      40:	0a c7       	rjmp	.+3604   	; 0xe56 <__vector_16>
      42:	00 00       	nop
      44:	31 c7       	rjmp	.+3682   	; 0xea8 <__vector_17>
      46:	00 00       	nop
      48:	58 c7       	rjmp	.+3760   	; 0xefa <__vector_18>
      4a:	00 00       	nop
      4c:	7f c7       	rjmp	.+3838   	; 0xf4c <__vector_19>
      4e:	00 00       	nop
      50:	a6 c7       	rjmp	.+3916   	; 0xf9e <__vector_20>
      52:	00 00       	nop
      54:	cd c7       	rjmp	.+3994   	; 0xff0 <__vector_21>
      56:	00 00       	nop
      58:	f4 c7       	rjmp	.+4072   	; 0x1042 <__vector_22>
      5a:	00 00       	nop
      5c:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <__vector_23>
      60:	ea c0       	rjmp	.+468    	; 0x236 <__bad_interrupt>
      62:	00 00       	nop
      64:	e8 c0       	rjmp	.+464    	; 0x236 <__bad_interrupt>
      66:	00 00       	nop
      68:	e6 c0       	rjmp	.+460    	; 0x236 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	e4 c0       	rjmp	.+456    	; 0x236 <__bad_interrupt>
      6e:	00 00       	nop
      70:	e2 c0       	rjmp	.+452    	; 0x236 <__bad_interrupt>
      72:	00 00       	nop
      74:	e0 c0       	rjmp	.+448    	; 0x236 <__bad_interrupt>
      76:	00 00       	nop
      78:	de c0       	rjmp	.+444    	; 0x236 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	dc c0       	rjmp	.+440    	; 0x236 <__bad_interrupt>
      7e:	00 00       	nop
      80:	da c0       	rjmp	.+436    	; 0x236 <__bad_interrupt>
      82:	00 00       	nop
      84:	d8 c0       	rjmp	.+432    	; 0x236 <__bad_interrupt>
      86:	00 00       	nop
      88:	d6 c0       	rjmp	.+428    	; 0x236 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d4 c0       	rjmp	.+424    	; 0x236 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d2 c0       	rjmp	.+420    	; 0x236 <__bad_interrupt>
      92:	00 00       	nop
      94:	d0 c0       	rjmp	.+416    	; 0x236 <__bad_interrupt>
      96:	00 00       	nop
      98:	ce c0       	rjmp	.+412    	; 0x236 <__bad_interrupt>
      9a:	00 00       	nop
      9c:	cc c0       	rjmp	.+408    	; 0x236 <__bad_interrupt>
      9e:	00 00       	nop
      a0:	ca c0       	rjmp	.+404    	; 0x236 <__bad_interrupt>
      a2:	00 00       	nop
      a4:	c8 c0       	rjmp	.+400    	; 0x236 <__bad_interrupt>
      a6:	00 00       	nop
      a8:	c6 c0       	rjmp	.+396    	; 0x236 <__bad_interrupt>
      aa:	00 00       	nop
      ac:	c4 c0       	rjmp	.+392    	; 0x236 <__bad_interrupt>
      ae:	00 00       	nop
      b0:	c2 c0       	rjmp	.+388    	; 0x236 <__bad_interrupt>
      b2:	00 00       	nop
      b4:	c0 c0       	rjmp	.+384    	; 0x236 <__bad_interrupt>
      b6:	00 00       	nop
      b8:	be c0       	rjmp	.+380    	; 0x236 <__bad_interrupt>
      ba:	00 00       	nop
      bc:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <__vector_47>
      c0:	0c 94 0d 0a 	jmp	0x141a	; 0x141a <__vector_48>
      c4:	0c 94 36 0a 	jmp	0x146c	; 0x146c <__vector_49>
      c8:	0c 94 5f 0a 	jmp	0x14be	; 0x14be <__vector_50>
      cc:	0c 94 88 0a 	jmp	0x1510	; 0x1510 <__vector_51>
      d0:	0c 94 b1 0a 	jmp	0x1562	; 0x1562 <__vector_52>
      d4:	b0 c0       	rjmp	.+352    	; 0x236 <__bad_interrupt>
      d6:	00 00       	nop
      d8:	ae c0       	rjmp	.+348    	; 0x236 <__bad_interrupt>
      da:	00 00       	nop
      dc:	ac c0       	rjmp	.+344    	; 0x236 <__bad_interrupt>
      de:	00 00       	nop
      e0:	aa c0       	rjmp	.+340    	; 0x236 <__bad_interrupt>
      e2:	00 00       	nop
      e4:	a8 c0       	rjmp	.+336    	; 0x236 <__bad_interrupt>
      e6:	00 00       	nop
      e8:	a6 c0       	rjmp	.+332    	; 0x236 <__bad_interrupt>
      ea:	00 00       	nop
      ec:	a4 c0       	rjmp	.+328    	; 0x236 <__bad_interrupt>
      ee:	00 00       	nop
      f0:	a2 c0       	rjmp	.+324    	; 0x236 <__bad_interrupt>
      f2:	00 00       	nop
      f4:	a0 c0       	rjmp	.+320    	; 0x236 <__bad_interrupt>
      f6:	00 00       	nop
      f8:	9e c0       	rjmp	.+316    	; 0x236 <__bad_interrupt>
      fa:	00 00       	nop
      fc:	9c c0       	rjmp	.+312    	; 0x236 <__bad_interrupt>
      fe:	00 00       	nop
     100:	9a c0       	rjmp	.+308    	; 0x236 <__bad_interrupt>
     102:	00 00       	nop
     104:	98 c0       	rjmp	.+304    	; 0x236 <__bad_interrupt>
     106:	00 00       	nop
     108:	96 c0       	rjmp	.+300    	; 0x236 <__bad_interrupt>
     10a:	00 00       	nop
     10c:	94 c0       	rjmp	.+296    	; 0x236 <__bad_interrupt>
     10e:	00 00       	nop
     110:	92 c0       	rjmp	.+292    	; 0x236 <__bad_interrupt>
     112:	00 00       	nop
     114:	90 c0       	rjmp	.+288    	; 0x236 <__bad_interrupt>
     116:	00 00       	nop
     118:	8e c0       	rjmp	.+284    	; 0x236 <__bad_interrupt>
     11a:	00 00       	nop
     11c:	8c c0       	rjmp	.+280    	; 0x236 <__bad_interrupt>
     11e:	00 00       	nop
     120:	8a c0       	rjmp	.+276    	; 0x236 <__bad_interrupt>
     122:	00 00       	nop
     124:	88 c0       	rjmp	.+272    	; 0x236 <__bad_interrupt>
     126:	00 00       	nop
     128:	86 c0       	rjmp	.+268    	; 0x236 <__bad_interrupt>
     12a:	00 00       	nop
     12c:	84 c0       	rjmp	.+264    	; 0x236 <__bad_interrupt>
     12e:	00 00       	nop
     130:	82 c0       	rjmp	.+260    	; 0x236 <__bad_interrupt>
     132:	00 00       	nop
     134:	0c 94 68 0c 	jmp	0x18d0	; 0x18d0 <__vector_77>
     138:	d6 c7       	rjmp	.+4012   	; 0x10e6 <__vector_78>
     13a:	00 00       	nop
     13c:	fd c7       	rjmp	.+4090   	; 0x1138 <__vector_79>
     13e:	00 00       	nop
     140:	0c 94 c5 08 	jmp	0x118a	; 0x118a <__vector_80>
     144:	0c 94 ee 08 	jmp	0x11dc	; 0x11dc <__vector_81>
     148:	0c 94 17 09 	jmp	0x122e	; 0x122e <__vector_82>
     14c:	0c 94 40 09 	jmp	0x1280	; 0x1280 <__vector_83>
     150:	0c 94 69 09 	jmp	0x12d2	; 0x12d2 <__vector_84>
     154:	0c 94 92 09 	jmp	0x1324	; 0x1324 <__vector_85>
     158:	0c 94 bb 09 	jmp	0x1376	; 0x1376 <__vector_86>
     15c:	6c c0       	rjmp	.+216    	; 0x236 <__bad_interrupt>
     15e:	00 00       	nop
     160:	6a c0       	rjmp	.+212    	; 0x236 <__bad_interrupt>
     162:	00 00       	nop
     164:	68 c0       	rjmp	.+208    	; 0x236 <__bad_interrupt>
     166:	00 00       	nop
     168:	66 c0       	rjmp	.+204    	; 0x236 <__bad_interrupt>
     16a:	00 00       	nop
     16c:	64 c0       	rjmp	.+200    	; 0x236 <__bad_interrupt>
     16e:	00 00       	nop
     170:	62 c0       	rjmp	.+196    	; 0x236 <__bad_interrupt>
     172:	00 00       	nop
     174:	60 c0       	rjmp	.+192    	; 0x236 <__bad_interrupt>
     176:	00 00       	nop
     178:	5e c0       	rjmp	.+188    	; 0x236 <__bad_interrupt>
     17a:	00 00       	nop
     17c:	5c c0       	rjmp	.+184    	; 0x236 <__bad_interrupt>
     17e:	00 00       	nop
     180:	5a c0       	rjmp	.+180    	; 0x236 <__bad_interrupt>
     182:	00 00       	nop
     184:	58 c0       	rjmp	.+176    	; 0x236 <__bad_interrupt>
     186:	00 00       	nop
     188:	56 c0       	rjmp	.+172    	; 0x236 <__bad_interrupt>
     18a:	00 00       	nop
     18c:	54 c0       	rjmp	.+168    	; 0x236 <__bad_interrupt>
     18e:	00 00       	nop
     190:	52 c0       	rjmp	.+164    	; 0x236 <__bad_interrupt>
     192:	00 00       	nop
     194:	50 c0       	rjmp	.+160    	; 0x236 <__bad_interrupt>
     196:	00 00       	nop
     198:	4e c0       	rjmp	.+156    	; 0x236 <__bad_interrupt>
     19a:	00 00       	nop
     19c:	4c c0       	rjmp	.+152    	; 0x236 <__bad_interrupt>
     19e:	00 00       	nop
     1a0:	4a c0       	rjmp	.+148    	; 0x236 <__bad_interrupt>
     1a2:	00 00       	nop
     1a4:	48 c0       	rjmp	.+144    	; 0x236 <__bad_interrupt>
     1a6:	00 00       	nop
     1a8:	46 c0       	rjmp	.+140    	; 0x236 <__bad_interrupt>
     1aa:	00 00       	nop
     1ac:	44 c0       	rjmp	.+136    	; 0x236 <__bad_interrupt>
     1ae:	00 00       	nop
     1b0:	42 c0       	rjmp	.+132    	; 0x236 <__bad_interrupt>
     1b2:	00 00       	nop
     1b4:	40 c0       	rjmp	.+128    	; 0x236 <__bad_interrupt>
     1b6:	00 00       	nop
     1b8:	3e c0       	rjmp	.+124    	; 0x236 <__bad_interrupt>
     1ba:	00 00       	nop
     1bc:	3c c0       	rjmp	.+120    	; 0x236 <__bad_interrupt>
     1be:	00 00       	nop
     1c0:	3a c0       	rjmp	.+116    	; 0x236 <__bad_interrupt>
     1c2:	00 00       	nop
     1c4:	38 c0       	rjmp	.+112    	; 0x236 <__bad_interrupt>
     1c6:	00 00       	nop
     1c8:	36 c0       	rjmp	.+108    	; 0x236 <__bad_interrupt>
     1ca:	00 00       	nop
     1cc:	34 c0       	rjmp	.+104    	; 0x236 <__bad_interrupt>
     1ce:	00 00       	nop
     1d0:	32 c0       	rjmp	.+100    	; 0x236 <__bad_interrupt>
     1d2:	00 00       	nop
     1d4:	30 c0       	rjmp	.+96     	; 0x236 <__bad_interrupt>
     1d6:	00 00       	nop
     1d8:	2e c0       	rjmp	.+92     	; 0x236 <__bad_interrupt>
     1da:	00 00       	nop
     1dc:	2c c0       	rjmp	.+88     	; 0x236 <__bad_interrupt>
     1de:	00 00       	nop
     1e0:	2a c0       	rjmp	.+84     	; 0x236 <__bad_interrupt>
     1e2:	00 00       	nop
     1e4:	28 c0       	rjmp	.+80     	; 0x236 <__bad_interrupt>
     1e6:	00 00       	nop
     1e8:	26 c0       	rjmp	.+76     	; 0x236 <__bad_interrupt>
     1ea:	00 00       	nop
     1ec:	24 c0       	rjmp	.+72     	; 0x236 <__bad_interrupt>
     1ee:	00 00       	nop
     1f0:	22 c0       	rjmp	.+68     	; 0x236 <__bad_interrupt>
     1f2:	00 00       	nop
     1f4:	20 c0       	rjmp	.+64     	; 0x236 <__bad_interrupt>
     1f6:	00 00       	nop
     1f8:	1e c0       	rjmp	.+60     	; 0x236 <__bad_interrupt>
	...

000001fc <__ctors_end>:
     1fc:	11 24       	eor	r1, r1
     1fe:	1f be       	out	0x3f, r1	; 63
     200:	cf ef       	ldi	r28, 0xFF	; 255
     202:	cd bf       	out	0x3d, r28	; 61
     204:	df e2       	ldi	r29, 0x2F	; 47
     206:	de bf       	out	0x3e, r29	; 62

00000208 <__do_copy_data>:
     208:	10 e2       	ldi	r17, 0x20	; 32
     20a:	a0 e0       	ldi	r26, 0x00	; 0
     20c:	b0 e2       	ldi	r27, 0x20	; 32
     20e:	ec ec       	ldi	r30, 0xCC	; 204
     210:	f2 e2       	ldi	r31, 0x22	; 34
     212:	02 c0       	rjmp	.+4      	; 0x218 <__do_copy_data+0x10>
     214:	05 90       	lpm	r0, Z+
     216:	0d 92       	st	X+, r0
     218:	a4 32       	cpi	r26, 0x24	; 36
     21a:	b1 07       	cpc	r27, r17
     21c:	d9 f7       	brne	.-10     	; 0x214 <__do_copy_data+0xc>

0000021e <__do_clear_bss>:
     21e:	21 e2       	ldi	r18, 0x21	; 33
     220:	a4 e2       	ldi	r26, 0x24	; 36
     222:	b0 e2       	ldi	r27, 0x20	; 32
     224:	01 c0       	rjmp	.+2      	; 0x228 <.do_clear_bss_start>

00000226 <.do_clear_bss_loop>:
     226:	1d 92       	st	X+, r1

00000228 <.do_clear_bss_start>:
     228:	a7 30       	cpi	r26, 0x07	; 7
     22a:	b2 07       	cpc	r27, r18
     22c:	e1 f7       	brne	.-8      	; 0x226 <.do_clear_bss_loop>
     22e:	0e 94 30 0c 	call	0x1860	; 0x1860 <main>
     232:	0c 94 64 11 	jmp	0x22c8	; 0x22c8 <_exit>

00000236 <__bad_interrupt>:
     236:	e4 ce       	rjmp	.-568    	; 0x0 <__vectors>

00000238 <spi_xmega_set_baud_div>:
 * \return Status of operation.
 *   \retval >=0  Success.
 *   \retval  <0  Error.
 */
int8_t spi_xmega_set_baud_div(SPI_t *spi, uint32_t baudrate, uint32_t clkper_hz)
{
     238:	cf 92       	push	r12
     23a:	df 92       	push	r13
     23c:	ef 92       	push	r14
     23e:	ff 92       	push	r15
     240:	0f 93       	push	r16
     242:	1f 93       	push	r17
     244:	cf 93       	push	r28
     246:	df 93       	push	r29
     248:	ec 01       	movw	r28, r24
     24a:	6a 01       	movw	r12, r20
     24c:	7b 01       	movw	r14, r22

	/*
	 * Get wanted divisor rounded up so we don't get speed higher than
	 * requested baudrate.
	 */
	divisor = (clkper_hz + baudrate - 1) / baudrate;
     24e:	db 01       	movw	r26, r22
     250:	ca 01       	movw	r24, r20
     252:	01 97       	sbiw	r24, 0x01	; 1
     254:	a1 09       	sbc	r26, r1
     256:	b1 09       	sbc	r27, r1
     258:	bc 01       	movw	r22, r24
     25a:	cd 01       	movw	r24, r26
     25c:	60 0f       	add	r22, r16
     25e:	71 1f       	adc	r23, r17
     260:	82 1f       	adc	r24, r18
     262:	93 1f       	adc	r25, r19
     264:	a7 01       	movw	r20, r14
     266:	96 01       	movw	r18, r12
     268:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <__udivmodsi4>

	if (divisor > 128) {
     26c:	21 38       	cpi	r18, 0x81	; 129
     26e:	31 05       	cpc	r19, r1
     270:	41 05       	cpc	r20, r1
     272:	51 05       	cpc	r21, r1
     274:	f8 f4       	brcc	.+62     	; 0x2b4 <spi_xmega_set_baud_div+0x7c>

	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
     276:	21 34       	cpi	r18, 0x41	; 65
     278:	60 f4       	brcc	.+24     	; 0x292 <spi_xmega_set_baud_div+0x5a>
		ctrl = SPI_PRESCALER_DIV128_gc;
	}
	else if (divisor_8bit > 32) {
     27a:	21 32       	cpi	r18, 0x21	; 33
     27c:	60 f4       	brcc	.+24     	; 0x296 <spi_xmega_set_baud_div+0x5e>
		ctrl = SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 16) {
     27e:	21 31       	cpi	r18, 0x11	; 17
     280:	60 f4       	brcc	.+24     	; 0x29a <spi_xmega_set_baud_div+0x62>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
	}
	else if (divisor_8bit > 8) {
     282:	29 30       	cpi	r18, 0x09	; 9
     284:	60 f4       	brcc	.+24     	; 0x29e <spi_xmega_set_baud_div+0x66>
		ctrl = SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 4) {
     286:	25 30       	cpi	r18, 0x05	; 5
     288:	60 f4       	brcc	.+24     	; 0x2a2 <spi_xmega_set_baud_div+0x6a>
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
	}
	else if (divisor_8bit > 2) {
     28a:	23 30       	cpi	r18, 0x03	; 3
     28c:	60 f0       	brcs	.+24     	; 0x2a6 <spi_xmega_set_baud_div+0x6e>
		ctrl = SPI_PRESCALER_DIV4_gc;
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	0b c0       	rjmp	.+22     	; 0x2a8 <spi_xmega_set_baud_div+0x70>
	/*
	 * For divisor values between the possible ones round up to the closest
	 * higher one to avoid higher baudrate than requested.
	 */
	if (divisor_8bit > 64) {
		ctrl = SPI_PRESCALER_DIV128_gc;
     292:	93 e0       	ldi	r25, 0x03	; 3
     294:	09 c0       	rjmp	.+18     	; 0x2a8 <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 32) {
		ctrl = SPI_PRESCALER_DIV64_gc;
     296:	92 e0       	ldi	r25, 0x02	; 2
     298:	07 c0       	rjmp	.+14     	; 0x2a8 <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 16) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV64_gc;
     29a:	92 e8       	ldi	r25, 0x82	; 130
     29c:	05 c0       	rjmp	.+10     	; 0x2a8 <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 8) {
		ctrl = SPI_PRESCALER_DIV16_gc;
     29e:	91 e0       	ldi	r25, 0x01	; 1
     2a0:	03 c0       	rjmp	.+6      	; 0x2a8 <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 4) {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV16_gc;
     2a2:	91 e8       	ldi	r25, 0x81	; 129
     2a4:	01 c0       	rjmp	.+2      	; 0x2a8 <spi_xmega_set_baud_div+0x70>
	}
	else if (divisor_8bit > 2) {
		ctrl = SPI_PRESCALER_DIV4_gc;
	}
	else {
		ctrl = SPI_CLK2X_bm | SPI_PRESCALER_DIV4_gc;
     2a6:	90 e8       	ldi	r25, 0x80	; 128
	}

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;
     2a8:	88 81       	ld	r24, Y
     2aa:	8c 77       	andi	r24, 0x7C	; 124
     2ac:	89 2b       	or	r24, r25
     2ae:	88 83       	st	Y, r24

	return 1;
     2b0:	81 e0       	ldi	r24, 0x01	; 1
     2b2:	01 c0       	rjmp	.+2      	; 0x2b6 <spi_xmega_set_baud_div+0x7e>
	if (divisor > 128) {
		/*
		 * Highest possible divisor is 128 so fail since we can't get
		 * low enough baudrate.
		 */
		return -1;
     2b4:	8f ef       	ldi	r24, 0xFF	; 255

	// Update register and make sure to clear out any leftover bits
	spi->CTRL = (spi->CTRL & ~(SPI_CLK2X_bm | SPI_PRESCALER_gm)) | ctrl;

	return 1;
}
     2b6:	df 91       	pop	r29
     2b8:	cf 91       	pop	r28
     2ba:	1f 91       	pop	r17
     2bc:	0f 91       	pop	r16
     2be:	ff 90       	pop	r15
     2c0:	ef 90       	pop	r14
     2c2:	df 90       	pop	r13
     2c4:	cf 90       	pop	r12
     2c6:	08 95       	ret

000002c8 <MS5611_calculate>:
   		 MS5611.m[i]=(unsigned long int)MS5611.d[2]+(unsigned long int)MS5611.d[1]*256+(unsigned long int)MS5611.d[0]*65536;   
   	 }
  
  	 
  
   }
     2c8:	2f 92       	push	r2
     2ca:	3f 92       	push	r3
     2cc:	4f 92       	push	r4
     2ce:	5f 92       	push	r5
     2d0:	6f 92       	push	r6
     2d2:	7f 92       	push	r7
     2d4:	8f 92       	push	r8
     2d6:	9f 92       	push	r9
     2d8:	af 92       	push	r10
     2da:	bf 92       	push	r11
     2dc:	cf 92       	push	r12
     2de:	df 92       	push	r13
     2e0:	ef 92       	push	r14
     2e2:	ff 92       	push	r15
     2e4:	0f 93       	push	r16
     2e6:	1f 93       	push	r17
     2e8:	cf 93       	push	r28
     2ea:	df 93       	push	r29
     2ec:	cd b7       	in	r28, 0x3d	; 61
     2ee:	de b7       	in	r29, 0x3e	; 62
     2f0:	64 97       	sbiw	r28, 0x14	; 20
     2f2:	cd bf       	out	0x3d, r28	; 61
     2f4:	de bf       	out	0x3e, r29	; 62
     2f6:	4c 01       	movw	r8, r24
     2f8:	3b 01       	movw	r6, r22
     2fa:	4d 87       	std	Y+13, r20	; 0x0d
     2fc:	5e 87       	std	Y+14, r21	; 0x0e
     2fe:	19 01       	movw	r2, r18
     300:	b8 01       	movw	r22, r16
     302:	80 e0       	ldi	r24, 0x00	; 0
     304:	90 e0       	ldi	r25, 0x00	; 0
     306:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <__floatunsisf>
     30a:	20 e0       	ldi	r18, 0x00	; 0
     30c:	30 e0       	ldi	r19, 0x00	; 0
     30e:	40 e8       	ldi	r20, 0x80	; 128
     310:	53 e4       	ldi	r21, 0x43	; 67
     312:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__mulsf3>
     316:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__fixsfsi>
     31a:	29 a5       	ldd	r18, Y+41	; 0x29
     31c:	3a a5       	ldd	r19, Y+42	; 0x2a
     31e:	4b a5       	ldd	r20, Y+43	; 0x2b
     320:	5c a5       	ldd	r21, Y+44	; 0x2c
     322:	26 1b       	sub	r18, r22
     324:	37 0b       	sbc	r19, r23
     326:	48 0b       	sbc	r20, r24
     328:	59 0b       	sbc	r21, r25
     32a:	ca 01       	movw	r24, r20
     32c:	b9 01       	movw	r22, r18
     32e:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__floatsisf>
     332:	69 83       	std	Y+1, r22	; 0x01
     334:	7a 83       	std	Y+2, r23	; 0x02
     336:	8b 83       	std	Y+3, r24	; 0x03
     338:	9c 83       	std	Y+4, r25	; 0x04
     33a:	b7 01       	movw	r22, r14
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <__floatunsisf>
     344:	20 e0       	ldi	r18, 0x00	; 0
     346:	30 e0       	ldi	r19, 0x00	; 0
     348:	40 e0       	ldi	r20, 0x00	; 0
     34a:	54 e3       	ldi	r21, 0x34	; 52
     34c:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__mulsf3>
     350:	29 81       	ldd	r18, Y+1	; 0x01
     352:	3a 81       	ldd	r19, Y+2	; 0x02
     354:	4b 81       	ldd	r20, Y+3	; 0x03
     356:	5c 81       	ldd	r21, Y+4	; 0x04
     358:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__mulsf3>
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	30 e0       	ldi	r19, 0x00	; 0
     360:	4a ef       	ldi	r20, 0xFA	; 250
     362:	54 e4       	ldi	r21, 0x44	; 68
     364:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__addsf3>
     368:	20 e0       	ldi	r18, 0x00	; 0
     36a:	30 e0       	ldi	r19, 0x00	; 0
     36c:	48 ec       	ldi	r20, 0xC8	; 200
     36e:	52 e4       	ldi	r21, 0x42	; 66
     370:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__divsf3>
     374:	69 87       	std	Y+9, r22	; 0x09
     376:	7a 87       	std	Y+10, r23	; 0x0a
     378:	8b 87       	std	Y+11, r24	; 0x0b
     37a:	9c 87       	std	Y+12, r25	; 0x0c
     37c:	b3 01       	movw	r22, r6
     37e:	80 e0       	ldi	r24, 0x00	; 0
     380:	90 e0       	ldi	r25, 0x00	; 0
     382:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <__floatunsisf>
     386:	20 e0       	ldi	r18, 0x00	; 0
     388:	30 e0       	ldi	r19, 0x00	; 0
     38a:	40 e8       	ldi	r20, 0x80	; 128
     38c:	55 e4       	ldi	r21, 0x45	; 69
     38e:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__mulsf3>
     392:	69 8b       	std	Y+17, r22	; 0x11
     394:	7a 8b       	std	Y+18, r23	; 0x12
     396:	8b 8b       	std	Y+19, r24	; 0x13
     398:	9c 8b       	std	Y+20, r25	; 0x14
     39a:	20 e0       	ldi	r18, 0x00	; 0
     39c:	30 e0       	ldi	r19, 0x00	; 0
     39e:	40 e0       	ldi	r20, 0x00	; 0
     3a0:	5c e3       	ldi	r21, 0x3C	; 60
     3a2:	69 81       	ldd	r22, Y+1	; 0x01
     3a4:	7a 81       	ldd	r23, Y+2	; 0x02
     3a6:	8b 81       	ldd	r24, Y+3	; 0x03
     3a8:	9c 81       	ldd	r25, Y+4	; 0x04
     3aa:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__mulsf3>
     3ae:	20 e0       	ldi	r18, 0x00	; 0
     3b0:	30 e0       	ldi	r19, 0x00	; 0
     3b2:	40 e8       	ldi	r20, 0x80	; 128
     3b4:	5d e3       	ldi	r21, 0x3D	; 61
     3b6:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__mulsf3>
     3ba:	2b 01       	movw	r4, r22
     3bc:	3c 01       	movw	r6, r24
     3be:	b1 01       	movw	r22, r2
     3c0:	80 e0       	ldi	r24, 0x00	; 0
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <__floatunsisf>
     3c8:	9b 01       	movw	r18, r22
     3ca:	ac 01       	movw	r20, r24
     3cc:	c3 01       	movw	r24, r6
     3ce:	b2 01       	movw	r22, r4
     3d0:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__mulsf3>
     3d4:	9b 01       	movw	r18, r22
     3d6:	ac 01       	movw	r20, r24
     3d8:	69 89       	ldd	r22, Y+17	; 0x11
     3da:	7a 89       	ldd	r23, Y+18	; 0x12
     3dc:	8b 89       	ldd	r24, Y+19	; 0x13
     3de:	9c 89       	ldd	r25, Y+20	; 0x14
     3e0:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__addsf3>
     3e4:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__fixsfsi>
     3e8:	2b 01       	movw	r4, r22
     3ea:	3c 01       	movw	r6, r24
     3ec:	b4 01       	movw	r22, r8
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <__floatunsisf>
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	40 e8       	ldi	r20, 0x80	; 128
     3fc:	55 e4       	ldi	r21, 0x45	; 69
     3fe:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__mulsf3>
     402:	6d 83       	std	Y+5, r22	; 0x05
     404:	7e 83       	std	Y+6, r23	; 0x06
     406:	8f 83       	std	Y+7, r24	; 0x07
     408:	98 87       	std	Y+8, r25	; 0x08
     40a:	20 e0       	ldi	r18, 0x00	; 0
     40c:	30 e0       	ldi	r19, 0x00	; 0
     40e:	40 e8       	ldi	r20, 0x80	; 128
     410:	5b e3       	ldi	r21, 0x3B	; 59
     412:	69 81       	ldd	r22, Y+1	; 0x01
     414:	7a 81       	ldd	r23, Y+2	; 0x02
     416:	8b 81       	ldd	r24, Y+3	; 0x03
     418:	9c 81       	ldd	r25, Y+4	; 0x04
     41a:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__mulsf3>
     41e:	20 e0       	ldi	r18, 0x00	; 0
     420:	30 e0       	ldi	r19, 0x00	; 0
     422:	40 e0       	ldi	r20, 0x00	; 0
     424:	5e e3       	ldi	r21, 0x3E	; 62
     426:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__mulsf3>
     42a:	69 83       	std	Y+1, r22	; 0x01
     42c:	7a 83       	std	Y+2, r23	; 0x02
     42e:	8b 83       	std	Y+3, r24	; 0x03
     430:	9c 83       	std	Y+4, r25	; 0x04
     432:	4d 85       	ldd	r20, Y+13	; 0x0d
     434:	5e 85       	ldd	r21, Y+14	; 0x0e
     436:	ba 01       	movw	r22, r20
     438:	80 e0       	ldi	r24, 0x00	; 0
     43a:	90 e0       	ldi	r25, 0x00	; 0
     43c:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <__floatunsisf>
     440:	9b 01       	movw	r18, r22
     442:	ac 01       	movw	r20, r24
     444:	69 81       	ldd	r22, Y+1	; 0x01
     446:	7a 81       	ldd	r23, Y+2	; 0x02
     448:	8b 81       	ldd	r24, Y+3	; 0x03
     44a:	9c 81       	ldd	r25, Y+4	; 0x04
     44c:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__mulsf3>
     450:	9b 01       	movw	r18, r22
     452:	ac 01       	movw	r20, r24
     454:	6d 81       	ldd	r22, Y+5	; 0x05
     456:	7e 81       	ldd	r23, Y+6	; 0x06
     458:	8f 81       	ldd	r24, Y+7	; 0x07
     45a:	98 85       	ldd	r25, Y+8	; 0x08
     45c:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__addsf3>
     460:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__fixsfsi>
     464:	69 83       	std	Y+1, r22	; 0x01
     466:	7a 83       	std	Y+2, r23	; 0x02
     468:	8b 83       	std	Y+3, r24	; 0x03
     46a:	9c 83       	std	Y+4, r25	; 0x04
     46c:	20 e0       	ldi	r18, 0x00	; 0
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	40 ea       	ldi	r20, 0xA0	; 160
     472:	51 e4       	ldi	r21, 0x41	; 65
     474:	69 85       	ldd	r22, Y+9	; 0x09
     476:	7a 85       	ldd	r23, Y+10	; 0x0a
     478:	8b 85       	ldd	r24, Y+11	; 0x0b
     47a:	9c 85       	ldd	r25, Y+12	; 0x0c
     47c:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__cmpsf2>
     480:	88 23       	and	r24, r24
     482:	0c f0       	brlt	.+2      	; 0x486 <MS5611_calculate+0x1be>
     484:	bb c0       	rjmp	.+374    	; 0x5fc <MS5611_calculate+0x334>
     486:	20 e0       	ldi	r18, 0x00	; 0
     488:	30 e0       	ldi	r19, 0x00	; 0
     48a:	4a ef       	ldi	r20, 0xFA	; 250
     48c:	54 e4       	ldi	r21, 0x44	; 68
     48e:	69 85       	ldd	r22, Y+9	; 0x09
     490:	7a 85       	ldd	r23, Y+10	; 0x0a
     492:	8b 85       	ldd	r24, Y+11	; 0x0b
     494:	9c 85       	ldd	r25, Y+12	; 0x0c
     496:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__subsf3>
     49a:	9b 01       	movw	r18, r22
     49c:	ac 01       	movw	r20, r24
     49e:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__mulsf3>
     4a2:	6d 83       	std	Y+5, r22	; 0x05
     4a4:	7e 83       	std	Y+6, r23	; 0x06
     4a6:	8f 83       	std	Y+7, r24	; 0x07
     4a8:	98 87       	std	Y+8, r25	; 0x08
     4aa:	20 e0       	ldi	r18, 0x00	; 0
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	40 e0       	ldi	r20, 0x00	; 0
     4b0:	5f e3       	ldi	r21, 0x3F	; 63
     4b2:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__mulsf3>
     4b6:	20 e0       	ldi	r18, 0x00	; 0
     4b8:	30 e0       	ldi	r19, 0x00	; 0
     4ba:	40 ea       	ldi	r20, 0xA0	; 160
     4bc:	50 e4       	ldi	r21, 0x40	; 64
     4be:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__mulsf3>
     4c2:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__fixsfsi>
     4c6:	6d 87       	std	Y+13, r22	; 0x0d
     4c8:	7e 87       	std	Y+14, r23	; 0x0e
     4ca:	8f 87       	std	Y+15, r24	; 0x0f
     4cc:	98 8b       	std	Y+16, r25	; 0x10
     4ce:	20 e0       	ldi	r18, 0x00	; 0
     4d0:	30 e0       	ldi	r19, 0x00	; 0
     4d2:	40 e8       	ldi	r20, 0x80	; 128
     4d4:	5e e3       	ldi	r21, 0x3E	; 62
     4d6:	6d 81       	ldd	r22, Y+5	; 0x05
     4d8:	7e 81       	ldd	r23, Y+6	; 0x06
     4da:	8f 81       	ldd	r24, Y+7	; 0x07
     4dc:	98 85       	ldd	r25, Y+8	; 0x08
     4de:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__mulsf3>
     4e2:	20 e0       	ldi	r18, 0x00	; 0
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	40 ea       	ldi	r20, 0xA0	; 160
     4e8:	50 e4       	ldi	r21, 0x40	; 64
     4ea:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__mulsf3>
     4ee:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__fixsfsi>
     4f2:	6d 83       	std	Y+5, r22	; 0x05
     4f4:	7e 83       	std	Y+6, r23	; 0x06
     4f6:	8f 83       	std	Y+7, r24	; 0x07
     4f8:	98 87       	std	Y+8, r25	; 0x08
     4fa:	20 e0       	ldi	r18, 0x00	; 0
     4fc:	30 e0       	ldi	r19, 0x00	; 0
     4fe:	40 e7       	ldi	r20, 0x70	; 112
     500:	51 ec       	ldi	r21, 0xC1	; 193
     502:	69 85       	ldd	r22, Y+9	; 0x09
     504:	7a 85       	ldd	r23, Y+10	; 0x0a
     506:	8b 85       	ldd	r24, Y+11	; 0x0b
     508:	9c 85       	ldd	r25, Y+12	; 0x0c
     50a:	0e 94 d7 0c 	call	0x19ae	; 0x19ae <__cmpsf2>
     50e:	88 23       	and	r24, r24
     510:	0c f0       	brlt	.+2      	; 0x514 <MS5611_calculate+0x24c>
     512:	5c c0       	rjmp	.+184    	; 0x5cc <MS5611_calculate+0x304>
     514:	20 e0       	ldi	r18, 0x00	; 0
     516:	30 e8       	ldi	r19, 0x80	; 128
     518:	4b eb       	ldi	r20, 0xBB	; 187
     51a:	54 e4       	ldi	r21, 0x44	; 68
     51c:	69 85       	ldd	r22, Y+9	; 0x09
     51e:	7a 85       	ldd	r23, Y+10	; 0x0a
     520:	8b 85       	ldd	r24, Y+11	; 0x0b
     522:	9c 85       	ldd	r25, Y+12	; 0x0c
     524:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__addsf3>
     528:	9b 01       	movw	r18, r22
     52a:	ac 01       	movw	r20, r24
     52c:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__mulsf3>
     530:	69 8b       	std	Y+17, r22	; 0x11
     532:	7a 8b       	std	Y+18, r23	; 0x12
     534:	8b 8b       	std	Y+19, r24	; 0x13
     536:	9c 8b       	std	Y+20, r25	; 0x14
     538:	6d 85       	ldd	r22, Y+13	; 0x0d
     53a:	7e 85       	ldd	r23, Y+14	; 0x0e
     53c:	8f 85       	ldd	r24, Y+15	; 0x0f
     53e:	98 89       	ldd	r25, Y+16	; 0x10
     540:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__floatsisf>
     544:	6d 87       	std	Y+13, r22	; 0x0d
     546:	7e 87       	std	Y+14, r23	; 0x0e
     548:	8f 87       	std	Y+15, r24	; 0x0f
     54a:	98 8b       	std	Y+16, r25	; 0x10
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	40 ee       	ldi	r20, 0xE0	; 224
     552:	50 e4       	ldi	r21, 0x40	; 64
     554:	69 89       	ldd	r22, Y+17	; 0x11
     556:	7a 89       	ldd	r23, Y+18	; 0x12
     558:	8b 89       	ldd	r24, Y+19	; 0x13
     55a:	9c 89       	ldd	r25, Y+20	; 0x14
     55c:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__mulsf3>
     560:	9b 01       	movw	r18, r22
     562:	ac 01       	movw	r20, r24
     564:	6d 85       	ldd	r22, Y+13	; 0x0d
     566:	7e 85       	ldd	r23, Y+14	; 0x0e
     568:	8f 85       	ldd	r24, Y+15	; 0x0f
     56a:	98 89       	ldd	r25, Y+16	; 0x10
     56c:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__addsf3>
     570:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__fixsfsi>
     574:	6d 87       	std	Y+13, r22	; 0x0d
     576:	7e 87       	std	Y+14, r23	; 0x0e
     578:	8f 87       	std	Y+15, r24	; 0x0f
     57a:	98 8b       	std	Y+16, r25	; 0x10
     57c:	6d 81       	ldd	r22, Y+5	; 0x05
     57e:	7e 81       	ldd	r23, Y+6	; 0x06
     580:	8f 81       	ldd	r24, Y+7	; 0x07
     582:	98 85       	ldd	r25, Y+8	; 0x08
     584:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__floatsisf>
     588:	6d 83       	std	Y+5, r22	; 0x05
     58a:	7e 83       	std	Y+6, r23	; 0x06
     58c:	8f 83       	std	Y+7, r24	; 0x07
     58e:	98 87       	std	Y+8, r25	; 0x08
     590:	20 e0       	ldi	r18, 0x00	; 0
     592:	30 e0       	ldi	r19, 0x00	; 0
     594:	40 e0       	ldi	r20, 0x00	; 0
     596:	5f e3       	ldi	r21, 0x3F	; 63
     598:	69 89       	ldd	r22, Y+17	; 0x11
     59a:	7a 89       	ldd	r23, Y+18	; 0x12
     59c:	8b 89       	ldd	r24, Y+19	; 0x13
     59e:	9c 89       	ldd	r25, Y+20	; 0x14
     5a0:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__mulsf3>
     5a4:	20 e0       	ldi	r18, 0x00	; 0
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	40 e3       	ldi	r20, 0x30	; 48
     5aa:	51 e4       	ldi	r21, 0x41	; 65
     5ac:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__mulsf3>
     5b0:	9b 01       	movw	r18, r22
     5b2:	ac 01       	movw	r20, r24
     5b4:	6d 81       	ldd	r22, Y+5	; 0x05
     5b6:	7e 81       	ldd	r23, Y+6	; 0x06
     5b8:	8f 81       	ldd	r24, Y+7	; 0x07
     5ba:	98 85       	ldd	r25, Y+8	; 0x08
     5bc:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__addsf3>
     5c0:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__fixsfsi>
     5c4:	6d 83       	std	Y+5, r22	; 0x05
     5c6:	7e 83       	std	Y+6, r23	; 0x06
     5c8:	8f 83       	std	Y+7, r24	; 0x07
     5ca:	98 87       	std	Y+8, r25	; 0x08
     5cc:	8d 85       	ldd	r24, Y+13	; 0x0d
     5ce:	9e 85       	ldd	r25, Y+14	; 0x0e
     5d0:	af 85       	ldd	r26, Y+15	; 0x0f
     5d2:	b8 89       	ldd	r27, Y+16	; 0x10
     5d4:	48 1a       	sub	r4, r24
     5d6:	59 0a       	sbc	r5, r25
     5d8:	6a 0a       	sbc	r6, r26
     5da:	7b 0a       	sbc	r7, r27
     5dc:	29 81       	ldd	r18, Y+1	; 0x01
     5de:	3a 81       	ldd	r19, Y+2	; 0x02
     5e0:	4b 81       	ldd	r20, Y+3	; 0x03
     5e2:	5c 81       	ldd	r21, Y+4	; 0x04
     5e4:	8d 81       	ldd	r24, Y+5	; 0x05
     5e6:	9e 81       	ldd	r25, Y+6	; 0x06
     5e8:	af 81       	ldd	r26, Y+7	; 0x07
     5ea:	b8 85       	ldd	r27, Y+8	; 0x08
     5ec:	28 1b       	sub	r18, r24
     5ee:	39 0b       	sbc	r19, r25
     5f0:	4a 0b       	sbc	r20, r26
     5f2:	5b 0b       	sbc	r21, r27
     5f4:	29 83       	std	Y+1, r18	; 0x01
     5f6:	3a 83       	std	Y+2, r19	; 0x02
     5f8:	4b 83       	std	Y+3, r20	; 0x03
     5fa:	5c 83       	std	Y+4, r21	; 0x04
     5fc:	69 81       	ldd	r22, Y+1	; 0x01
     5fe:	7a 81       	ldd	r23, Y+2	; 0x02
     600:	8b 81       	ldd	r24, Y+3	; 0x03
     602:	9c 81       	ldd	r25, Y+4	; 0x04
     604:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__floatsisf>
     608:	20 e0       	ldi	r18, 0x00	; 0
     60a:	30 e0       	ldi	r19, 0x00	; 0
     60c:	40 e0       	ldi	r20, 0x00	; 0
     60e:	55 e3       	ldi	r21, 0x35	; 53
     610:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__mulsf3>
     614:	20 e0       	ldi	r18, 0x00	; 0
     616:	30 e0       	ldi	r19, 0x00	; 0
     618:	40 e0       	ldi	r20, 0x00	; 0
     61a:	58 e3       	ldi	r21, 0x38	; 56
     61c:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__mulsf3>
     620:	20 e0       	ldi	r18, 0x00	; 0
     622:	30 e0       	ldi	r19, 0x00	; 0
     624:	40 e0       	ldi	r20, 0x00	; 0
     626:	51 e4       	ldi	r21, 0x41	; 65
     628:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__mulsf3>
     62c:	69 83       	std	Y+1, r22	; 0x01
     62e:	7a 83       	std	Y+2, r23	; 0x02
     630:	8b 83       	std	Y+3, r24	; 0x03
     632:	9c 83       	std	Y+4, r25	; 0x04
     634:	c6 01       	movw	r24, r12
     636:	b5 01       	movw	r22, r10
     638:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__floatsisf>
     63c:	9b 01       	movw	r18, r22
     63e:	ac 01       	movw	r20, r24
     640:	69 81       	ldd	r22, Y+1	; 0x01
     642:	7a 81       	ldd	r23, Y+2	; 0x02
     644:	8b 81       	ldd	r24, Y+3	; 0x03
     646:	9c 81       	ldd	r25, Y+4	; 0x04
     648:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__mulsf3>
     64c:	6b 01       	movw	r12, r22
     64e:	7c 01       	movw	r14, r24
     650:	c3 01       	movw	r24, r6
     652:	b2 01       	movw	r22, r4
     654:	0e 94 76 0d 	call	0x1aec	; 0x1aec <__floatsisf>
     658:	20 e0       	ldi	r18, 0x00	; 0
     65a:	30 e0       	ldi	r19, 0x00	; 0
     65c:	40 e0       	ldi	r20, 0x00	; 0
     65e:	58 e3       	ldi	r21, 0x38	; 56
     660:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__mulsf3>
     664:	20 e0       	ldi	r18, 0x00	; 0
     666:	30 e0       	ldi	r19, 0x00	; 0
     668:	40 e8       	ldi	r20, 0x80	; 128
     66a:	51 e4       	ldi	r21, 0x41	; 65
     66c:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__mulsf3>
     670:	9b 01       	movw	r18, r22
     672:	ac 01       	movw	r20, r24
     674:	c7 01       	movw	r24, r14
     676:	b6 01       	movw	r22, r12
     678:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__subsf3>
     67c:	20 e0       	ldi	r18, 0x00	; 0
     67e:	30 e0       	ldi	r19, 0x00	; 0
     680:	48 ec       	ldi	r20, 0xC8	; 200
     682:	52 e4       	ldi	r21, 0x42	; 66
     684:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <__divsf3>
     688:	20 e0       	ldi	r18, 0x00	; 0
     68a:	30 e0       	ldi	r19, 0x00	; 0
     68c:	48 ec       	ldi	r20, 0xC8	; 200
     68e:	52 e4       	ldi	r21, 0x42	; 66
     690:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__mulsf3>
     694:	6b 01       	movw	r12, r22
     696:	7c 01       	movw	r14, r24
     698:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__fixsfsi>
     69c:	76 2e       	mov	r7, r22
     69e:	67 2e       	mov	r6, r23
     6a0:	58 2e       	mov	r5, r24
     6a2:	49 2e       	mov	r4, r25
     6a4:	60 93 80 20 	sts	0x2080, r22
     6a8:	70 93 81 20 	sts	0x2081, r23
     6ac:	80 93 82 20 	sts	0x2082, r24
     6b0:	90 93 83 20 	sts	0x2083, r25
     6b4:	80 91 00 20 	lds	r24, 0x2000
     6b8:	81 30       	cpi	r24, 0x01	; 1
     6ba:	51 f4       	brne	.+20     	; 0x6d0 <MS5611_calculate+0x408>
     6bc:	c0 92 73 20 	sts	0x2073, r12
     6c0:	d0 92 74 20 	sts	0x2074, r13
     6c4:	e0 92 75 20 	sts	0x2075, r14
     6c8:	f0 92 76 20 	sts	0x2076, r15
     6cc:	10 92 00 20 	sts	0x2000, r1
     6d0:	03 e7       	ldi	r16, 0x73	; 115
     6d2:	10 e2       	ldi	r17, 0x20	; 32
     6d4:	d8 01       	movw	r26, r16
     6d6:	8d 90       	ld	r8, X+
     6d8:	9d 90       	ld	r9, X+
     6da:	ad 90       	ld	r10, X+
     6dc:	bc 90       	ld	r11, X
     6de:	a5 01       	movw	r20, r10
     6e0:	94 01       	movw	r18, r8
     6e2:	c7 01       	movw	r24, r14
     6e4:	b6 01       	movw	r22, r12
     6e6:	0e 94 72 0c 	call	0x18e4	; 0x18e4 <__subsf3>
     6ea:	20 ea       	ldi	r18, 0xA0	; 160
     6ec:	3d e6       	ldi	r19, 0x6D	; 109
     6ee:	43 e0       	ldi	r20, 0x03	; 3
     6f0:	5f e3       	ldi	r21, 0x3F	; 63
     6f2:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__mulsf3>
     6f6:	9b 01       	movw	r18, r22
     6f8:	ac 01       	movw	r20, r24
     6fa:	c5 01       	movw	r24, r10
     6fc:	b4 01       	movw	r22, r8
     6fe:	0e 94 73 0c 	call	0x18e6	; 0x18e6 <__addsf3>
     702:	60 93 77 20 	sts	0x2077, r22
     706:	70 93 78 20 	sts	0x2078, r23
     70a:	80 93 79 20 	sts	0x2079, r24
     70e:	90 93 7a 20 	sts	0x207A, r25
     712:	f8 01       	movw	r30, r16
     714:	60 83       	st	Z, r22
     716:	71 83       	std	Z+1, r23	; 0x01
     718:	82 83       	std	Z+2, r24	; 0x02
     71a:	93 83       	std	Z+3, r25	; 0x03
     71c:	4f 92       	push	r4
     71e:	5f 92       	push	r5
     720:	6f 92       	push	r6
     722:	7f 92       	push	r7
     724:	81 e0       	ldi	r24, 0x01	; 1
     726:	90 e2       	ldi	r25, 0x20	; 32
     728:	9f 93       	push	r25
     72a:	8f 93       	push	r24
     72c:	0d e9       	ldi	r16, 0x9D	; 157
     72e:	10 e2       	ldi	r17, 0x20	; 32
     730:	1f 93       	push	r17
     732:	0f 93       	push	r16
     734:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <sprintf>
     738:	8e d1       	rcall	.+796    	; 0xa56 <UART_SEND>
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	48 ec       	ldi	r20, 0xC8	; 200
     740:	52 e4       	ldi	r21, 0x42	; 66
     742:	69 85       	ldd	r22, Y+9	; 0x09
     744:	7a 85       	ldd	r23, Y+10	; 0x0a
     746:	8b 85       	ldd	r24, Y+11	; 0x0b
     748:	9c 85       	ldd	r25, Y+12	; 0x0c
     74a:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <__mulsf3>
     74e:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <__fixsfsi>
     752:	9f 93       	push	r25
     754:	8f 93       	push	r24
     756:	7f 93       	push	r23
     758:	6f 93       	push	r22
     75a:	80 e1       	ldi	r24, 0x10	; 16
     75c:	90 e2       	ldi	r25, 0x20	; 32
     75e:	9f 93       	push	r25
     760:	8f 93       	push	r24
     762:	1f 93       	push	r17
     764:	0f 93       	push	r16
     766:	0e 94 ab 0e 	call	0x1d56	; 0x1d56 <sprintf>
     76a:	75 d1       	rcall	.+746    	; 0xa56 <UART_SEND>
     76c:	cd bf       	out	0x3d, r28	; 61
     76e:	de bf       	out	0x3e, r29	; 62
     770:	64 96       	adiw	r28, 0x14	; 20
     772:	cd bf       	out	0x3d, r28	; 61
     774:	de bf       	out	0x3e, r29	; 62
     776:	df 91       	pop	r29
     778:	cf 91       	pop	r28
     77a:	1f 91       	pop	r17
     77c:	0f 91       	pop	r16
     77e:	ff 90       	pop	r15
     780:	ef 90       	pop	r14
     782:	df 90       	pop	r13
     784:	cf 90       	pop	r12
     786:	bf 90       	pop	r11
     788:	af 90       	pop	r10
     78a:	9f 90       	pop	r9
     78c:	8f 90       	pop	r8
     78e:	7f 90       	pop	r7
     790:	6f 90       	pop	r6
     792:	5f 90       	pop	r5
     794:	4f 90       	pop	r4
     796:	3f 90       	pop	r3
     798:	2f 90       	pop	r2
     79a:	08 95       	ret

0000079c <MS5611_reset>:
     79c:	0f 93       	push	r16
     79e:	8e e1       	ldi	r24, 0x1E	; 30
     7a0:	80 93 5b 20 	sts	0x205B, r24
     7a4:	00 e0       	ldi	r16, 0x00	; 0
     7a6:	21 e0       	ldi	r18, 0x01	; 1
     7a8:	4b e5       	ldi	r20, 0x5B	; 91
     7aa:	50 e2       	ldi	r21, 0x20	; 32
     7ac:	67 e7       	ldi	r22, 0x77	; 119
     7ae:	84 e8       	ldi	r24, 0x84	; 132
     7b0:	90 e2       	ldi	r25, 0x20	; 32
     7b2:	28 d2       	rcall	.+1104   	; 0xc04 <TWI_MasterWriteRead>
     7b4:	eb e9       	ldi	r30, 0x9B	; 155
     7b6:	f0 e2       	ldi	r31, 0x20	; 32
     7b8:	80 81       	ld	r24, Z
     7ba:	81 11       	cpse	r24, r1
     7bc:	fd cf       	rjmp	.-6      	; 0x7b8 <MS5611_reset+0x1c>
     7be:	8f eb       	ldi	r24, 0xBF	; 191
     7c0:	9d e5       	ldi	r25, 0x5D	; 93
     7c2:	01 97       	sbiw	r24, 0x01	; 1
     7c4:	f1 f7       	brne	.-4      	; 0x7c2 <MS5611_reset+0x26>
     7c6:	00 c0       	rjmp	.+0      	; 0x7c8 <MS5611_reset+0x2c>
     7c8:	00 00       	nop
     7ca:	0f 91       	pop	r16
     7cc:	08 95       	ret

000007ce <MS5611_read_PROM>:
     7ce:	4f 92       	push	r4
     7d0:	5f 92       	push	r5
     7d2:	6f 92       	push	r6
     7d4:	7f 92       	push	r7
     7d6:	8f 92       	push	r8
     7d8:	9f 92       	push	r9
     7da:	af 92       	push	r10
     7dc:	bf 92       	push	r11
     7de:	cf 92       	push	r12
     7e0:	df 92       	push	r13
     7e2:	ef 92       	push	r14
     7e4:	ff 92       	push	r15
     7e6:	0f 93       	push	r16
     7e8:	cf 93       	push	r28
     7ea:	df 93       	push	r29
     7ec:	82 ea       	ldi	r24, 0xA2	; 162
     7ee:	80 93 5c 20 	sts	0x205C, r24
     7f2:	0f 2e       	mov	r0, r31
     7f4:	ff e5       	ldi	r31, 0x5F	; 95
     7f6:	6f 2e       	mov	r6, r31
     7f8:	f0 e2       	ldi	r31, 0x20	; 32
     7fa:	7f 2e       	mov	r7, r31
     7fc:	f0 2d       	mov	r31, r0
     7fe:	0f 2e       	mov	r0, r31
     800:	fb e6       	ldi	r31, 0x6B	; 107
     802:	8f 2e       	mov	r8, r31
     804:	f0 e2       	ldi	r31, 0x20	; 32
     806:	9f 2e       	mov	r9, r31
     808:	f0 2d       	mov	r31, r0
     80a:	cb e9       	ldi	r28, 0x9B	; 155
     80c:	d0 e2       	ldi	r29, 0x20	; 32
     80e:	0f 2e       	mov	r0, r31
     810:	ff e8       	ldi	r31, 0x8F	; 143
     812:	af 2e       	mov	r10, r31
     814:	f0 e2       	ldi	r31, 0x20	; 32
     816:	bf 2e       	mov	r11, r31
     818:	f0 2d       	mov	r31, r0
     81a:	0f 2e       	mov	r0, r31
     81c:	f6 e5       	ldi	r31, 0x56	; 86
     81e:	cf 2e       	mov	r12, r31
     820:	f0 e2       	ldi	r31, 0x20	; 32
     822:	df 2e       	mov	r13, r31
     824:	f0 2d       	mov	r31, r0
     826:	0f 2e       	mov	r0, r31
     828:	f0 e9       	ldi	r31, 0x90	; 144
     82a:	ef 2e       	mov	r14, r31
     82c:	f0 e2       	ldi	r31, 0x20	; 32
     82e:	ff 2e       	mov	r15, r31
     830:	f0 2d       	mov	r31, r0
     832:	0f 2e       	mov	r0, r31
     834:	f7 e5       	ldi	r31, 0x57	; 87
     836:	4f 2e       	mov	r4, r31
     838:	f0 e2       	ldi	r31, 0x20	; 32
     83a:	5f 2e       	mov	r5, r31
     83c:	f0 2d       	mov	r31, r0
     83e:	02 e0       	ldi	r16, 0x02	; 2
     840:	21 e0       	ldi	r18, 0x01	; 1
     842:	4c e5       	ldi	r20, 0x5C	; 92
     844:	50 e2       	ldi	r21, 0x20	; 32
     846:	67 e7       	ldi	r22, 0x77	; 119
     848:	84 e8       	ldi	r24, 0x84	; 132
     84a:	90 e2       	ldi	r25, 0x20	; 32
     84c:	db d1       	rcall	.+950    	; 0xc04 <TWI_MasterWriteRead>
     84e:	88 81       	ld	r24, Y
     850:	81 11       	cpse	r24, r1
     852:	fd cf       	rjmp	.-6      	; 0x84e <MS5611_read_PROM+0x80>
     854:	ec e5       	ldi	r30, 0x5C	; 92
     856:	f0 e2       	ldi	r31, 0x20	; 32
     858:	80 81       	ld	r24, Z
     85a:	8e 5f       	subi	r24, 0xFE	; 254
     85c:	80 83       	st	Z, r24
     85e:	f5 01       	movw	r30, r10
     860:	80 81       	ld	r24, Z
     862:	f6 01       	movw	r30, r12
     864:	80 83       	st	Z, r24
     866:	f7 01       	movw	r30, r14
     868:	20 81       	ld	r18, Z
     86a:	f2 01       	movw	r30, r4
     86c:	20 83       	st	Z, r18
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	98 2f       	mov	r25, r24
     872:	88 27       	eor	r24, r24
     874:	82 0f       	add	r24, r18
     876:	91 1d       	adc	r25, r1
     878:	f3 01       	movw	r30, r6
     87a:	81 93       	st	Z+, r24
     87c:	91 93       	st	Z+, r25
     87e:	3f 01       	movw	r6, r30
     880:	e8 15       	cp	r30, r8
     882:	f9 05       	cpc	r31, r9
     884:	e1 f6       	brne	.-72     	; 0x83e <MS5611_read_PROM+0x70>
     886:	df 91       	pop	r29
     888:	cf 91       	pop	r28
     88a:	0f 91       	pop	r16
     88c:	ff 90       	pop	r15
     88e:	ef 90       	pop	r14
     890:	df 90       	pop	r13
     892:	cf 90       	pop	r12
     894:	bf 90       	pop	r11
     896:	af 90       	pop	r10
     898:	9f 90       	pop	r9
     89a:	8f 90       	pop	r8
     89c:	7f 90       	pop	r7
     89e:	6f 90       	pop	r6
     8a0:	5f 90       	pop	r5
     8a2:	4f 90       	pop	r4
     8a4:	08 95       	ret

000008a6 <read_d_command>:
   
   
   void read_d_command (unsigned char d_reg)
   {
     8a6:	0f 93       	push	r16
     8a8:	cf 93       	push	r28
     8aa:	df 93       	push	r29
     8ac:	1f 92       	push	r1
     8ae:	cd b7       	in	r28, 0x3d	; 61
     8b0:	de b7       	in	r29, 0x3e	; 62
     8b2:	89 83       	std	Y+1, r24	; 0x01
 		TWI_MasterWriteRead(&twiMaster,MS5607_ADD,&d_reg,1,0);
     8b4:	00 e0       	ldi	r16, 0x00	; 0
     8b6:	21 e0       	ldi	r18, 0x01	; 1
     8b8:	ae 01       	movw	r20, r28
     8ba:	4f 5f       	subi	r20, 0xFF	; 255
     8bc:	5f 4f       	sbci	r21, 0xFF	; 255
     8be:	67 e7       	ldi	r22, 0x77	; 119
     8c0:	84 e8       	ldi	r24, 0x84	; 132
     8c2:	90 e2       	ldi	r25, 0x20	; 32
     8c4:	9f d1       	rcall	.+830    	; 0xc04 <TWI_MasterWriteRead>
 		while (twiMaster.status != TWIM_STATUS_READY) {
     8c6:	eb e9       	ldi	r30, 0x9B	; 155
     8c8:	f0 e2       	ldi	r31, 0x20	; 32
     8ca:	80 81       	ld	r24, Z
     8cc:	81 11       	cpse	r24, r1
     8ce:	fd cf       	rjmp	.-6      	; 0x8ca <read_d_command+0x24>
 			/* Wait until transaction is complete. */
 		}   
   }
     8d0:	0f 90       	pop	r0
     8d2:	df 91       	pop	r29
     8d4:	cf 91       	pop	r28
     8d6:	0f 91       	pop	r16
     8d8:	08 95       	ret

000008da <ADC_read_command>:
   
   
   void ADC_read_command (unsigned char adc_reg, uint8_t i)
   {
     8da:	0f 93       	push	r16
     8dc:	1f 93       	push	r17
     8de:	cf 93       	push	r28
     8e0:	df 93       	push	r29
     8e2:	1f 92       	push	r1
     8e4:	cd b7       	in	r28, 0x3d	; 61
     8e6:	de b7       	in	r29, 0x3e	; 62
     8e8:	89 83       	std	Y+1, r24	; 0x01
     8ea:	16 2f       	mov	r17, r22
		TWI_MasterWriteRead(&twiMaster,MS5607_ADD,&adc_reg,1,3);
     8ec:	03 e0       	ldi	r16, 0x03	; 3
     8ee:	21 e0       	ldi	r18, 0x01	; 1
     8f0:	ae 01       	movw	r20, r28
     8f2:	4f 5f       	subi	r20, 0xFF	; 255
     8f4:	5f 4f       	sbci	r21, 0xFF	; 255
     8f6:	67 e7       	ldi	r22, 0x77	; 119
     8f8:	84 e8       	ldi	r24, 0x84	; 132
     8fa:	90 e2       	ldi	r25, 0x20	; 32
     8fc:	83 d1       	rcall	.+774    	; 0xc04 <TWI_MasterWriteRead>
		while (twiMaster.status != TWIM_STATUS_READY) {
     8fe:	eb e9       	ldi	r30, 0x9B	; 155
     900:	f0 e2       	ldi	r31, 0x20	; 32
     902:	80 81       	ld	r24, Z
     904:	81 11       	cpse	r24, r1
     906:	fd cf       	rjmp	.-6      	; 0x902 <ADC_read_command+0x28>
			/* Wait until transaction is complete. */
		}
		/*MS5611.read_d=MS5611.read_d+16;*/
		MS5611.d[0]=twiMaster.readData[0];
     908:	80 91 8f 20 	lds	r24, 0x208F
     90c:	80 93 58 20 	sts	0x2058, r24
		MS5611.d[1]=twiMaster.readData[1];
     910:	30 91 90 20 	lds	r19, 0x2090
     914:	30 93 59 20 	sts	0x2059, r19
		MS5611.d[2]=twiMaster.readData[2];
     918:	20 91 91 20 	lds	r18, 0x2091
     91c:	20 93 5a 20 	sts	0x205A, r18
		   		 
		MS5611.m[i]=(unsigned long int)MS5611.d[2]+(unsigned long int)MS5611.d[1]*256+(unsigned long int)MS5611.d[0]*65536;   
     920:	e1 2f       	mov	r30, r17
     922:	f0 e0       	ldi	r31, 0x00	; 0
     924:	ee 0f       	add	r30, r30
     926:	ff 1f       	adc	r31, r31
     928:	ee 0f       	add	r30, r30
     92a:	ff 1f       	adc	r31, r31
     92c:	ea 5a       	subi	r30, 0xAA	; 170
     92e:	ff 4d       	sbci	r31, 0xDF	; 223
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	a0 e0       	ldi	r26, 0x00	; 0
     934:	b0 e0       	ldi	r27, 0x00	; 0
     936:	ba 2f       	mov	r27, r26
     938:	a9 2f       	mov	r26, r25
     93a:	98 2f       	mov	r25, r24
     93c:	88 27       	eor	r24, r24
     93e:	83 0f       	add	r24, r19
     940:	91 1d       	adc	r25, r1
     942:	a1 1d       	adc	r26, r1
     944:	b1 1d       	adc	r27, r1
     946:	ba 2f       	mov	r27, r26
     948:	a9 2f       	mov	r26, r25
     94a:	98 2f       	mov	r25, r24
     94c:	88 27       	eor	r24, r24
     94e:	82 0f       	add	r24, r18
     950:	91 1d       	adc	r25, r1
     952:	a1 1d       	adc	r26, r1
     954:	b1 1d       	adc	r27, r1
     956:	85 8b       	std	Z+21, r24	; 0x15
     958:	96 8b       	std	Z+22, r25	; 0x16
     95a:	a7 8b       	std	Z+23, r26	; 0x17
     95c:	b0 8f       	std	Z+24, r27	; 0x18
     95e:	0f 90       	pop	r0
     960:	df 91       	pop	r29
     962:	cf 91       	pop	r28
     964:	1f 91       	pop	r17
     966:	0f 91       	pop	r16
     968:	08 95       	ret

0000096a <MS5611_measure>:

long int pressure;


void MS5611_measure(void)
{
     96a:	af 92       	push	r10
     96c:	bf 92       	push	r11
     96e:	cf 92       	push	r12
     970:	df 92       	push	r13
     972:	ef 92       	push	r14
     974:	ff 92       	push	r15
     976:	0f 93       	push	r16
     978:	1f 93       	push	r17
     97a:	cf 93       	push	r28
     97c:	df 93       	push	r29

  	switch (MS5611.count)
     97e:	80 91 7f 20 	lds	r24, 0x207F
     982:	82 30       	cpi	r24, 0x02	; 2
     984:	69 f0       	breq	.+26     	; 0x9a0 <MS5611_measure+0x36>
     986:	83 30       	cpi	r24, 0x03	; 3
     988:	d9 f0       	breq	.+54     	; 0x9c0 <MS5611_measure+0x56>
     98a:	81 11       	cpse	r24, r1
     98c:	56 c0       	rjmp	.+172    	; 0xa3a <MS5611_measure+0xd0>
  	{
  		case	0	:	{
  							//MS5611_read_PROM();  bordamesh avale main
  							read_d_command(MS5611.read_d);  
     98e:	80 91 5d 20 	lds	r24, 0x205D
     992:	89 df       	rcall	.-238    	; 0x8a6 <read_d_command>
  							MS5611.count++;
     994:	ef e7       	ldi	r30, 0x7F	; 127
     996:	f0 e2       	ldi	r31, 0x20	; 32
     998:	80 81       	ld	r24, Z
     99a:	8f 5f       	subi	r24, 0xFF	; 255
     99c:	80 83       	st	Z, r24
							break;}
     99e:	50 c0       	rjmp	.+160    	; 0xa40 <MS5611_measure+0xd6>
  		case	2	:	{
							ADC_read_command(MS5611.ADC_read,0);
     9a0:	60 e0       	ldi	r22, 0x00	; 0
     9a2:	80 91 5e 20 	lds	r24, 0x205E
     9a6:	99 df       	rcall	.-206    	; 0x8da <ADC_read_command>
							MS5611.read_d=MS5611.read_d+16;
     9a8:	ed e5       	ldi	r30, 0x5D	; 93
     9aa:	f0 e2       	ldi	r31, 0x20	; 32
     9ac:	80 81       	ld	r24, Z
     9ae:	80 5f       	subi	r24, 0xF0	; 240
     9b0:	80 83       	st	Z, r24
							read_d_command(MS5611.read_d); 
     9b2:	79 df       	rcall	.-270    	; 0x8a6 <read_d_command>
							MS5611.count++;
     9b4:	ef e7       	ldi	r30, 0x7F	; 127
     9b6:	f0 e2       	ldi	r31, 0x20	; 32
     9b8:	80 81       	ld	r24, Z
     9ba:	8f 5f       	subi	r24, 0xFF	; 255
     9bc:	80 83       	st	Z, r24
							break;}
     9be:	40 c0       	rjmp	.+128    	; 0xa40 <MS5611_measure+0xd6>
 		case	3	:	{	
							MS5611.read_d=0x48;
     9c0:	cd e5       	ldi	r28, 0x5D	; 93
     9c2:	d0 e2       	ldi	r29, 0x20	; 32
     9c4:	88 e4       	ldi	r24, 0x48	; 72
     9c6:	88 83       	st	Y, r24
							ADC_read_command(MS5611.ADC_read,1);
     9c8:	61 e0       	ldi	r22, 0x01	; 1
     9ca:	80 91 5e 20 	lds	r24, 0x205E
     9ce:	85 df       	rcall	.-246    	; 0x8da <ADC_read_command>
							MS5611_calculate(MS5611.n[0],MS5611.n[1],MS5611.n[2],MS5611.n[3],MS5611.n[4],MS5611.n[5],MS5611.m[0],MS5611.m[1]);
     9d0:	a0 90 6b 20 	lds	r10, 0x206B
     9d4:	b0 90 6c 20 	lds	r11, 0x206C
     9d8:	c0 90 6d 20 	lds	r12, 0x206D
     9dc:	d0 90 6e 20 	lds	r13, 0x206E
     9e0:	e0 90 69 20 	lds	r14, 0x2069
     9e4:	f0 90 6a 20 	lds	r15, 0x206A
     9e8:	00 91 67 20 	lds	r16, 0x2067
     9ec:	10 91 68 20 	lds	r17, 0x2068
     9f0:	20 91 65 20 	lds	r18, 0x2065
     9f4:	30 91 66 20 	lds	r19, 0x2066
     9f8:	40 91 63 20 	lds	r20, 0x2063
     9fc:	50 91 64 20 	lds	r21, 0x2064
     a00:	60 91 61 20 	lds	r22, 0x2061
     a04:	70 91 62 20 	lds	r23, 0x2062
     a08:	ef e6       	ldi	r30, 0x6F	; 111
     a0a:	f0 e2       	ldi	r31, 0x20	; 32
     a0c:	83 81       	ldd	r24, Z+3	; 0x03
     a0e:	8f 93       	push	r24
     a10:	82 81       	ldd	r24, Z+2	; 0x02
     a12:	8f 93       	push	r24
     a14:	81 81       	ldd	r24, Z+1	; 0x01
     a16:	8f 93       	push	r24
     a18:	80 81       	ld	r24, Z
     a1a:	8f 93       	push	r24
     a1c:	80 91 5f 20 	lds	r24, 0x205F
     a20:	90 91 60 20 	lds	r25, 0x2060
     a24:	51 dc       	rcall	.-1886   	; 0x2c8 <MS5611_calculate>
							read_d_command(MS5611.read_d);
     a26:	88 81       	ld	r24, Y
     a28:	3e df       	rcall	.-388    	; 0x8a6 <read_d_command>
							MS5611.count=1;
     a2a:	81 e0       	ldi	r24, 0x01	; 1
     a2c:	80 93 7f 20 	sts	0x207F, r24
							break;}
     a30:	0f 90       	pop	r0
     a32:	0f 90       	pop	r0
     a34:	0f 90       	pop	r0
     a36:	0f 90       	pop	r0
     a38:	03 c0       	rjmp	.+6      	; 0xa40 <MS5611_measure+0xd6>
 		
 		default		:	{	
 							MS5611.count++;
     a3a:	8f 5f       	subi	r24, 0xFF	; 255
     a3c:	80 93 7f 20 	sts	0x207F, r24
  	}
	
// 	MS5611_read_PROM();
// 	MS5611_D_read();
// 	MS5611_calculate(MS5611.n[0],MS5611.n[1],MS5611.n[2],MS5611.n[3],MS5611.n[4],MS5611.n[5],MS5611.m[0],MS5611.m[1]);
}
     a40:	df 91       	pop	r29
     a42:	cf 91       	pop	r28
     a44:	1f 91       	pop	r17
     a46:	0f 91       	pop	r16
     a48:	ff 90       	pop	r15
     a4a:	ef 90       	pop	r14
     a4c:	df 90       	pop	r13
     a4e:	cf 90       	pop	r12
     a50:	bf 90       	pop	r11
     a52:	af 90       	pop	r10
     a54:	08 95       	ret

00000a56 <UART_SEND>:



char buffer[100];
void UART_SEND(int l)
{
     a56:	0f 93       	push	r16
     a58:	1f 93       	push	r17
     a5a:	cf 93       	push	r28
     a5c:	df 93       	push	r29
	int i;
	for(i=0;i<l;i++)
     a5e:	18 16       	cp	r1, r24
     a60:	19 06       	cpc	r1, r25
     a62:	64 f4       	brge	.+24     	; 0xa7c <UART_SEND+0x26>
     a64:	cd e9       	ldi	r28, 0x9D	; 157
     a66:	d0 e2       	ldi	r29, 0x20	; 32
     a68:	8c 01       	movw	r16, r24
     a6a:	03 56       	subi	r16, 0x63	; 99
     a6c:	1f 4d       	sbci	r17, 0xDF	; 223
	usart_putchar(&USARTD0,buffer[i]);
     a6e:	69 91       	ld	r22, Y+
     a70:	80 ea       	ldi	r24, 0xA0	; 160
     a72:	99 e0       	ldi	r25, 0x09	; 9
     a74:	e7 d5       	rcall	.+3022   	; 0x1644 <usart_putchar>

char buffer[100];
void UART_SEND(int l)
{
	int i;
	for(i=0;i<l;i++)
     a76:	c0 17       	cp	r28, r16
     a78:	d1 07       	cpc	r29, r17
     a7a:	c9 f7       	brne	.-14     	; 0xa6e <UART_SEND+0x18>
	usart_putchar(&USARTD0,buffer[i]);
	
}
     a7c:	df 91       	pop	r29
     a7e:	cf 91       	pop	r28
     a80:	1f 91       	pop	r17
     a82:	0f 91       	pop	r16
     a84:	08 95       	ret

00000a86 <En_RC32M>:


void En_RC32M(void)
{
	// Start RC32M OSC
	OSC_CTRL |= OSC_RC32MEN_bm;
     a86:	e0 e5       	ldi	r30, 0x50	; 80
     a88:	f0 e0       	ldi	r31, 0x00	; 0
     a8a:	80 81       	ld	r24, Z
     a8c:	82 60       	ori	r24, 0x02	; 2
     a8e:	80 83       	st	Z, r24
	while(!(OSC_STATUS & OSC_RC32MRDY_bm));
     a90:	e1 e5       	ldi	r30, 0x51	; 81
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	80 81       	ld	r24, Z
     a96:	81 ff       	sbrs	r24, 1
     a98:	fd cf       	rjmp	.-6      	; 0xa94 <En_RC32M+0xe>

	// Select the system clock source: 32 MHz Internal RC Osc.
	CCP = CCP_IOREG_gc;
     a9a:	88 ed       	ldi	r24, 0xD8	; 216
     a9c:	84 bf       	out	0x34, r24	; 52
	CLK_CTRL = CLK_SCLKSEL_RC32M_gc;
     a9e:	81 e0       	ldi	r24, 0x01	; 1
     aa0:	80 93 40 00 	sts	0x0040, r24

	// Disable the unused oscillators: 2 MHz, internal 32 kHz, external clock/crystal oscillator, PLL
	OSC_CTRL &= ~(OSC_RC2MEN_bm | OSC_RC32KEN_bm | OSC_XOSCEN_bm | OSC_PLLEN_bm);
     aa4:	e0 e5       	ldi	r30, 0x50	; 80
     aa6:	f0 e0       	ldi	r31, 0x00	; 0
     aa8:	80 81       	ld	r24, Z
     aaa:	82 7e       	andi	r24, 0xE2	; 226
     aac:	80 83       	st	Z, r24
     aae:	08 95       	ret

00000ab0 <PORT_init>:
};

void PORT_init(void)
{
     ab0:	cf 93       	push	r28
     ab2:	df 93       	push	r29
	//LED
	PORTE_DIRSET = LED_Blue_PIN_bm;  
     ab4:	e1 e8       	ldi	r30, 0x81	; 129
     ab6:	f6 e0       	ldi	r31, 0x06	; 6
     ab8:	88 e0       	ldi	r24, 0x08	; 8
     aba:	80 83       	st	Z, r24
	PORTE_OUTCLR = LED_Blue_PIN_bm;  
     abc:	80 93 86 06 	sts	0x0686, r24
	
	//TX
	PORTD_DIRSET = PIN3_bm; 
     ac0:	a1 e6       	ldi	r26, 0x61	; 97
     ac2:	b6 e0       	ldi	r27, 0x06	; 6
     ac4:	8c 93       	st	X, r24
	PORTD_OUTSET = PIN3_bm;
     ac6:	80 93 65 06 	sts	0x0665, r24
	
	//SHT11 init
	PORTA.DIR=0x30; 
     aca:	c0 e0       	ldi	r28, 0x00	; 0
     acc:	d6 e0       	ldi	r29, 0x06	; 6
     ace:	80 e3       	ldi	r24, 0x30	; 48
     ad0:	88 83       	st	Y, r24
	PORTA.OUT=0x00;
     ad2:	1c 82       	std	Y+4, r1	; 0x04
	
	// wireless module & programmer data
	PORTD_DIRSET = NRF24L01_L_CS_LINE | NRF24L01_L_MOSI_LINE | NRF24L01_L_SCK_LINE; 
     ad4:	80 eb       	ldi	r24, 0xB0	; 176
     ad6:	8c 93       	st	X, r24
	PORTE_DIRSET = NRF24L01_L_CE_LINE;
     ad8:	82 e0       	ldi	r24, 0x02	; 2
     ada:	80 83       	st	Z, r24
	
	//IRQ interrupt (INT0)	
	PORTE_PIN0CTRL |= PORT_ISC_FALLING_gc; 
     adc:	e0 e9       	ldi	r30, 0x90	; 144
     ade:	f6 e0       	ldi	r31, 0x06	; 6
     ae0:	80 81       	ld	r24, Z
     ae2:	82 60       	ori	r24, 0x02	; 2
     ae4:	80 83       	st	Z, r24
	PORTE_INTCTRL |= PORT_INT0LVL_LO_gc;
     ae6:	e9 e8       	ldi	r30, 0x89	; 137
     ae8:	f6 e0       	ldi	r31, 0x06	; 6
     aea:	80 81       	ld	r24, Z
     aec:	81 60       	ori	r24, 0x01	; 1
     aee:	80 83       	st	Z, r24
	PORTE_INT0MASK |= PIN0_bm;
     af0:	ea e8       	ldi	r30, 0x8A	; 138
     af2:	f6 e0       	ldi	r31, 0x06	; 6
     af4:	80 81       	ld	r24, Z
     af6:	81 60       	ori	r24, 0x01	; 1
     af8:	80 83       	st	Z, r24
};
     afa:	df 91       	pop	r29
     afc:	cf 91       	pop	r28
     afe:	08 95       	ret

00000b00 <USARTD0_init>:

#define USARTD0_conf USARTD0
#define USARTD0_BUADRATE 115200
void USARTD0_init(void)
{
     b00:	0f 93       	push	r16
     b02:	1f 93       	push	r17
     b04:	cf 93       	push	r28
     b06:	df 93       	push	r29
 * - 0x2        : IrDA mode.
 * - 0x3        : Master SPI mode.
 */
static inline void usart_set_mode(USART_t *usart, USART_CMODE_t usartmode)
{
	(usart)->CTRLC = ((usart)->CTRLC & (~USART_CMODE_gm)) | usartmode;
     b08:	c0 ea       	ldi	r28, 0xA0	; 160
     b0a:	d9 e0       	ldi	r29, 0x09	; 9
     b0c:	8d 81       	ldd	r24, Y+5	; 0x05
     b0e:	8f 73       	andi	r24, 0x3F	; 63
     b10:	8d 83       	std	Y+5, r24	; 0x05
 *  \param twoStopBits Enable two stop bit mode. Use bool type.
 */
static inline void usart_format_set(USART_t *usart, USART_CHSIZE_t charSize,
		USART_PMODE_t parityMode, bool twoStopBits)
{
	(usart)->CTRLC = (uint8_t)charSize | parityMode
     b12:	83 e0       	ldi	r24, 0x03	; 3
     b14:	8d 83       	std	Y+5, r24	; 0x05
	usart_set_mode(&USARTD0_conf,USART_CMODE_ASYNCHRONOUS_gc);
	usart_format_set(&USARTD0_conf,USART_CHSIZE_8BIT_gc,USART_PMODE_DISABLED_gc,false);
	//usart_set_rx_interrupt_level(&USARTE0_conf,USART_INT_LVL_MED);
	//usart_set_dre_interrupt_level(&USARTE0_conf,USART_INT_LVL_LO);
	usart_set_baudrate(&USARTD0_conf,USARTD0_BUADRATE,F_CPU);
     b16:	00 e0       	ldi	r16, 0x00	; 0
     b18:	18 e4       	ldi	r17, 0x48	; 72
     b1a:	28 ee       	ldi	r18, 0xE8	; 232
     b1c:	31 e0       	ldi	r19, 0x01	; 1
     b1e:	40 e0       	ldi	r20, 0x00	; 0
     b20:	52 ec       	ldi	r21, 0xC2	; 194
     b22:	61 e0       	ldi	r22, 0x01	; 1
     b24:	70 e0       	ldi	r23, 0x00	; 0
     b26:	80 ea       	ldi	r24, 0xA0	; 160
     b28:	99 e0       	ldi	r25, 0x09	; 9
     b2a:	94 d5       	rcall	.+2856   	; 0x1654 <usart_set_baudrate>
 *
 * \param usart Pointer to the USART module.
 */
static inline void usart_tx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_TXEN_bm;
     b2c:	8c 81       	ldd	r24, Y+4	; 0x04
     b2e:	88 60       	ori	r24, 0x08	; 8
     b30:	8c 83       	std	Y+4, r24	; 0x04
 *
 * \param usart Pointer to the USART module
 */
static inline void usart_rx_enable(USART_t *usart)
{
	(usart)->CTRLB |= USART_RXEN_bm;
     b32:	8c 81       	ldd	r24, Y+4	; 0x04
     b34:	80 61       	ori	r24, 0x10	; 16
     b36:	8c 83       	std	Y+4, r24	; 0x04
	usart_tx_enable(&USARTD0_conf);
	usart_rx_enable(&USARTD0_conf);
}
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	1f 91       	pop	r17
     b3e:	0f 91       	pop	r16
     b40:	08 95       	ret

00000b42 <TimerD0_init>:
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
			(((TC0_t *)tc)->CTRLA & ~TC0_CLKSEL_gm) |
     b42:	e0 e0       	ldi	r30, 0x00	; 0
     b44:	f9 e0       	ldi	r31, 0x09	; 9
     b46:	80 81       	ld	r24, Z
 * \note Configuring the clock also starts the timer
 */
static inline void tc_write_clock_source(volatile void *tc,
		TC_CLKSEL_t TC_CLKSEL_enum)
{
	((TC0_t *)tc)->CTRLA =
     b48:	80 7f       	andi	r24, 0xF0	; 240
     b4a:	84 60       	ori	r24, 0x04	; 4
     b4c:	80 83       	st	Z, r24
 * \param tc Pointer to TC module.
 * \param wgm : waveform generator
 */
static inline void tc_set_wgm(volatile void *tc, enum tc_wg_mode_t wgm)
{
	((TC0_t *)tc)->CTRLB = (((TC0_t *)tc)->CTRLB & ~TC0_WGMODE_gm) | wgm;
     b4e:	81 81       	ldd	r24, Z+1	; 0x01
     b50:	88 7f       	andi	r24, 0xF8	; 248
     b52:	81 83       	std	Z+1, r24	; 0x01
 * \note  Configures OVFINTLVL in INTCTRLA
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
     b54:	86 81       	ldd	r24, Z+6	; 0x06
     b56:	8c 7f       	andi	r24, 0xFC	; 252
     b58:	86 83       	std	Z+6, r24	; 0x06
	((TC0_t *)tc)->INTCTRLA =
			((TC0_t *)tc)->INTCTRLA | (level << TC0_OVFINTLVL_gp);
     b5a:	86 81       	ldd	r24, Z+6	; 0x06
 */
static inline void tc_set_overflow_interrupt_level(volatile void *tc,
		enum TC_INT_LEVEL_t level)
{
	((TC0_t *)tc)->INTCTRLA = ((TC0_t *)tc)->INTCTRLA & ~TC0_OVFINTLVL_gm;
	((TC0_t *)tc)->INTCTRLA =
     b5c:	82 60       	ori	r24, 0x02	; 2
     b5e:	86 83       	std	Z+6, r24	; 0x06
 * \param tc Pointer to TC module.
 * \param per_value Period value : PER
 */
static inline void tc_write_period(volatile void *tc, uint16_t per_value)
{
	((TC0_t *)tc)->PER = per_value;
     b60:	8f e3       	ldi	r24, 0x3F	; 63
     b62:	9c e9       	ldi	r25, 0x9C	; 156
     b64:	86 a3       	std	Z+38, r24	; 0x26
     b66:	97 a3       	std	Z+39, r25	; 0x27
 * \param dir Timer direction :
 */
static inline void tc_set_direction(volatile void *tc, enum tc_dir_t dir)
{
	if (dir == TC_UP) {
		((TC0_t *)tc)->CTRLFCLR |= ~TC0_DIR_bm;
     b68:	80 85       	ldd	r24, Z+8	; 0x08
     b6a:	8e 6f       	ori	r24, 0xFE	; 254
     b6c:	80 87       	std	Z+8, r24	; 0x08
	tc_write_clock_source(&TCD0,TC_CLKSEL_DIV8_gc);
	tc_set_wgm(&TCD0,TC_WG_NORMAL);
	tc_set_overflow_interrupt_level(&TCD0,TC_INT_LVL_MED);
	tc_write_period(&TCD0,TIMERD0_PER);
	tc_set_direction(&TCD0,TC_UP);
	tc_enable(&TCD0);
     b6e:	80 e0       	ldi	r24, 0x00	; 0
     b70:	99 e0       	ldi	r25, 0x09	; 9
     b72:	20 c5       	rjmp	.+2624   	; 0x15b4 <tc_enable>
     b74:	08 95       	ret

00000b76 <SPI_Init>:

}


void SPI_Init(void)
{
     b76:	0f 93       	push	r16
     b78:	1f 93       	push	r17
	spi_xmega_set_baud_div(&NRF24L01_L_SPI,8000000UL,F_CPU);
     b7a:	00 e0       	ldi	r16, 0x00	; 0
     b7c:	18 e4       	ldi	r17, 0x48	; 72
     b7e:	28 ee       	ldi	r18, 0xE8	; 232
     b80:	31 e0       	ldi	r19, 0x01	; 1
     b82:	40 e0       	ldi	r20, 0x00	; 0
     b84:	52 e1       	ldi	r21, 0x12	; 18
     b86:	6a e7       	ldi	r22, 0x7A	; 122
     b88:	70 e0       	ldi	r23, 0x00	; 0
     b8a:	80 ec       	ldi	r24, 0xC0	; 192
     b8c:	99 e0       	ldi	r25, 0x09	; 9
     b8e:	54 db       	rcall	.-2392   	; 0x238 <spi_xmega_set_baud_div>
 *
 * \warning This may cause data loss if used on a slave SPI.
 */
static inline void spi_enable_master_mode(SPI_t *spi)
{
	spi->CTRL |= SPI_MASTER_bm;
     b90:	e0 ec       	ldi	r30, 0xC0	; 192
     b92:	f9 e0       	ldi	r31, 0x09	; 9
     b94:	80 81       	ld	r24, Z
     b96:	80 61       	ori	r24, 0x10	; 16
     b98:	80 83       	st	Z, r24
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_enable(SPI_t *spi)
{
	spi->CTRL |= SPI_ENABLE_bm;
     b9a:	80 81       	ld	r24, Z
     b9c:	80 64       	ori	r24, 0x40	; 64
     b9e:	80 83       	st	Z, r24
	spi_enable_master_mode(&NRF24L01_L_SPI);
	spi_enable(&NRF24L01_L_SPI);
}
     ba0:	1f 91       	pop	r17
     ba2:	0f 91       	pop	r16
     ba4:	08 95       	ret

00000ba6 <set_micro>:
}

void set_micro(void)
{

	En_RC32M();
     ba6:	6f df       	rcall	.-290    	; 0xa86 <En_RC32M>
	PMIC_CTRL |= PMIC_HILVLEN_bm | PMIC_LOLVLEN_bm |PMIC_MEDLVLEN_bm; // fa'al kardane interrupt ha?
     ba8:	e2 ea       	ldi	r30, 0xA2	; 162
     baa:	f0 e0       	ldi	r31, 0x00	; 0
     bac:	80 81       	ld	r24, Z
     bae:	87 60       	ori	r24, 0x07	; 7
     bb0:	80 83       	st	Z, r24
	PORT_init();
     bb2:	7e df       	rcall	.-260    	; 0xab0 <PORT_init>
	USARTD0_init();
     bb4:	a5 df       	rcall	.-182    	; 0xb00 <USARTD0_init>
	TimerD0_init();
     bb6:	c5 df       	rcall	.-118    	; 0xb42 <TimerD0_init>
	SPI_Init();
     bb8:	de df       	rcall	.-68     	; 0xb76 <SPI_Init>
	TWI_MasterInit(&twiMaster,&TWIC,TWI_MASTER_INTLVL_LO_gc,TWI_BAUDSETTING);
     bba:	2b e9       	ldi	r18, 0x9B	; 155
     bbc:	40 e4       	ldi	r20, 0x40	; 64
     bbe:	60 e8       	ldi	r22, 0x80	; 128
     bc0:	74 e0       	ldi	r23, 0x04	; 4
     bc2:	84 e8       	ldi	r24, 0x84	; 132
     bc4:	90 e2       	ldi	r25, 0x20	; 32
     bc6:	0d d0       	rcall	.+26     	; 0xbe2 <TWI_MasterInit>
	TWIC.SLAVE.CTRLA=0;  //slave disabled
     bc8:	e0 e8       	ldi	r30, 0x80	; 128
     bca:	f4 e0       	ldi	r31, 0x04	; 4
     bcc:	10 86       	std	Z+8, r1	; 0x08
	
	sei();
     bce:	78 94       	sei
     bd0:	08 95       	ret

00000bd2 <variable_init>:
}


void variable_init(void)
{
	MS5611.count=0;
     bd2:	10 92 7f 20 	sts	0x207F, r1
	MS5611.read_d=0x48;
     bd6:	88 e4       	ldi	r24, 0x48	; 72
     bd8:	80 93 5d 20 	sts	0x205D, r24
	MS5611.ADC_read=0x00;
     bdc:	10 92 5e 20 	sts	0x205E, r1
     be0:	08 95       	ret

00000be2 <TWI_MasterInit>:
                    uint8_t address,
                    uint8_t bytesToRead)
{
	bool twi_status = TWI_MasterWriteRead(twi, address, 0, 0, bytesToRead);
	return twi_status;
}
     be2:	fc 01       	movw	r30, r24
     be4:	60 83       	st	Z, r22
     be6:	71 83       	std	Z+1, r23	; 0x01
     be8:	48 63       	ori	r20, 0x38	; 56
     bea:	db 01       	movw	r26, r22
     bec:	11 96       	adiw	r26, 0x01	; 1
     bee:	4c 93       	st	X, r20
     bf0:	a0 81       	ld	r26, Z
     bf2:	b1 81       	ldd	r27, Z+1	; 0x01
     bf4:	15 96       	adiw	r26, 0x05	; 5
     bf6:	2c 93       	st	X, r18
     bf8:	01 90       	ld	r0, Z+
     bfa:	f0 81       	ld	r31, Z
     bfc:	e0 2d       	mov	r30, r0
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	84 83       	std	Z+4, r24	; 0x04
     c02:	08 95       	ret

00000c04 <TWI_MasterWriteRead>:
     c04:	0f 93       	push	r16
     c06:	cf 93       	push	r28
     c08:	df 93       	push	r29
     c0a:	fc 01       	movw	r30, r24
     c0c:	29 30       	cpi	r18, 0x09	; 9
     c0e:	98 f5       	brcc	.+102    	; 0xc76 <TWI_MasterWriteRead+0x72>
     c10:	09 30       	cpi	r16, 0x09	; 9
     c12:	98 f5       	brcc	.+102    	; 0xc7a <TWI_MasterWriteRead+0x76>
     c14:	87 89       	ldd	r24, Z+23	; 0x17
     c16:	81 11       	cpse	r24, r1
     c18:	32 c0       	rjmp	.+100    	; 0xc7e <TWI_MasterWriteRead+0x7a>
     c1a:	81 e0       	ldi	r24, 0x01	; 1
     c1c:	87 8b       	std	Z+23, r24	; 0x17
     c1e:	10 8e       	std	Z+24, r1	; 0x18
     c20:	66 0f       	add	r22, r22
     c22:	62 83       	std	Z+2, r22	; 0x02
     c24:	22 23       	and	r18, r18
     c26:	69 f0       	breq	.+26     	; 0xc42 <TWI_MasterWriteRead+0x3e>
     c28:	a4 2f       	mov	r26, r20
     c2a:	b5 2f       	mov	r27, r21
     c2c:	40 e0       	ldi	r20, 0x00	; 0
     c2e:	50 e0       	ldi	r21, 0x00	; 0
     c30:	8d 91       	ld	r24, X+
     c32:	ef 01       	movw	r28, r30
     c34:	c4 0f       	add	r28, r20
     c36:	d5 1f       	adc	r29, r21
     c38:	8b 83       	std	Y+3, r24	; 0x03
     c3a:	4f 5f       	subi	r20, 0xFF	; 255
     c3c:	5f 4f       	sbci	r21, 0xFF	; 255
     c3e:	42 17       	cp	r20, r18
     c40:	b8 f3       	brcs	.-18     	; 0xc30 <TWI_MasterWriteRead+0x2c>
     c42:	23 8b       	std	Z+19, r18	; 0x13
     c44:	04 8b       	std	Z+20, r16	; 0x14
     c46:	15 8a       	std	Z+21, r1	; 0x15
     c48:	16 8a       	std	Z+22, r1	; 0x16
     c4a:	83 89       	ldd	r24, Z+19	; 0x13
     c4c:	88 23       	and	r24, r24
     c4e:	41 f0       	breq	.+16     	; 0xc60 <TWI_MasterWriteRead+0x5c>
     c50:	82 81       	ldd	r24, Z+2	; 0x02
     c52:	8e 7f       	andi	r24, 0xFE	; 254
     c54:	01 90       	ld	r0, Z+
     c56:	f0 81       	ld	r31, Z
     c58:	e0 2d       	mov	r30, r0
     c5a:	86 83       	std	Z+6, r24	; 0x06
     c5c:	81 e0       	ldi	r24, 0x01	; 1
     c5e:	12 c0       	rjmp	.+36     	; 0xc84 <TWI_MasterWriteRead+0x80>
     c60:	84 89       	ldd	r24, Z+20	; 0x14
     c62:	88 23       	and	r24, r24
     c64:	71 f0       	breq	.+28     	; 0xc82 <TWI_MasterWriteRead+0x7e>
     c66:	82 81       	ldd	r24, Z+2	; 0x02
     c68:	81 60       	ori	r24, 0x01	; 1
     c6a:	01 90       	ld	r0, Z+
     c6c:	f0 81       	ld	r31, Z
     c6e:	e0 2d       	mov	r30, r0
     c70:	86 83       	std	Z+6, r24	; 0x06
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	07 c0       	rjmp	.+14     	; 0xc84 <TWI_MasterWriteRead+0x80>
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	05 c0       	rjmp	.+10     	; 0xc84 <TWI_MasterWriteRead+0x80>
     c7a:	80 e0       	ldi	r24, 0x00	; 0
     c7c:	03 c0       	rjmp	.+6      	; 0xc84 <TWI_MasterWriteRead+0x80>
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	01 c0       	rjmp	.+2      	; 0xc84 <TWI_MasterWriteRead+0x80>
     c82:	81 e0       	ldi	r24, 0x01	; 1
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	0f 91       	pop	r16
     c8a:	08 95       	ret

00000c8c <TWI_MasterArbitrationLostBusErrorHandler>:
 *  Handles TWI responses to lost arbitration and bus error.
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterArbitrationLostBusErrorHandler(TWI_Master_t *twi)
{
     c8c:	fc 01       	movw	r30, r24
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
     c8e:	a0 81       	ld	r26, Z
     c90:	b1 81       	ldd	r27, Z+1	; 0x01
     c92:	14 96       	adiw	r26, 0x04	; 4
     c94:	8c 91       	ld	r24, X
     c96:	14 97       	sbiw	r26, 0x04	; 4

	/* If bus error. */
	if (currentStatus & TWI_MASTER_BUSERR_bm) 
     c98:	82 ff       	sbrs	r24, 2
     c9a:	03 c0       	rjmp	.+6      	; 0xca2 <TWI_MasterArbitrationLostBusErrorHandler+0x16>
	{
		twi->result = TWIM_RESULT_BUS_ERROR;
     c9c:	94 e0       	ldi	r25, 0x04	; 4
     c9e:	90 8f       	std	Z+24, r25	; 0x18
     ca0:	02 c0       	rjmp	.+4      	; 0xca6 <TWI_MasterArbitrationLostBusErrorHandler+0x1a>
	}
	/* If arbitration lost. */
	else {
		twi->result = TWIM_RESULT_ARBITRATION_LOST;
     ca2:	93 e0       	ldi	r25, 0x03	; 3
     ca4:	90 8f       	std	Z+24, r25	; 0x18
	}

	/* Clear interrupt flag. */
	twi->interface->MASTER.STATUS = currentStatus | TWI_MASTER_ARBLOST_bm;
     ca6:	88 60       	ori	r24, 0x08	; 8
     ca8:	14 96       	adiw	r26, 0x04	; 4
     caa:	8c 93       	st	X, r24

	twi->status = TWIM_STATUS_READY;
     cac:	17 8a       	std	Z+23, r1	; 0x17
     cae:	08 95       	ret

00000cb0 <TWI_MasterWriteHandler>:
 *  Handles TWI transactions (master write) and responses to (N)ACK.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterWriteHandler(TWI_Master_t *twi)
{
     cb0:	cf 93       	push	r28
     cb2:	df 93       	push	r29
     cb4:	fc 01       	movw	r30, r24
	/* Local variables used in if tests to avoid compiler warning. */
	uint8_t bytesToWrite  = twi->bytesToWrite;
     cb6:	93 89       	ldd	r25, Z+19	; 0x13
	uint8_t bytesToRead   = twi->bytesToRead;
     cb8:	24 89       	ldd	r18, Z+20	; 0x14

	/* If NOT acknowledged (NACK) by slave cancel the transaction. */
	if (twi->interface->MASTER.STATUS & TWI_MASTER_RXACK_bm) {
     cba:	a0 81       	ld	r26, Z
     cbc:	b1 81       	ldd	r27, Z+1	; 0x01
     cbe:	14 96       	adiw	r26, 0x04	; 4
     cc0:	8c 91       	ld	r24, X
     cc2:	14 97       	sbiw	r26, 0x04	; 4
     cc4:	84 ff       	sbrs	r24, 4
     cc6:	07 c0       	rjmp	.+14     	; 0xcd6 <TWI_MasterWriteHandler+0x26>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     cc8:	83 e0       	ldi	r24, 0x03	; 3
     cca:	13 96       	adiw	r26, 0x03	; 3
     ccc:	8c 93       	st	X, r24
		twi->result = TWIM_RESULT_NACK_RECEIVED;
     cce:	85 e0       	ldi	r24, 0x05	; 5
     cd0:	80 8f       	std	Z+24, r24	; 0x18
		twi->status = TWIM_STATUS_READY;
     cd2:	17 8a       	std	Z+23, r1	; 0x17
     cd4:	1c c0       	rjmp	.+56     	; 0xd0e <TWI_MasterWriteHandler+0x5e>
	}

	/* If more bytes to write, send data. */
	else if (twi->bytesWritten < bytesToWrite) {
     cd6:	85 89       	ldd	r24, Z+21	; 0x15
     cd8:	89 17       	cp	r24, r25
     cda:	58 f4       	brcc	.+22     	; 0xcf2 <TWI_MasterWriteHandler+0x42>
		uint8_t data = twi->writeData[twi->bytesWritten];
     cdc:	85 89       	ldd	r24, Z+21	; 0x15
     cde:	ef 01       	movw	r28, r30
     ce0:	c8 0f       	add	r28, r24
     ce2:	d1 1d       	adc	r29, r1
     ce4:	8b 81       	ldd	r24, Y+3	; 0x03
		twi->interface->MASTER.DATA = data;
     ce6:	17 96       	adiw	r26, 0x07	; 7
     ce8:	8c 93       	st	X, r24
		++twi->bytesWritten;
     cea:	85 89       	ldd	r24, Z+21	; 0x15
     cec:	8f 5f       	subi	r24, 0xFF	; 255
     cee:	85 8b       	std	Z+21, r24	; 0x15
     cf0:	0e c0       	rjmp	.+28     	; 0xd0e <TWI_MasterWriteHandler+0x5e>
	}

	/* If bytes to read, send repeated START condition + Address +
	 * 'R/_W = 1'
	 */
	else if (twi->bytesRead < bytesToRead) {
     cf2:	86 89       	ldd	r24, Z+22	; 0x16
     cf4:	82 17       	cp	r24, r18
     cf6:	28 f4       	brcc	.+10     	; 0xd02 <TWI_MasterWriteHandler+0x52>
		uint8_t readAddress = twi->address | 0x01;
     cf8:	82 81       	ldd	r24, Z+2	; 0x02
     cfa:	81 60       	ori	r24, 0x01	; 1
		twi->interface->MASTER.ADDR = readAddress;
     cfc:	16 96       	adiw	r26, 0x06	; 6
     cfe:	8c 93       	st	X, r24
     d00:	06 c0       	rjmp	.+12     	; 0xd0e <TWI_MasterWriteHandler+0x5e>
	}

	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     d02:	83 e0       	ldi	r24, 0x03	; 3
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
     d08:	81 e0       	ldi	r24, 0x01	; 1
     d0a:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
     d0c:	17 8a       	std	Z+23, r1	; 0x17
	/* If transaction finished, send STOP condition and set RESULT OK. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_OK);
	}
}
     d0e:	df 91       	pop	r29
     d10:	cf 91       	pop	r28
     d12:	08 95       	ret

00000d14 <TWI_MasterReadHandler>:
 *  reading bytes from the TWI slave.
 *
 *  \param twi The TWI_Master_t struct instance.
 */
void TWI_MasterReadHandler(TWI_Master_t *twi)
{
     d14:	fc 01       	movw	r30, r24
	/* Fetch data if bytes to be read. */
	if (twi->bytesRead < TWIM_READ_BUFFER_SIZE) {
     d16:	86 89       	ldd	r24, Z+22	; 0x16
     d18:	88 30       	cpi	r24, 0x08	; 8
     d1a:	70 f4       	brcc	.+28     	; 0xd38 <TWI_MasterReadHandler+0x24>
		uint8_t data = twi->interface->MASTER.DATA;
     d1c:	a0 81       	ld	r26, Z
     d1e:	b1 81       	ldd	r27, Z+1	; 0x01
     d20:	17 96       	adiw	r26, 0x07	; 7
     d22:	8c 91       	ld	r24, X
		twi->readData[twi->bytesRead] = data;
     d24:	96 89       	ldd	r25, Z+22	; 0x16
     d26:	df 01       	movw	r26, r30
     d28:	a9 0f       	add	r26, r25
     d2a:	b1 1d       	adc	r27, r1
     d2c:	1b 96       	adiw	r26, 0x0b	; 11
     d2e:	8c 93       	st	X, r24
		twi->bytesRead++;
     d30:	86 89       	ldd	r24, Z+22	; 0x16
     d32:	8f 5f       	subi	r24, 0xFF	; 255
     d34:	86 8b       	std	Z+22, r24	; 0x16
     d36:	08 c0       	rjmp	.+16     	; 0xd48 <TWI_MasterReadHandler+0x34>
	}

	/* If buffer overflow, issue STOP and BUFFER_OVERFLOW condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
     d38:	a0 81       	ld	r26, Z
     d3a:	b1 81       	ldd	r27, Z+1	; 0x01
     d3c:	83 e0       	ldi	r24, 0x03	; 3
     d3e:	13 96       	adiw	r26, 0x03	; 3
     d40:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
     d42:	82 e0       	ldi	r24, 0x02	; 2
     d44:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
     d46:	17 8a       	std	Z+23, r1	; 0x17
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_STOP_gc;
		TWI_MasterTransactionFinished(twi, TWIM_RESULT_BUFFER_OVERFLOW);
	}

	/* Local variable used in if test to avoid compiler warning. */
	uint8_t bytesToRead = twi->bytesToRead;
     d48:	94 89       	ldd	r25, Z+20	; 0x14

	/* If more bytes to read, issue ACK and start a byte read. */
	if (twi->bytesRead < bytesToRead) {
     d4a:	86 89       	ldd	r24, Z+22	; 0x16
     d4c:	89 17       	cp	r24, r25
     d4e:	30 f4       	brcc	.+12     	; 0xd5c <TWI_MasterReadHandler+0x48>
		twi->interface->MASTER.CTRLC = TWI_MASTER_CMD_RECVTRANS_gc;
     d50:	01 90       	ld	r0, Z+
     d52:	f0 81       	ld	r31, Z
     d54:	e0 2d       	mov	r30, r0
     d56:	82 e0       	ldi	r24, 0x02	; 2
     d58:	83 83       	std	Z+3, r24	; 0x03
     d5a:	08 95       	ret
	}

	/* If transaction finished, issue NACK and STOP condition. */
	else {
		twi->interface->MASTER.CTRLC = TWI_MASTER_ACKACT_bm |
     d5c:	a0 81       	ld	r26, Z
     d5e:	b1 81       	ldd	r27, Z+1	; 0x01
     d60:	87 e0       	ldi	r24, 0x07	; 7
     d62:	13 96       	adiw	r26, 0x03	; 3
     d64:	8c 93       	st	X, r24
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	80 8f       	std	Z+24, r24	; 0x18
	twi->status = TWIM_STATUS_READY;
     d6a:	17 8a       	std	Z+23, r1	; 0x17
     d6c:	08 95       	ret

00000d6e <TWI_MasterInterruptHandler>:
 *
 *  \param twi  The TWI_Master_t struct instance.
 */
void TWI_MasterInterruptHandler(TWI_Master_t *twi)
{
	uint8_t currentStatus = twi->interface->MASTER.STATUS;
     d6e:	dc 01       	movw	r26, r24
     d70:	ed 91       	ld	r30, X+
     d72:	fc 91       	ld	r31, X
     d74:	24 81       	ldd	r18, Z+4	; 0x04
     d76:	32 2f       	mov	r19, r18
     d78:	3c 70       	andi	r19, 0x0C	; 12

	/* If arbitration lost or bus error. */
	if ((currentStatus & TWI_MASTER_ARBLOST_bm) ||
     d7a:	11 f0       	breq	.+4      	; 0xd80 <TWI_MasterInterruptHandler+0x12>
	    (currentStatus & TWI_MASTER_BUSERR_bm)) {

		TWI_MasterArbitrationLostBusErrorHandler(twi);
     d7c:	87 cf       	rjmp	.-242    	; 0xc8c <TWI_MasterArbitrationLostBusErrorHandler>
     d7e:	08 95       	ret
	}

	/* If master write interrupt. */
	else if (currentStatus & TWI_MASTER_WIF_bm) {
     d80:	26 ff       	sbrs	r18, 6
     d82:	02 c0       	rjmp	.+4      	; 0xd88 <TWI_MasterInterruptHandler+0x1a>
		TWI_MasterWriteHandler(twi);
     d84:	95 cf       	rjmp	.-214    	; 0xcb0 <TWI_MasterWriteHandler>
     d86:	08 95       	ret
	}

	/* If master read interrupt. */
	else if (currentStatus & TWI_MASTER_RIF_bm) {
     d88:	22 23       	and	r18, r18
     d8a:	14 f4       	brge	.+4      	; 0xd90 <TWI_MasterInterruptHandler+0x22>
		TWI_MasterReadHandler(twi);
     d8c:	c3 cf       	rjmp	.-122    	; 0xd14 <TWI_MasterReadHandler>
     d8e:	08 95       	ret
 *  \param twi     The TWI_Master_t struct instance.
 *  \param result  The result of the operation.
 */
void TWI_MasterTransactionFinished(TWI_Master_t *twi, uint8_t result)
{
	twi->result = result;
     d90:	26 e0       	ldi	r18, 0x06	; 6
     d92:	fc 01       	movw	r30, r24
     d94:	20 8f       	std	Z+24, r18	; 0x18
	twi->status = TWIM_STATUS_READY;
     d96:	17 8a       	std	Z+23, r1	; 0x17
     d98:	08 95       	ret

00000d9a <sysclk_enable_module>:

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
     d9a:	9f b7       	in	r25, 0x3f	; 63
	cpu_irq_disable();
     d9c:	f8 94       	cli

void sysclk_enable_module(enum sysclk_port_id port, uint8_t id)
{
	irqflags_t flags = cpu_irq_save();

	*((uint8_t *)&PR.PRGEN + port) &= ~id;
     d9e:	e8 2f       	mov	r30, r24
     da0:	f0 e0       	ldi	r31, 0x00	; 0
     da2:	e0 59       	subi	r30, 0x90	; 144
     da4:	ff 4f       	sbci	r31, 0xFF	; 255
     da6:	60 95       	com	r22
     da8:	80 81       	ld	r24, Z
     daa:	68 23       	and	r22, r24
     dac:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
     dae:	9f bf       	out	0x3f, r25	; 63
     db0:	08 95       	ret

00000db2 <__vector_14>:
 *
 * This function will handle interrupt on Timer Counter CO overflow and
 * call the callback function.
 */
ISR(TCC0_OVF_vect)
{
     db2:	1f 92       	push	r1
     db4:	0f 92       	push	r0
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	0f 92       	push	r0
     dba:	11 24       	eor	r1, r1
     dbc:	2f 93       	push	r18
     dbe:	3f 93       	push	r19
     dc0:	4f 93       	push	r20
     dc2:	5f 93       	push	r21
     dc4:	6f 93       	push	r22
     dc6:	7f 93       	push	r23
     dc8:	8f 93       	push	r24
     dca:	9f 93       	push	r25
     dcc:	af 93       	push	r26
     dce:	bf 93       	push	r27
     dd0:	ef 93       	push	r30
     dd2:	ff 93       	push	r31
	if (tc_tcc0_ovf_callback) {
     dd4:	e0 91 54 20 	lds	r30, 0x2054
     dd8:	f0 91 55 20 	lds	r31, 0x2055
     ddc:	30 97       	sbiw	r30, 0x00	; 0
     dde:	09 f0       	breq	.+2      	; 0xde2 <__vector_14+0x30>
		tc_tcc0_ovf_callback();
     de0:	09 95       	icall
	}
}
     de2:	ff 91       	pop	r31
     de4:	ef 91       	pop	r30
     de6:	bf 91       	pop	r27
     de8:	af 91       	pop	r26
     dea:	9f 91       	pop	r25
     dec:	8f 91       	pop	r24
     dee:	7f 91       	pop	r23
     df0:	6f 91       	pop	r22
     df2:	5f 91       	pop	r21
     df4:	4f 91       	pop	r20
     df6:	3f 91       	pop	r19
     df8:	2f 91       	pop	r18
     dfa:	0f 90       	pop	r0
     dfc:	0f be       	out	0x3f, r0	; 63
     dfe:	0f 90       	pop	r0
     e00:	1f 90       	pop	r1
     e02:	18 95       	reti

00000e04 <__vector_15>:
 *
 * This function will handle interrupt on Timer Counter CO error and
 * call the callback function.
 */
ISR(TCC0_ERR_vect)
{
     e04:	1f 92       	push	r1
     e06:	0f 92       	push	r0
     e08:	0f b6       	in	r0, 0x3f	; 63
     e0a:	0f 92       	push	r0
     e0c:	11 24       	eor	r1, r1
     e0e:	2f 93       	push	r18
     e10:	3f 93       	push	r19
     e12:	4f 93       	push	r20
     e14:	5f 93       	push	r21
     e16:	6f 93       	push	r22
     e18:	7f 93       	push	r23
     e1a:	8f 93       	push	r24
     e1c:	9f 93       	push	r25
     e1e:	af 93       	push	r26
     e20:	bf 93       	push	r27
     e22:	ef 93       	push	r30
     e24:	ff 93       	push	r31
	if (tc_tcc0_err_callback) {
     e26:	e0 91 52 20 	lds	r30, 0x2052
     e2a:	f0 91 53 20 	lds	r31, 0x2053
     e2e:	30 97       	sbiw	r30, 0x00	; 0
     e30:	09 f0       	breq	.+2      	; 0xe34 <__vector_15+0x30>
		tc_tcc0_err_callback();
     e32:	09 95       	icall
	}
}
     e34:	ff 91       	pop	r31
     e36:	ef 91       	pop	r30
     e38:	bf 91       	pop	r27
     e3a:	af 91       	pop	r26
     e3c:	9f 91       	pop	r25
     e3e:	8f 91       	pop	r24
     e40:	7f 91       	pop	r23
     e42:	6f 91       	pop	r22
     e44:	5f 91       	pop	r21
     e46:	4f 91       	pop	r20
     e48:	3f 91       	pop	r19
     e4a:	2f 91       	pop	r18
     e4c:	0f 90       	pop	r0
     e4e:	0f be       	out	0x3f, r0	; 63
     e50:	0f 90       	pop	r0
     e52:	1f 90       	pop	r1
     e54:	18 95       	reti

00000e56 <__vector_16>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC0_CCA_vect)
{
     e56:	1f 92       	push	r1
     e58:	0f 92       	push	r0
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	0f 92       	push	r0
     e5e:	11 24       	eor	r1, r1
     e60:	2f 93       	push	r18
     e62:	3f 93       	push	r19
     e64:	4f 93       	push	r20
     e66:	5f 93       	push	r21
     e68:	6f 93       	push	r22
     e6a:	7f 93       	push	r23
     e6c:	8f 93       	push	r24
     e6e:	9f 93       	push	r25
     e70:	af 93       	push	r26
     e72:	bf 93       	push	r27
     e74:	ef 93       	push	r30
     e76:	ff 93       	push	r31
	if (tc_tcc0_cca_callback) {
     e78:	e0 91 50 20 	lds	r30, 0x2050
     e7c:	f0 91 51 20 	lds	r31, 0x2051
     e80:	30 97       	sbiw	r30, 0x00	; 0
     e82:	09 f0       	breq	.+2      	; 0xe86 <__vector_16+0x30>
		tc_tcc0_cca_callback();
     e84:	09 95       	icall
	}
}
     e86:	ff 91       	pop	r31
     e88:	ef 91       	pop	r30
     e8a:	bf 91       	pop	r27
     e8c:	af 91       	pop	r26
     e8e:	9f 91       	pop	r25
     e90:	8f 91       	pop	r24
     e92:	7f 91       	pop	r23
     e94:	6f 91       	pop	r22
     e96:	5f 91       	pop	r21
     e98:	4f 91       	pop	r20
     e9a:	3f 91       	pop	r19
     e9c:	2f 91       	pop	r18
     e9e:	0f 90       	pop	r0
     ea0:	0f be       	out	0x3f, r0	; 63
     ea2:	0f 90       	pop	r0
     ea4:	1f 90       	pop	r1
     ea6:	18 95       	reti

00000ea8 <__vector_17>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC0_CCB_vect)
{
     ea8:	1f 92       	push	r1
     eaa:	0f 92       	push	r0
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	0f 92       	push	r0
     eb0:	11 24       	eor	r1, r1
     eb2:	2f 93       	push	r18
     eb4:	3f 93       	push	r19
     eb6:	4f 93       	push	r20
     eb8:	5f 93       	push	r21
     eba:	6f 93       	push	r22
     ebc:	7f 93       	push	r23
     ebe:	8f 93       	push	r24
     ec0:	9f 93       	push	r25
     ec2:	af 93       	push	r26
     ec4:	bf 93       	push	r27
     ec6:	ef 93       	push	r30
     ec8:	ff 93       	push	r31
	if (tc_tcc0_ccb_callback) {
     eca:	e0 91 4e 20 	lds	r30, 0x204E
     ece:	f0 91 4f 20 	lds	r31, 0x204F
     ed2:	30 97       	sbiw	r30, 0x00	; 0
     ed4:	09 f0       	breq	.+2      	; 0xed8 <__vector_17+0x30>
		tc_tcc0_ccb_callback();
     ed6:	09 95       	icall
	}
}
     ed8:	ff 91       	pop	r31
     eda:	ef 91       	pop	r30
     edc:	bf 91       	pop	r27
     ede:	af 91       	pop	r26
     ee0:	9f 91       	pop	r25
     ee2:	8f 91       	pop	r24
     ee4:	7f 91       	pop	r23
     ee6:	6f 91       	pop	r22
     ee8:	5f 91       	pop	r21
     eea:	4f 91       	pop	r20
     eec:	3f 91       	pop	r19
     eee:	2f 91       	pop	r18
     ef0:	0f 90       	pop	r0
     ef2:	0f be       	out	0x3f, r0	; 63
     ef4:	0f 90       	pop	r0
     ef6:	1f 90       	pop	r1
     ef8:	18 95       	reti

00000efa <__vector_18>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureC and
 * call the callback function.
 */
ISR(TCC0_CCC_vect)
{
     efa:	1f 92       	push	r1
     efc:	0f 92       	push	r0
     efe:	0f b6       	in	r0, 0x3f	; 63
     f00:	0f 92       	push	r0
     f02:	11 24       	eor	r1, r1
     f04:	2f 93       	push	r18
     f06:	3f 93       	push	r19
     f08:	4f 93       	push	r20
     f0a:	5f 93       	push	r21
     f0c:	6f 93       	push	r22
     f0e:	7f 93       	push	r23
     f10:	8f 93       	push	r24
     f12:	9f 93       	push	r25
     f14:	af 93       	push	r26
     f16:	bf 93       	push	r27
     f18:	ef 93       	push	r30
     f1a:	ff 93       	push	r31
	if (tc_tcc0_ccc_callback) {
     f1c:	e0 91 4c 20 	lds	r30, 0x204C
     f20:	f0 91 4d 20 	lds	r31, 0x204D
     f24:	30 97       	sbiw	r30, 0x00	; 0
     f26:	09 f0       	breq	.+2      	; 0xf2a <__vector_18+0x30>
		tc_tcc0_ccc_callback();
     f28:	09 95       	icall
	}
}
     f2a:	ff 91       	pop	r31
     f2c:	ef 91       	pop	r30
     f2e:	bf 91       	pop	r27
     f30:	af 91       	pop	r26
     f32:	9f 91       	pop	r25
     f34:	8f 91       	pop	r24
     f36:	7f 91       	pop	r23
     f38:	6f 91       	pop	r22
     f3a:	5f 91       	pop	r21
     f3c:	4f 91       	pop	r20
     f3e:	3f 91       	pop	r19
     f40:	2f 91       	pop	r18
     f42:	0f 90       	pop	r0
     f44:	0f be       	out	0x3f, r0	; 63
     f46:	0f 90       	pop	r0
     f48:	1f 90       	pop	r1
     f4a:	18 95       	reti

00000f4c <__vector_19>:
 *
 * This function will handle interrupt on Timer Counter CO Compare/CaptureD and
 * call the callback function.
 */
ISR(TCC0_CCD_vect)
{
     f4c:	1f 92       	push	r1
     f4e:	0f 92       	push	r0
     f50:	0f b6       	in	r0, 0x3f	; 63
     f52:	0f 92       	push	r0
     f54:	11 24       	eor	r1, r1
     f56:	2f 93       	push	r18
     f58:	3f 93       	push	r19
     f5a:	4f 93       	push	r20
     f5c:	5f 93       	push	r21
     f5e:	6f 93       	push	r22
     f60:	7f 93       	push	r23
     f62:	8f 93       	push	r24
     f64:	9f 93       	push	r25
     f66:	af 93       	push	r26
     f68:	bf 93       	push	r27
     f6a:	ef 93       	push	r30
     f6c:	ff 93       	push	r31
	if (tc_tcc0_ccd_callback) {
     f6e:	e0 91 4a 20 	lds	r30, 0x204A
     f72:	f0 91 4b 20 	lds	r31, 0x204B
     f76:	30 97       	sbiw	r30, 0x00	; 0
     f78:	09 f0       	breq	.+2      	; 0xf7c <__vector_19+0x30>
		tc_tcc0_ccd_callback();
     f7a:	09 95       	icall
	}
}
     f7c:	ff 91       	pop	r31
     f7e:	ef 91       	pop	r30
     f80:	bf 91       	pop	r27
     f82:	af 91       	pop	r26
     f84:	9f 91       	pop	r25
     f86:	8f 91       	pop	r24
     f88:	7f 91       	pop	r23
     f8a:	6f 91       	pop	r22
     f8c:	5f 91       	pop	r21
     f8e:	4f 91       	pop	r20
     f90:	3f 91       	pop	r19
     f92:	2f 91       	pop	r18
     f94:	0f 90       	pop	r0
     f96:	0f be       	out	0x3f, r0	; 63
     f98:	0f 90       	pop	r0
     f9a:	1f 90       	pop	r1
     f9c:	18 95       	reti

00000f9e <__vector_20>:
 *
 * This function will handle interrupt on Timer Counter C1 overflow and
 * call the callback function.
 */
ISR(TCC1_OVF_vect)
{
     f9e:	1f 92       	push	r1
     fa0:	0f 92       	push	r0
     fa2:	0f b6       	in	r0, 0x3f	; 63
     fa4:	0f 92       	push	r0
     fa6:	11 24       	eor	r1, r1
     fa8:	2f 93       	push	r18
     faa:	3f 93       	push	r19
     fac:	4f 93       	push	r20
     fae:	5f 93       	push	r21
     fb0:	6f 93       	push	r22
     fb2:	7f 93       	push	r23
     fb4:	8f 93       	push	r24
     fb6:	9f 93       	push	r25
     fb8:	af 93       	push	r26
     fba:	bf 93       	push	r27
     fbc:	ef 93       	push	r30
     fbe:	ff 93       	push	r31
	if (tc_tcc1_ovf_callback) {
     fc0:	e0 91 48 20 	lds	r30, 0x2048
     fc4:	f0 91 49 20 	lds	r31, 0x2049
     fc8:	30 97       	sbiw	r30, 0x00	; 0
     fca:	09 f0       	breq	.+2      	; 0xfce <__vector_20+0x30>
		tc_tcc1_ovf_callback();
     fcc:	09 95       	icall
	}
}
     fce:	ff 91       	pop	r31
     fd0:	ef 91       	pop	r30
     fd2:	bf 91       	pop	r27
     fd4:	af 91       	pop	r26
     fd6:	9f 91       	pop	r25
     fd8:	8f 91       	pop	r24
     fda:	7f 91       	pop	r23
     fdc:	6f 91       	pop	r22
     fde:	5f 91       	pop	r21
     fe0:	4f 91       	pop	r20
     fe2:	3f 91       	pop	r19
     fe4:	2f 91       	pop	r18
     fe6:	0f 90       	pop	r0
     fe8:	0f be       	out	0x3f, r0	; 63
     fea:	0f 90       	pop	r0
     fec:	1f 90       	pop	r1
     fee:	18 95       	reti

00000ff0 <__vector_21>:
 *
 * This function will handle interrupt on Timer Counter C1 error and
 * call the callback function.
 */
ISR(TCC1_ERR_vect)
{
     ff0:	1f 92       	push	r1
     ff2:	0f 92       	push	r0
     ff4:	0f b6       	in	r0, 0x3f	; 63
     ff6:	0f 92       	push	r0
     ff8:	11 24       	eor	r1, r1
     ffa:	2f 93       	push	r18
     ffc:	3f 93       	push	r19
     ffe:	4f 93       	push	r20
    1000:	5f 93       	push	r21
    1002:	6f 93       	push	r22
    1004:	7f 93       	push	r23
    1006:	8f 93       	push	r24
    1008:	9f 93       	push	r25
    100a:	af 93       	push	r26
    100c:	bf 93       	push	r27
    100e:	ef 93       	push	r30
    1010:	ff 93       	push	r31
	if (tc_tcc1_err_callback) {
    1012:	e0 91 46 20 	lds	r30, 0x2046
    1016:	f0 91 47 20 	lds	r31, 0x2047
    101a:	30 97       	sbiw	r30, 0x00	; 0
    101c:	09 f0       	breq	.+2      	; 0x1020 <__vector_21+0x30>
		tc_tcc1_err_callback();
    101e:	09 95       	icall
	}
}
    1020:	ff 91       	pop	r31
    1022:	ef 91       	pop	r30
    1024:	bf 91       	pop	r27
    1026:	af 91       	pop	r26
    1028:	9f 91       	pop	r25
    102a:	8f 91       	pop	r24
    102c:	7f 91       	pop	r23
    102e:	6f 91       	pop	r22
    1030:	5f 91       	pop	r21
    1032:	4f 91       	pop	r20
    1034:	3f 91       	pop	r19
    1036:	2f 91       	pop	r18
    1038:	0f 90       	pop	r0
    103a:	0f be       	out	0x3f, r0	; 63
    103c:	0f 90       	pop	r0
    103e:	1f 90       	pop	r1
    1040:	18 95       	reti

00001042 <__vector_22>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCC1_CCA_vect)
{
    1042:	1f 92       	push	r1
    1044:	0f 92       	push	r0
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	0f 92       	push	r0
    104a:	11 24       	eor	r1, r1
    104c:	2f 93       	push	r18
    104e:	3f 93       	push	r19
    1050:	4f 93       	push	r20
    1052:	5f 93       	push	r21
    1054:	6f 93       	push	r22
    1056:	7f 93       	push	r23
    1058:	8f 93       	push	r24
    105a:	9f 93       	push	r25
    105c:	af 93       	push	r26
    105e:	bf 93       	push	r27
    1060:	ef 93       	push	r30
    1062:	ff 93       	push	r31
	if (tc_tcc1_cca_callback) {
    1064:	e0 91 44 20 	lds	r30, 0x2044
    1068:	f0 91 45 20 	lds	r31, 0x2045
    106c:	30 97       	sbiw	r30, 0x00	; 0
    106e:	09 f0       	breq	.+2      	; 0x1072 <__vector_22+0x30>
		tc_tcc1_cca_callback();
    1070:	09 95       	icall
	}
}
    1072:	ff 91       	pop	r31
    1074:	ef 91       	pop	r30
    1076:	bf 91       	pop	r27
    1078:	af 91       	pop	r26
    107a:	9f 91       	pop	r25
    107c:	8f 91       	pop	r24
    107e:	7f 91       	pop	r23
    1080:	6f 91       	pop	r22
    1082:	5f 91       	pop	r21
    1084:	4f 91       	pop	r20
    1086:	3f 91       	pop	r19
    1088:	2f 91       	pop	r18
    108a:	0f 90       	pop	r0
    108c:	0f be       	out	0x3f, r0	; 63
    108e:	0f 90       	pop	r0
    1090:	1f 90       	pop	r1
    1092:	18 95       	reti

00001094 <__vector_23>:
 *
 * This function will handle interrupt on Timer Counter C1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCC1_CCB_vect)
{
    1094:	1f 92       	push	r1
    1096:	0f 92       	push	r0
    1098:	0f b6       	in	r0, 0x3f	; 63
    109a:	0f 92       	push	r0
    109c:	11 24       	eor	r1, r1
    109e:	2f 93       	push	r18
    10a0:	3f 93       	push	r19
    10a2:	4f 93       	push	r20
    10a4:	5f 93       	push	r21
    10a6:	6f 93       	push	r22
    10a8:	7f 93       	push	r23
    10aa:	8f 93       	push	r24
    10ac:	9f 93       	push	r25
    10ae:	af 93       	push	r26
    10b0:	bf 93       	push	r27
    10b2:	ef 93       	push	r30
    10b4:	ff 93       	push	r31
	if (tc_tcc1_ccb_callback) {
    10b6:	e0 91 42 20 	lds	r30, 0x2042
    10ba:	f0 91 43 20 	lds	r31, 0x2043
    10be:	30 97       	sbiw	r30, 0x00	; 0
    10c0:	09 f0       	breq	.+2      	; 0x10c4 <__vector_23+0x30>
		tc_tcc1_ccb_callback();
    10c2:	09 95       	icall
	}
}
    10c4:	ff 91       	pop	r31
    10c6:	ef 91       	pop	r30
    10c8:	bf 91       	pop	r27
    10ca:	af 91       	pop	r26
    10cc:	9f 91       	pop	r25
    10ce:	8f 91       	pop	r24
    10d0:	7f 91       	pop	r23
    10d2:	6f 91       	pop	r22
    10d4:	5f 91       	pop	r21
    10d6:	4f 91       	pop	r20
    10d8:	3f 91       	pop	r19
    10da:	2f 91       	pop	r18
    10dc:	0f 90       	pop	r0
    10de:	0f be       	out	0x3f, r0	; 63
    10e0:	0f 90       	pop	r0
    10e2:	1f 90       	pop	r1
    10e4:	18 95       	reti

000010e6 <__vector_78>:
 *
 * This function will handle interrupt on Timer Counter D0 error and
 * call the callback function.
 */
ISR(TCD0_ERR_vect)
{
    10e6:	1f 92       	push	r1
    10e8:	0f 92       	push	r0
    10ea:	0f b6       	in	r0, 0x3f	; 63
    10ec:	0f 92       	push	r0
    10ee:	11 24       	eor	r1, r1
    10f0:	2f 93       	push	r18
    10f2:	3f 93       	push	r19
    10f4:	4f 93       	push	r20
    10f6:	5f 93       	push	r21
    10f8:	6f 93       	push	r22
    10fa:	7f 93       	push	r23
    10fc:	8f 93       	push	r24
    10fe:	9f 93       	push	r25
    1100:	af 93       	push	r26
    1102:	bf 93       	push	r27
    1104:	ef 93       	push	r30
    1106:	ff 93       	push	r31
	if (tc_tcd0_err_callback) {
    1108:	e0 91 40 20 	lds	r30, 0x2040
    110c:	f0 91 41 20 	lds	r31, 0x2041
    1110:	30 97       	sbiw	r30, 0x00	; 0
    1112:	09 f0       	breq	.+2      	; 0x1116 <__vector_78+0x30>
		tc_tcd0_err_callback();
    1114:	09 95       	icall
	}
}
    1116:	ff 91       	pop	r31
    1118:	ef 91       	pop	r30
    111a:	bf 91       	pop	r27
    111c:	af 91       	pop	r26
    111e:	9f 91       	pop	r25
    1120:	8f 91       	pop	r24
    1122:	7f 91       	pop	r23
    1124:	6f 91       	pop	r22
    1126:	5f 91       	pop	r21
    1128:	4f 91       	pop	r20
    112a:	3f 91       	pop	r19
    112c:	2f 91       	pop	r18
    112e:	0f 90       	pop	r0
    1130:	0f be       	out	0x3f, r0	; 63
    1132:	0f 90       	pop	r0
    1134:	1f 90       	pop	r1
    1136:	18 95       	reti

00001138 <__vector_79>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD0_CCA_vect)
{
    1138:	1f 92       	push	r1
    113a:	0f 92       	push	r0
    113c:	0f b6       	in	r0, 0x3f	; 63
    113e:	0f 92       	push	r0
    1140:	11 24       	eor	r1, r1
    1142:	2f 93       	push	r18
    1144:	3f 93       	push	r19
    1146:	4f 93       	push	r20
    1148:	5f 93       	push	r21
    114a:	6f 93       	push	r22
    114c:	7f 93       	push	r23
    114e:	8f 93       	push	r24
    1150:	9f 93       	push	r25
    1152:	af 93       	push	r26
    1154:	bf 93       	push	r27
    1156:	ef 93       	push	r30
    1158:	ff 93       	push	r31
	if (tc_tcd0_cca_callback) {
    115a:	e0 91 3e 20 	lds	r30, 0x203E
    115e:	f0 91 3f 20 	lds	r31, 0x203F
    1162:	30 97       	sbiw	r30, 0x00	; 0
    1164:	09 f0       	breq	.+2      	; 0x1168 <__vector_79+0x30>
		tc_tcd0_cca_callback();
    1166:	09 95       	icall
	}
}
    1168:	ff 91       	pop	r31
    116a:	ef 91       	pop	r30
    116c:	bf 91       	pop	r27
    116e:	af 91       	pop	r26
    1170:	9f 91       	pop	r25
    1172:	8f 91       	pop	r24
    1174:	7f 91       	pop	r23
    1176:	6f 91       	pop	r22
    1178:	5f 91       	pop	r21
    117a:	4f 91       	pop	r20
    117c:	3f 91       	pop	r19
    117e:	2f 91       	pop	r18
    1180:	0f 90       	pop	r0
    1182:	0f be       	out	0x3f, r0	; 63
    1184:	0f 90       	pop	r0
    1186:	1f 90       	pop	r1
    1188:	18 95       	reti

0000118a <__vector_80>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD0_CCB_vect)
{
    118a:	1f 92       	push	r1
    118c:	0f 92       	push	r0
    118e:	0f b6       	in	r0, 0x3f	; 63
    1190:	0f 92       	push	r0
    1192:	11 24       	eor	r1, r1
    1194:	2f 93       	push	r18
    1196:	3f 93       	push	r19
    1198:	4f 93       	push	r20
    119a:	5f 93       	push	r21
    119c:	6f 93       	push	r22
    119e:	7f 93       	push	r23
    11a0:	8f 93       	push	r24
    11a2:	9f 93       	push	r25
    11a4:	af 93       	push	r26
    11a6:	bf 93       	push	r27
    11a8:	ef 93       	push	r30
    11aa:	ff 93       	push	r31
	if (tc_tcd0_ccb_callback) {
    11ac:	e0 91 3c 20 	lds	r30, 0x203C
    11b0:	f0 91 3d 20 	lds	r31, 0x203D
    11b4:	30 97       	sbiw	r30, 0x00	; 0
    11b6:	09 f0       	breq	.+2      	; 0x11ba <__vector_80+0x30>
		tc_tcd0_ccb_callback();
    11b8:	09 95       	icall
	}
}
    11ba:	ff 91       	pop	r31
    11bc:	ef 91       	pop	r30
    11be:	bf 91       	pop	r27
    11c0:	af 91       	pop	r26
    11c2:	9f 91       	pop	r25
    11c4:	8f 91       	pop	r24
    11c6:	7f 91       	pop	r23
    11c8:	6f 91       	pop	r22
    11ca:	5f 91       	pop	r21
    11cc:	4f 91       	pop	r20
    11ce:	3f 91       	pop	r19
    11d0:	2f 91       	pop	r18
    11d2:	0f 90       	pop	r0
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	0f 90       	pop	r0
    11d8:	1f 90       	pop	r1
    11da:	18 95       	reti

000011dc <__vector_81>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCD0_CCC_vect)
{
    11dc:	1f 92       	push	r1
    11de:	0f 92       	push	r0
    11e0:	0f b6       	in	r0, 0x3f	; 63
    11e2:	0f 92       	push	r0
    11e4:	11 24       	eor	r1, r1
    11e6:	2f 93       	push	r18
    11e8:	3f 93       	push	r19
    11ea:	4f 93       	push	r20
    11ec:	5f 93       	push	r21
    11ee:	6f 93       	push	r22
    11f0:	7f 93       	push	r23
    11f2:	8f 93       	push	r24
    11f4:	9f 93       	push	r25
    11f6:	af 93       	push	r26
    11f8:	bf 93       	push	r27
    11fa:	ef 93       	push	r30
    11fc:	ff 93       	push	r31
	if (tc_tcd0_ccc_callback) {
    11fe:	e0 91 3a 20 	lds	r30, 0x203A
    1202:	f0 91 3b 20 	lds	r31, 0x203B
    1206:	30 97       	sbiw	r30, 0x00	; 0
    1208:	09 f0       	breq	.+2      	; 0x120c <__vector_81+0x30>
		tc_tcd0_ccc_callback();
    120a:	09 95       	icall
	}
}
    120c:	ff 91       	pop	r31
    120e:	ef 91       	pop	r30
    1210:	bf 91       	pop	r27
    1212:	af 91       	pop	r26
    1214:	9f 91       	pop	r25
    1216:	8f 91       	pop	r24
    1218:	7f 91       	pop	r23
    121a:	6f 91       	pop	r22
    121c:	5f 91       	pop	r21
    121e:	4f 91       	pop	r20
    1220:	3f 91       	pop	r19
    1222:	2f 91       	pop	r18
    1224:	0f 90       	pop	r0
    1226:	0f be       	out	0x3f, r0	; 63
    1228:	0f 90       	pop	r0
    122a:	1f 90       	pop	r1
    122c:	18 95       	reti

0000122e <__vector_82>:
 *
 * This function will handle interrupt on Timer Counter D0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCD0_CCD_vect)
{
    122e:	1f 92       	push	r1
    1230:	0f 92       	push	r0
    1232:	0f b6       	in	r0, 0x3f	; 63
    1234:	0f 92       	push	r0
    1236:	11 24       	eor	r1, r1
    1238:	2f 93       	push	r18
    123a:	3f 93       	push	r19
    123c:	4f 93       	push	r20
    123e:	5f 93       	push	r21
    1240:	6f 93       	push	r22
    1242:	7f 93       	push	r23
    1244:	8f 93       	push	r24
    1246:	9f 93       	push	r25
    1248:	af 93       	push	r26
    124a:	bf 93       	push	r27
    124c:	ef 93       	push	r30
    124e:	ff 93       	push	r31
	if (tc_tcd0_ccd_callback) {
    1250:	e0 91 38 20 	lds	r30, 0x2038
    1254:	f0 91 39 20 	lds	r31, 0x2039
    1258:	30 97       	sbiw	r30, 0x00	; 0
    125a:	09 f0       	breq	.+2      	; 0x125e <__vector_82+0x30>
		tc_tcd0_ccd_callback();
    125c:	09 95       	icall
	}
}
    125e:	ff 91       	pop	r31
    1260:	ef 91       	pop	r30
    1262:	bf 91       	pop	r27
    1264:	af 91       	pop	r26
    1266:	9f 91       	pop	r25
    1268:	8f 91       	pop	r24
    126a:	7f 91       	pop	r23
    126c:	6f 91       	pop	r22
    126e:	5f 91       	pop	r21
    1270:	4f 91       	pop	r20
    1272:	3f 91       	pop	r19
    1274:	2f 91       	pop	r18
    1276:	0f 90       	pop	r0
    1278:	0f be       	out	0x3f, r0	; 63
    127a:	0f 90       	pop	r0
    127c:	1f 90       	pop	r1
    127e:	18 95       	reti

00001280 <__vector_83>:
 *
 * This function will handle interrupt on Timer Counter D1 overflow and
 * call the callback function.
 */
ISR(TCD1_OVF_vect)
{
    1280:	1f 92       	push	r1
    1282:	0f 92       	push	r0
    1284:	0f b6       	in	r0, 0x3f	; 63
    1286:	0f 92       	push	r0
    1288:	11 24       	eor	r1, r1
    128a:	2f 93       	push	r18
    128c:	3f 93       	push	r19
    128e:	4f 93       	push	r20
    1290:	5f 93       	push	r21
    1292:	6f 93       	push	r22
    1294:	7f 93       	push	r23
    1296:	8f 93       	push	r24
    1298:	9f 93       	push	r25
    129a:	af 93       	push	r26
    129c:	bf 93       	push	r27
    129e:	ef 93       	push	r30
    12a0:	ff 93       	push	r31
	if (tc_tcd1_ovf_callback) {
    12a2:	e0 91 36 20 	lds	r30, 0x2036
    12a6:	f0 91 37 20 	lds	r31, 0x2037
    12aa:	30 97       	sbiw	r30, 0x00	; 0
    12ac:	09 f0       	breq	.+2      	; 0x12b0 <__vector_83+0x30>
		tc_tcd1_ovf_callback();
    12ae:	09 95       	icall
	}
}
    12b0:	ff 91       	pop	r31
    12b2:	ef 91       	pop	r30
    12b4:	bf 91       	pop	r27
    12b6:	af 91       	pop	r26
    12b8:	9f 91       	pop	r25
    12ba:	8f 91       	pop	r24
    12bc:	7f 91       	pop	r23
    12be:	6f 91       	pop	r22
    12c0:	5f 91       	pop	r21
    12c2:	4f 91       	pop	r20
    12c4:	3f 91       	pop	r19
    12c6:	2f 91       	pop	r18
    12c8:	0f 90       	pop	r0
    12ca:	0f be       	out	0x3f, r0	; 63
    12cc:	0f 90       	pop	r0
    12ce:	1f 90       	pop	r1
    12d0:	18 95       	reti

000012d2 <__vector_84>:
 *
 * This function will handle interrupt on Timer Counter D1 error and
 * call the callback function.
 */
ISR(TCD1_ERR_vect)
{
    12d2:	1f 92       	push	r1
    12d4:	0f 92       	push	r0
    12d6:	0f b6       	in	r0, 0x3f	; 63
    12d8:	0f 92       	push	r0
    12da:	11 24       	eor	r1, r1
    12dc:	2f 93       	push	r18
    12de:	3f 93       	push	r19
    12e0:	4f 93       	push	r20
    12e2:	5f 93       	push	r21
    12e4:	6f 93       	push	r22
    12e6:	7f 93       	push	r23
    12e8:	8f 93       	push	r24
    12ea:	9f 93       	push	r25
    12ec:	af 93       	push	r26
    12ee:	bf 93       	push	r27
    12f0:	ef 93       	push	r30
    12f2:	ff 93       	push	r31
	if (tc_tcd1_err_callback) {
    12f4:	e0 91 34 20 	lds	r30, 0x2034
    12f8:	f0 91 35 20 	lds	r31, 0x2035
    12fc:	30 97       	sbiw	r30, 0x00	; 0
    12fe:	09 f0       	breq	.+2      	; 0x1302 <__vector_84+0x30>
		tc_tcd1_err_callback();
    1300:	09 95       	icall
	}
}
    1302:	ff 91       	pop	r31
    1304:	ef 91       	pop	r30
    1306:	bf 91       	pop	r27
    1308:	af 91       	pop	r26
    130a:	9f 91       	pop	r25
    130c:	8f 91       	pop	r24
    130e:	7f 91       	pop	r23
    1310:	6f 91       	pop	r22
    1312:	5f 91       	pop	r21
    1314:	4f 91       	pop	r20
    1316:	3f 91       	pop	r19
    1318:	2f 91       	pop	r18
    131a:	0f 90       	pop	r0
    131c:	0f be       	out	0x3f, r0	; 63
    131e:	0f 90       	pop	r0
    1320:	1f 90       	pop	r1
    1322:	18 95       	reti

00001324 <__vector_85>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCD1_CCA_vect)
{
    1324:	1f 92       	push	r1
    1326:	0f 92       	push	r0
    1328:	0f b6       	in	r0, 0x3f	; 63
    132a:	0f 92       	push	r0
    132c:	11 24       	eor	r1, r1
    132e:	2f 93       	push	r18
    1330:	3f 93       	push	r19
    1332:	4f 93       	push	r20
    1334:	5f 93       	push	r21
    1336:	6f 93       	push	r22
    1338:	7f 93       	push	r23
    133a:	8f 93       	push	r24
    133c:	9f 93       	push	r25
    133e:	af 93       	push	r26
    1340:	bf 93       	push	r27
    1342:	ef 93       	push	r30
    1344:	ff 93       	push	r31
	if (tc_tcd1_cca_callback) {
    1346:	e0 91 32 20 	lds	r30, 0x2032
    134a:	f0 91 33 20 	lds	r31, 0x2033
    134e:	30 97       	sbiw	r30, 0x00	; 0
    1350:	09 f0       	breq	.+2      	; 0x1354 <__vector_85+0x30>
		tc_tcd1_cca_callback();
    1352:	09 95       	icall
	}
}
    1354:	ff 91       	pop	r31
    1356:	ef 91       	pop	r30
    1358:	bf 91       	pop	r27
    135a:	af 91       	pop	r26
    135c:	9f 91       	pop	r25
    135e:	8f 91       	pop	r24
    1360:	7f 91       	pop	r23
    1362:	6f 91       	pop	r22
    1364:	5f 91       	pop	r21
    1366:	4f 91       	pop	r20
    1368:	3f 91       	pop	r19
    136a:	2f 91       	pop	r18
    136c:	0f 90       	pop	r0
    136e:	0f be       	out	0x3f, r0	; 63
    1370:	0f 90       	pop	r0
    1372:	1f 90       	pop	r1
    1374:	18 95       	reti

00001376 <__vector_86>:
 *
 * This function will handle interrupt on Timer Counter D1 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCD1_CCB_vect)
{
    1376:	1f 92       	push	r1
    1378:	0f 92       	push	r0
    137a:	0f b6       	in	r0, 0x3f	; 63
    137c:	0f 92       	push	r0
    137e:	11 24       	eor	r1, r1
    1380:	2f 93       	push	r18
    1382:	3f 93       	push	r19
    1384:	4f 93       	push	r20
    1386:	5f 93       	push	r21
    1388:	6f 93       	push	r22
    138a:	7f 93       	push	r23
    138c:	8f 93       	push	r24
    138e:	9f 93       	push	r25
    1390:	af 93       	push	r26
    1392:	bf 93       	push	r27
    1394:	ef 93       	push	r30
    1396:	ff 93       	push	r31
	if (tc_tcd1_ccb_callback) {
    1398:	e0 91 30 20 	lds	r30, 0x2030
    139c:	f0 91 31 20 	lds	r31, 0x2031
    13a0:	30 97       	sbiw	r30, 0x00	; 0
    13a2:	09 f0       	breq	.+2      	; 0x13a6 <__vector_86+0x30>
		tc_tcd1_ccb_callback();
    13a4:	09 95       	icall
	}
}
    13a6:	ff 91       	pop	r31
    13a8:	ef 91       	pop	r30
    13aa:	bf 91       	pop	r27
    13ac:	af 91       	pop	r26
    13ae:	9f 91       	pop	r25
    13b0:	8f 91       	pop	r24
    13b2:	7f 91       	pop	r23
    13b4:	6f 91       	pop	r22
    13b6:	5f 91       	pop	r21
    13b8:	4f 91       	pop	r20
    13ba:	3f 91       	pop	r19
    13bc:	2f 91       	pop	r18
    13be:	0f 90       	pop	r0
    13c0:	0f be       	out	0x3f, r0	; 63
    13c2:	0f 90       	pop	r0
    13c4:	1f 90       	pop	r1
    13c6:	18 95       	reti

000013c8 <__vector_47>:
 *
 * This function will handle interrupt on Timer Counter E0 overflow and
 * call the callback function.
 */
ISR(TCE0_OVF_vect)
{
    13c8:	1f 92       	push	r1
    13ca:	0f 92       	push	r0
    13cc:	0f b6       	in	r0, 0x3f	; 63
    13ce:	0f 92       	push	r0
    13d0:	11 24       	eor	r1, r1
    13d2:	2f 93       	push	r18
    13d4:	3f 93       	push	r19
    13d6:	4f 93       	push	r20
    13d8:	5f 93       	push	r21
    13da:	6f 93       	push	r22
    13dc:	7f 93       	push	r23
    13de:	8f 93       	push	r24
    13e0:	9f 93       	push	r25
    13e2:	af 93       	push	r26
    13e4:	bf 93       	push	r27
    13e6:	ef 93       	push	r30
    13e8:	ff 93       	push	r31
	if (tc_tce0_ovf_callback) {
    13ea:	e0 91 2e 20 	lds	r30, 0x202E
    13ee:	f0 91 2f 20 	lds	r31, 0x202F
    13f2:	30 97       	sbiw	r30, 0x00	; 0
    13f4:	09 f0       	breq	.+2      	; 0x13f8 <__vector_47+0x30>
		tc_tce0_ovf_callback();
    13f6:	09 95       	icall
	}
}
    13f8:	ff 91       	pop	r31
    13fa:	ef 91       	pop	r30
    13fc:	bf 91       	pop	r27
    13fe:	af 91       	pop	r26
    1400:	9f 91       	pop	r25
    1402:	8f 91       	pop	r24
    1404:	7f 91       	pop	r23
    1406:	6f 91       	pop	r22
    1408:	5f 91       	pop	r21
    140a:	4f 91       	pop	r20
    140c:	3f 91       	pop	r19
    140e:	2f 91       	pop	r18
    1410:	0f 90       	pop	r0
    1412:	0f be       	out	0x3f, r0	; 63
    1414:	0f 90       	pop	r0
    1416:	1f 90       	pop	r1
    1418:	18 95       	reti

0000141a <__vector_48>:
 *
 * This function will handle interrupt on Timer Counter E0 error and
 * call the callback function.
 */
ISR(TCE0_ERR_vect)
{
    141a:	1f 92       	push	r1
    141c:	0f 92       	push	r0
    141e:	0f b6       	in	r0, 0x3f	; 63
    1420:	0f 92       	push	r0
    1422:	11 24       	eor	r1, r1
    1424:	2f 93       	push	r18
    1426:	3f 93       	push	r19
    1428:	4f 93       	push	r20
    142a:	5f 93       	push	r21
    142c:	6f 93       	push	r22
    142e:	7f 93       	push	r23
    1430:	8f 93       	push	r24
    1432:	9f 93       	push	r25
    1434:	af 93       	push	r26
    1436:	bf 93       	push	r27
    1438:	ef 93       	push	r30
    143a:	ff 93       	push	r31
	if (tc_tce0_err_callback) {
    143c:	e0 91 2c 20 	lds	r30, 0x202C
    1440:	f0 91 2d 20 	lds	r31, 0x202D
    1444:	30 97       	sbiw	r30, 0x00	; 0
    1446:	09 f0       	breq	.+2      	; 0x144a <__vector_48+0x30>
		tc_tce0_err_callback();
    1448:	09 95       	icall
	}
}
    144a:	ff 91       	pop	r31
    144c:	ef 91       	pop	r30
    144e:	bf 91       	pop	r27
    1450:	af 91       	pop	r26
    1452:	9f 91       	pop	r25
    1454:	8f 91       	pop	r24
    1456:	7f 91       	pop	r23
    1458:	6f 91       	pop	r22
    145a:	5f 91       	pop	r21
    145c:	4f 91       	pop	r20
    145e:	3f 91       	pop	r19
    1460:	2f 91       	pop	r18
    1462:	0f 90       	pop	r0
    1464:	0f be       	out	0x3f, r0	; 63
    1466:	0f 90       	pop	r0
    1468:	1f 90       	pop	r1
    146a:	18 95       	reti

0000146c <__vector_49>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureA and
 * call the callback function.
 */
ISR(TCE0_CCA_vect)
{
    146c:	1f 92       	push	r1
    146e:	0f 92       	push	r0
    1470:	0f b6       	in	r0, 0x3f	; 63
    1472:	0f 92       	push	r0
    1474:	11 24       	eor	r1, r1
    1476:	2f 93       	push	r18
    1478:	3f 93       	push	r19
    147a:	4f 93       	push	r20
    147c:	5f 93       	push	r21
    147e:	6f 93       	push	r22
    1480:	7f 93       	push	r23
    1482:	8f 93       	push	r24
    1484:	9f 93       	push	r25
    1486:	af 93       	push	r26
    1488:	bf 93       	push	r27
    148a:	ef 93       	push	r30
    148c:	ff 93       	push	r31
	if (tc_tce0_cca_callback) {
    148e:	e0 91 2a 20 	lds	r30, 0x202A
    1492:	f0 91 2b 20 	lds	r31, 0x202B
    1496:	30 97       	sbiw	r30, 0x00	; 0
    1498:	09 f0       	breq	.+2      	; 0x149c <__vector_49+0x30>
		tc_tce0_cca_callback();
    149a:	09 95       	icall
	}
}
    149c:	ff 91       	pop	r31
    149e:	ef 91       	pop	r30
    14a0:	bf 91       	pop	r27
    14a2:	af 91       	pop	r26
    14a4:	9f 91       	pop	r25
    14a6:	8f 91       	pop	r24
    14a8:	7f 91       	pop	r23
    14aa:	6f 91       	pop	r22
    14ac:	5f 91       	pop	r21
    14ae:	4f 91       	pop	r20
    14b0:	3f 91       	pop	r19
    14b2:	2f 91       	pop	r18
    14b4:	0f 90       	pop	r0
    14b6:	0f be       	out	0x3f, r0	; 63
    14b8:	0f 90       	pop	r0
    14ba:	1f 90       	pop	r1
    14bc:	18 95       	reti

000014be <__vector_50>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureB and
 * call the callback function.
 */
ISR(TCE0_CCB_vect)
{
    14be:	1f 92       	push	r1
    14c0:	0f 92       	push	r0
    14c2:	0f b6       	in	r0, 0x3f	; 63
    14c4:	0f 92       	push	r0
    14c6:	11 24       	eor	r1, r1
    14c8:	2f 93       	push	r18
    14ca:	3f 93       	push	r19
    14cc:	4f 93       	push	r20
    14ce:	5f 93       	push	r21
    14d0:	6f 93       	push	r22
    14d2:	7f 93       	push	r23
    14d4:	8f 93       	push	r24
    14d6:	9f 93       	push	r25
    14d8:	af 93       	push	r26
    14da:	bf 93       	push	r27
    14dc:	ef 93       	push	r30
    14de:	ff 93       	push	r31
	if (tc_tce0_ccb_callback) {
    14e0:	e0 91 28 20 	lds	r30, 0x2028
    14e4:	f0 91 29 20 	lds	r31, 0x2029
    14e8:	30 97       	sbiw	r30, 0x00	; 0
    14ea:	09 f0       	breq	.+2      	; 0x14ee <__vector_50+0x30>
		tc_tce0_ccb_callback();
    14ec:	09 95       	icall
	}
}
    14ee:	ff 91       	pop	r31
    14f0:	ef 91       	pop	r30
    14f2:	bf 91       	pop	r27
    14f4:	af 91       	pop	r26
    14f6:	9f 91       	pop	r25
    14f8:	8f 91       	pop	r24
    14fa:	7f 91       	pop	r23
    14fc:	6f 91       	pop	r22
    14fe:	5f 91       	pop	r21
    1500:	4f 91       	pop	r20
    1502:	3f 91       	pop	r19
    1504:	2f 91       	pop	r18
    1506:	0f 90       	pop	r0
    1508:	0f be       	out	0x3f, r0	; 63
    150a:	0f 90       	pop	r0
    150c:	1f 90       	pop	r1
    150e:	18 95       	reti

00001510 <__vector_51>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureC and
 * call the callback function.
 */
ISR(TCE0_CCC_vect)
{
    1510:	1f 92       	push	r1
    1512:	0f 92       	push	r0
    1514:	0f b6       	in	r0, 0x3f	; 63
    1516:	0f 92       	push	r0
    1518:	11 24       	eor	r1, r1
    151a:	2f 93       	push	r18
    151c:	3f 93       	push	r19
    151e:	4f 93       	push	r20
    1520:	5f 93       	push	r21
    1522:	6f 93       	push	r22
    1524:	7f 93       	push	r23
    1526:	8f 93       	push	r24
    1528:	9f 93       	push	r25
    152a:	af 93       	push	r26
    152c:	bf 93       	push	r27
    152e:	ef 93       	push	r30
    1530:	ff 93       	push	r31
	if (tc_tce0_ccc_callback) {
    1532:	e0 91 26 20 	lds	r30, 0x2026
    1536:	f0 91 27 20 	lds	r31, 0x2027
    153a:	30 97       	sbiw	r30, 0x00	; 0
    153c:	09 f0       	breq	.+2      	; 0x1540 <__vector_51+0x30>
		tc_tce0_ccc_callback();
    153e:	09 95       	icall
	}
}
    1540:	ff 91       	pop	r31
    1542:	ef 91       	pop	r30
    1544:	bf 91       	pop	r27
    1546:	af 91       	pop	r26
    1548:	9f 91       	pop	r25
    154a:	8f 91       	pop	r24
    154c:	7f 91       	pop	r23
    154e:	6f 91       	pop	r22
    1550:	5f 91       	pop	r21
    1552:	4f 91       	pop	r20
    1554:	3f 91       	pop	r19
    1556:	2f 91       	pop	r18
    1558:	0f 90       	pop	r0
    155a:	0f be       	out	0x3f, r0	; 63
    155c:	0f 90       	pop	r0
    155e:	1f 90       	pop	r1
    1560:	18 95       	reti

00001562 <__vector_52>:
 *
 * This function will handle interrupt on Timer Counter E0 Compare/CaptureD and
 * call the callback function.
 */
ISR(TCE0_CCD_vect)
{
    1562:	1f 92       	push	r1
    1564:	0f 92       	push	r0
    1566:	0f b6       	in	r0, 0x3f	; 63
    1568:	0f 92       	push	r0
    156a:	11 24       	eor	r1, r1
    156c:	2f 93       	push	r18
    156e:	3f 93       	push	r19
    1570:	4f 93       	push	r20
    1572:	5f 93       	push	r21
    1574:	6f 93       	push	r22
    1576:	7f 93       	push	r23
    1578:	8f 93       	push	r24
    157a:	9f 93       	push	r25
    157c:	af 93       	push	r26
    157e:	bf 93       	push	r27
    1580:	ef 93       	push	r30
    1582:	ff 93       	push	r31
	if (tc_tce0_ccd_callback) {
    1584:	e0 91 24 20 	lds	r30, 0x2024
    1588:	f0 91 25 20 	lds	r31, 0x2025
    158c:	30 97       	sbiw	r30, 0x00	; 0
    158e:	09 f0       	breq	.+2      	; 0x1592 <__vector_52+0x30>
		tc_tce0_ccd_callback();
    1590:	09 95       	icall
	}
}
    1592:	ff 91       	pop	r31
    1594:	ef 91       	pop	r30
    1596:	bf 91       	pop	r27
    1598:	af 91       	pop	r26
    159a:	9f 91       	pop	r25
    159c:	8f 91       	pop	r24
    159e:	7f 91       	pop	r23
    15a0:	6f 91       	pop	r22
    15a2:	5f 91       	pop	r21
    15a4:	4f 91       	pop	r20
    15a6:	3f 91       	pop	r19
    15a8:	2f 91       	pop	r18
    15aa:	0f 90       	pop	r0
    15ac:	0f be       	out	0x3f, r0	; 63
    15ae:	0f 90       	pop	r0
    15b0:	1f 90       	pop	r1
    15b2:	18 95       	reti

000015b4 <tc_enable>:
 *
 * \note
 * unmask TC clock (sysclk), but does not configure the TC clock source.
 */
void tc_enable(volatile void *tc)
{
    15b4:	cf 93       	push	r28

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    15b6:	cf b7       	in	r28, 0x3f	; 63
	cpu_irq_disable();
    15b8:	f8 94       	cli
	irqflags_t iflags = cpu_irq_save();

#ifdef TCC0
	if ((uintptr_t) tc == (uintptr_t) & TCC0) {
    15ba:	28 2f       	mov	r18, r24
    15bc:	39 2f       	mov	r19, r25
    15be:	21 15       	cp	r18, r1
    15c0:	88 e0       	ldi	r24, 0x08	; 8
    15c2:	38 07       	cpc	r19, r24
    15c4:	39 f4       	brne	.+14     	; 0x15d4 <tc_enable+0x20>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC0);
    15c6:	61 e0       	ldi	r22, 0x01	; 1
    15c8:	83 e0       	ldi	r24, 0x03	; 3
    15ca:	e7 db       	rcall	.-2098   	; 0xd9a <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    15cc:	64 e0       	ldi	r22, 0x04	; 4
    15ce:	83 e0       	ldi	r24, 0x03	; 3
    15d0:	e4 db       	rcall	.-2104   	; 0xd9a <sysclk_enable_module>
    15d2:	2d c0       	rjmp	.+90     	; 0x162e <tc_enable+0x7a>
	} else
#endif
#ifdef TCC1
	if ((uintptr_t) tc == (uintptr_t) & TCC1) {
    15d4:	20 34       	cpi	r18, 0x40	; 64
    15d6:	88 e0       	ldi	r24, 0x08	; 8
    15d8:	38 07       	cpc	r19, r24
    15da:	39 f4       	brne	.+14     	; 0x15ea <tc_enable+0x36>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_TC1);
    15dc:	62 e0       	ldi	r22, 0x02	; 2
    15de:	83 e0       	ldi	r24, 0x03	; 3
    15e0:	dc db       	rcall	.-2120   	; 0xd9a <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_C, SYSCLK_HIRES);
    15e2:	64 e0       	ldi	r22, 0x04	; 4
    15e4:	83 e0       	ldi	r24, 0x03	; 3
    15e6:	d9 db       	rcall	.-2126   	; 0xd9a <sysclk_enable_module>
    15e8:	22 c0       	rjmp	.+68     	; 0x162e <tc_enable+0x7a>
	} else
#endif
#ifdef TCD0
	if ((uintptr_t) tc == (uintptr_t) & TCD0) {
    15ea:	21 15       	cp	r18, r1
    15ec:	89 e0       	ldi	r24, 0x09	; 9
    15ee:	38 07       	cpc	r19, r24
    15f0:	39 f4       	brne	.+14     	; 0x1600 <tc_enable+0x4c>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC0);
    15f2:	61 e0       	ldi	r22, 0x01	; 1
    15f4:	84 e0       	ldi	r24, 0x04	; 4
    15f6:	d1 db       	rcall	.-2142   	; 0xd9a <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    15f8:	64 e0       	ldi	r22, 0x04	; 4
    15fa:	84 e0       	ldi	r24, 0x04	; 4
    15fc:	ce db       	rcall	.-2148   	; 0xd9a <sysclk_enable_module>
    15fe:	17 c0       	rjmp	.+46     	; 0x162e <tc_enable+0x7a>
	} else
#endif
#ifdef TCD1
	if ((uintptr_t) tc == (uintptr_t) & TCD1) {
    1600:	20 34       	cpi	r18, 0x40	; 64
    1602:	89 e0       	ldi	r24, 0x09	; 9
    1604:	38 07       	cpc	r19, r24
    1606:	39 f4       	brne	.+14     	; 0x1616 <tc_enable+0x62>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_TC1);
    1608:	62 e0       	ldi	r22, 0x02	; 2
    160a:	84 e0       	ldi	r24, 0x04	; 4
    160c:	c6 db       	rcall	.-2164   	; 0xd9a <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_D, SYSCLK_HIRES);
    160e:	64 e0       	ldi	r22, 0x04	; 4
    1610:	84 e0       	ldi	r24, 0x04	; 4
    1612:	c3 db       	rcall	.-2170   	; 0xd9a <sysclk_enable_module>
    1614:	0c c0       	rjmp	.+24     	; 0x162e <tc_enable+0x7a>
	} else
#endif
#ifdef TCE0
	if ((uintptr_t) tc == (uintptr_t) & TCE0) {
    1616:	21 15       	cp	r18, r1
    1618:	3a 40       	sbci	r19, 0x0A	; 10
    161a:	39 f4       	brne	.+14     	; 0x162a <tc_enable+0x76>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_TC0);
    161c:	61 e0       	ldi	r22, 0x01	; 1
    161e:	85 e0       	ldi	r24, 0x05	; 5
    1620:	bc db       	rcall	.-2184   	; 0xd9a <sysclk_enable_module>
		sysclk_enable_module(SYSCLK_PORT_E, SYSCLK_HIRES);
    1622:	64 e0       	ldi	r22, 0x04	; 4
    1624:	85 e0       	ldi	r24, 0x05	; 5
    1626:	b9 db       	rcall	.-2190   	; 0xd9a <sysclk_enable_module>
    1628:	02 c0       	rjmp	.+4      	; 0x162e <tc_enable+0x7a>
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    162a:	cf bf       	out	0x3f, r28	; 63
    162c:	09 c0       	rjmp	.+18     	; 0x1640 <tc_enable+0x8c>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	irqflags_t flags = SREG;
    162e:	8f b7       	in	r24, 0x3f	; 63
	cpu_irq_disable();
    1630:	f8 94       	cli
	Assert(sleepmgr_locks[mode] < 0xff);

	// Enter a critical section
	flags = cpu_irq_save();

	++sleepmgr_locks[mode];
    1632:	e2 e0       	ldi	r30, 0x02	; 2
    1634:	f1 e2       	ldi	r31, 0x21	; 33
    1636:	90 81       	ld	r25, Z
    1638:	9f 5f       	subi	r25, 0xFF	; 255
    163a:	90 83       	st	Z, r25
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    163c:	8f bf       	out	0x3f, r24	; 63
    163e:	cf bf       	out	0x3f, r28	; 63
		cpu_irq_restore(iflags);
		return;
	}
	sleepmgr_lock_mode(SLEEPMGR_IDLE);
	cpu_irq_restore(iflags);
}
    1640:	cf 91       	pop	r28
    1642:	08 95       	ret

00001644 <usart_putchar>:

	if (baud_offset != USART_BAUD_UNDEFINED) {
		(usart)->BAUDCTRLB = (uint8_t)((uint16_t)baudctrl);
		(usart)->BAUDCTRLA = (uint8_t)((uint16_t)baudctrl >> 8);
	}
}
    1644:	fc 01       	movw	r30, r24
    1646:	81 81       	ldd	r24, Z+1	; 0x01
    1648:	85 ff       	sbrs	r24, 5
    164a:	fd cf       	rjmp	.-6      	; 0x1646 <usart_putchar+0x2>
    164c:	60 83       	st	Z, r22
    164e:	80 e0       	ldi	r24, 0x00	; 0
    1650:	90 e0       	ldi	r25, 0x00	; 0
    1652:	08 95       	ret

00001654 <usart_set_baudrate>:
 * \retval true if the hardware supports the baud rate
 * \retval false if the hardware does not support the baud rate (i.e. it's
 *               either too high or too low.)
 */
bool usart_set_baudrate(USART_t *usart, uint32_t baud, uint32_t cpu_hz)
{
    1654:	4f 92       	push	r4
    1656:	5f 92       	push	r5
    1658:	6f 92       	push	r6
    165a:	7f 92       	push	r7
    165c:	8f 92       	push	r8
    165e:	9f 92       	push	r9
    1660:	af 92       	push	r10
    1662:	bf 92       	push	r11
    1664:	cf 92       	push	r12
    1666:	df 92       	push	r13
    1668:	ef 92       	push	r14
    166a:	ff 92       	push	r15
    166c:	0f 93       	push	r16
    166e:	1f 93       	push	r17
    1670:	cf 93       	push	r28
    1672:	df 93       	push	r29
    1674:	ec 01       	movw	r28, r24
    1676:	4a 01       	movw	r8, r20
    1678:	5b 01       	movw	r10, r22
    167a:	28 01       	movw	r4, r16
    167c:	39 01       	movw	r6, r18

	/*
	 * Check if the hardware supports the given baud rate
	 */
	/* 8 = (2^0) * 8 * (2^0) = (2^BSCALE_MIN) * 8 * (BSEL_MIN) */
	max_rate = cpu_hz / 8;
    167e:	d9 01       	movw	r26, r18
    1680:	c8 01       	movw	r24, r16
    1682:	68 94       	set
    1684:	12 f8       	bld	r1, 2
    1686:	b6 95       	lsr	r27
    1688:	a7 95       	ror	r26
    168a:	97 95       	ror	r25
    168c:	87 95       	ror	r24
    168e:	16 94       	lsr	r1
    1690:	d1 f7       	brne	.-12     	; 0x1686 <usart_set_baudrate+0x32>
	/* 4194304 = (2^7) * 8 * (2^12) = (2^BSCALE_MAX) * 8 * (BSEL_MAX+1) */
	min_rate = cpu_hz / 4194304;
    1692:	b9 01       	movw	r22, r18
    1694:	a8 01       	movw	r20, r16
    1696:	03 2e       	mov	r0, r19
    1698:	36 e1       	ldi	r19, 0x16	; 22
    169a:	76 95       	lsr	r23
    169c:	67 95       	ror	r22
    169e:	57 95       	ror	r21
    16a0:	47 95       	ror	r20
    16a2:	3a 95       	dec	r19
    16a4:	d1 f7       	brne	.-12     	; 0x169a <usart_set_baudrate+0x46>
    16a6:	30 2d       	mov	r19, r0

	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    16a8:	2c 81       	ldd	r18, Y+4	; 0x04
    16aa:	22 fd       	sbrc	r18, 2
    16ac:	08 c0       	rjmp	.+16     	; 0x16be <usart_set_baudrate+0x6a>
		max_rate /= 2;
    16ae:	b6 95       	lsr	r27
    16b0:	a7 95       	ror	r26
    16b2:	97 95       	ror	r25
    16b4:	87 95       	ror	r24
		min_rate /= 2;
    16b6:	76 95       	lsr	r23
    16b8:	67 95       	ror	r22
    16ba:	57 95       	ror	r21
    16bc:	47 95       	ror	r20
	}

	if ((baud > max_rate) || (baud < min_rate)) {
    16be:	88 15       	cp	r24, r8
    16c0:	99 05       	cpc	r25, r9
    16c2:	aa 05       	cpc	r26, r10
    16c4:	bb 05       	cpc	r27, r11
    16c6:	08 f4       	brcc	.+2      	; 0x16ca <usart_set_baudrate+0x76>
    16c8:	a2 c0       	rjmp	.+324    	; 0x180e <usart_set_baudrate+0x1ba>
    16ca:	84 16       	cp	r8, r20
    16cc:	95 06       	cpc	r9, r21
    16ce:	a6 06       	cpc	r10, r22
    16d0:	b7 06       	cpc	r11, r23
    16d2:	08 f4       	brcc	.+2      	; 0x16d6 <usart_set_baudrate+0x82>
    16d4:	9e c0       	rjmp	.+316    	; 0x1812 <usart_set_baudrate+0x1be>
		return false;
	}

	/* Check if double speed is enabled. */
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
    16d6:	8c 81       	ldd	r24, Y+4	; 0x04
    16d8:	82 fd       	sbrc	r24, 2
    16da:	04 c0       	rjmp	.+8      	; 0x16e4 <usart_set_baudrate+0x90>
		baud *= 2;
    16dc:	88 0c       	add	r8, r8
    16de:	99 1c       	adc	r9, r9
    16e0:	aa 1c       	adc	r10, r10
    16e2:	bb 1c       	adc	r11, r11
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;
    16e4:	c3 01       	movw	r24, r6
    16e6:	b2 01       	movw	r22, r4
    16e8:	a5 01       	movw	r20, r10
    16ea:	94 01       	movw	r18, r8
    16ec:	12 d3       	rcall	.+1572   	; 0x1d12 <__udivmodsi4>

	for (exp = -7; exp < 7; exp++) {
		if (ratio < limit) {
    16ee:	2f 3f       	cpi	r18, 0xFF	; 255
    16f0:	31 05       	cpc	r19, r1
    16f2:	41 05       	cpc	r20, r1
    16f4:	51 05       	cpc	r21, r1
    16f6:	08 f4       	brcc	.+2      	; 0x16fa <usart_set_baudrate+0xa6>
    16f8:	8e c0       	rjmp	.+284    	; 0x1816 <usart_set_baudrate+0x1c2>
	if (!((usart)->CTRLB & USART_CLK2X_bm)) {
		baud *= 2;
	}

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
    16fa:	c1 2c       	mov	r12, r1
    16fc:	d1 2c       	mov	r13, r1
    16fe:	76 01       	movw	r14, r12
    1700:	ca 94       	dec	r12
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1702:	19 ef       	ldi	r17, 0xF9	; 249
    1704:	05 c0       	rjmp	.+10     	; 0x1710 <usart_set_baudrate+0xbc>
		if (ratio < limit) {
    1706:	2c 15       	cp	r18, r12
    1708:	3d 05       	cpc	r19, r13
    170a:	4e 05       	cpc	r20, r14
    170c:	5f 05       	cpc	r21, r15
    170e:	68 f0       	brcs	.+26     	; 0x172a <usart_set_baudrate+0xd6>
			break;
		}

		limit <<= 1;
    1710:	cc 0c       	add	r12, r12
    1712:	dd 1c       	adc	r13, r13
    1714:	ee 1c       	adc	r14, r14
    1716:	ff 1c       	adc	r15, r15

		if (exp < -3) {
    1718:	1d 3f       	cpi	r17, 0xFD	; 253
    171a:	14 f4       	brge	.+4      	; 0x1720 <usart_set_baudrate+0xcc>
			limit |= 1;
    171c:	68 94       	set
    171e:	c0 f8       	bld	r12, 0

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    1720:	1f 5f       	subi	r17, 0xFF	; 255
    1722:	17 30       	cpi	r17, 0x07	; 7
    1724:	81 f7       	brne	.-32     	; 0x1706 <usart_set_baudrate+0xb2>
    1726:	21 2f       	mov	r18, r17
    1728:	4e c0       	rjmp	.+156    	; 0x17c6 <usart_set_baudrate+0x172>
    172a:	21 2f       	mov	r18, r17
	 * point.
	 *
	 * The formula for calculating BSEL is slightly different when exp is
	 * negative than it is when exp is positive.
	 */
	if (exp < 0) {
    172c:	11 23       	and	r17, r17
    172e:	0c f0       	brlt	.+2      	; 0x1732 <usart_set_baudrate+0xde>
    1730:	4a c0       	rjmp	.+148    	; 0x17c6 <usart_set_baudrate+0x172>
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1732:	d5 01       	movw	r26, r10
    1734:	c4 01       	movw	r24, r8
    1736:	88 0f       	add	r24, r24
    1738:	99 1f       	adc	r25, r25
    173a:	aa 1f       	adc	r26, r26
    173c:	bb 1f       	adc	r27, r27
    173e:	88 0f       	add	r24, r24
    1740:	99 1f       	adc	r25, r25
    1742:	aa 1f       	adc	r26, r26
    1744:	bb 1f       	adc	r27, r27
    1746:	88 0f       	add	r24, r24
    1748:	99 1f       	adc	r25, r25
    174a:	aa 1f       	adc	r26, r26
    174c:	bb 1f       	adc	r27, r27
    174e:	48 1a       	sub	r4, r24
    1750:	59 0a       	sbc	r5, r25
    1752:	6a 0a       	sbc	r6, r26
    1754:	7b 0a       	sbc	r7, r27
		/* If we end up with a left-shift after taking the final
		 * divide-by-8 into account, do the shift before the divide.
		 * Otherwise, left-shift the denominator instead (effectively
		 * resulting in an overall right shift.)
		 */
		if (exp <= -3) {
    1756:	1e 3f       	cpi	r17, 0xFE	; 254
    1758:	ec f4       	brge	.+58     	; 0x1794 <usart_set_baudrate+0x140>
			div = ((cpu_hz << (-exp - 3)) + baud / 2) / baud;
    175a:	6d ef       	ldi	r22, 0xFD	; 253
    175c:	7f ef       	ldi	r23, 0xFF	; 255
    175e:	61 1b       	sub	r22, r17
    1760:	71 09       	sbc	r23, r1
    1762:	17 fd       	sbrc	r17, 7
    1764:	73 95       	inc	r23
    1766:	04 c0       	rjmp	.+8      	; 0x1770 <usart_set_baudrate+0x11c>
    1768:	44 0c       	add	r4, r4
    176a:	55 1c       	adc	r5, r5
    176c:	66 1c       	adc	r6, r6
    176e:	77 1c       	adc	r7, r7
    1770:	6a 95       	dec	r22
    1772:	d2 f7       	brpl	.-12     	; 0x1768 <usart_set_baudrate+0x114>
    1774:	d5 01       	movw	r26, r10
    1776:	c4 01       	movw	r24, r8
    1778:	b6 95       	lsr	r27
    177a:	a7 95       	ror	r26
    177c:	97 95       	ror	r25
    177e:	87 95       	ror	r24
    1780:	bc 01       	movw	r22, r24
    1782:	cd 01       	movw	r24, r26
    1784:	64 0d       	add	r22, r4
    1786:	75 1d       	adc	r23, r5
    1788:	86 1d       	adc	r24, r6
    178a:	97 1d       	adc	r25, r7
    178c:	a5 01       	movw	r20, r10
    178e:	94 01       	movw	r18, r8
    1790:	c0 d2       	rcall	.+1408   	; 0x1d12 <__udivmodsi4>
    1792:	34 c0       	rjmp	.+104    	; 0x17fc <usart_set_baudrate+0x1a8>
		} else {
			baud <<= exp + 3;
    1794:	23 e0       	ldi	r18, 0x03	; 3
    1796:	21 0f       	add	r18, r17
    1798:	d5 01       	movw	r26, r10
    179a:	c4 01       	movw	r24, r8
    179c:	04 c0       	rjmp	.+8      	; 0x17a6 <usart_set_baudrate+0x152>
    179e:	88 0f       	add	r24, r24
    17a0:	99 1f       	adc	r25, r25
    17a2:	aa 1f       	adc	r26, r26
    17a4:	bb 1f       	adc	r27, r27
    17a6:	2a 95       	dec	r18
    17a8:	d2 f7       	brpl	.-12     	; 0x179e <usart_set_baudrate+0x14a>
    17aa:	9c 01       	movw	r18, r24
    17ac:	ad 01       	movw	r20, r26
			div = (cpu_hz + baud / 2) / baud;
    17ae:	b6 95       	lsr	r27
    17b0:	a7 95       	ror	r26
    17b2:	97 95       	ror	r25
    17b4:	87 95       	ror	r24
    17b6:	bc 01       	movw	r22, r24
    17b8:	cd 01       	movw	r24, r26
    17ba:	64 0d       	add	r22, r4
    17bc:	75 1d       	adc	r23, r5
    17be:	86 1d       	adc	r24, r6
    17c0:	97 1d       	adc	r25, r7
    17c2:	a7 d2       	rcall	.+1358   	; 0x1d12 <__udivmodsi4>
    17c4:	1b c0       	rjmp	.+54     	; 0x17fc <usart_set_baudrate+0x1a8>
		}
	} else {
		/* We will always do a right shift in this case, but we need to
		 * shift three extra positions because of the divide-by-8.
		 */
		baud <<= exp + 3;
    17c6:	2d 5f       	subi	r18, 0xFD	; 253
    17c8:	d5 01       	movw	r26, r10
    17ca:	c4 01       	movw	r24, r8
    17cc:	04 c0       	rjmp	.+8      	; 0x17d6 <usart_set_baudrate+0x182>
    17ce:	88 0f       	add	r24, r24
    17d0:	99 1f       	adc	r25, r25
    17d2:	aa 1f       	adc	r26, r26
    17d4:	bb 1f       	adc	r27, r27
    17d6:	2a 95       	dec	r18
    17d8:	d2 f7       	brpl	.-12     	; 0x17ce <usart_set_baudrate+0x17a>
    17da:	9c 01       	movw	r18, r24
    17dc:	ad 01       	movw	r20, r26
		div = (cpu_hz + baud / 2) / baud - 1;
    17de:	b6 95       	lsr	r27
    17e0:	a7 95       	ror	r26
    17e2:	97 95       	ror	r25
    17e4:	87 95       	ror	r24
    17e6:	bc 01       	movw	r22, r24
    17e8:	cd 01       	movw	r24, r26
    17ea:	64 0d       	add	r22, r4
    17ec:	75 1d       	adc	r23, r5
    17ee:	86 1d       	adc	r24, r6
    17f0:	97 1d       	adc	r25, r7
    17f2:	8f d2       	rcall	.+1310   	; 0x1d12 <__udivmodsi4>
    17f4:	21 50       	subi	r18, 0x01	; 1
    17f6:	31 09       	sbc	r19, r1
    17f8:	41 09       	sbc	r20, r1
    17fa:	51 09       	sbc	r21, r1
	}

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
    17fc:	83 2f       	mov	r24, r19
    17fe:	8f 70       	andi	r24, 0x0F	; 15
    1800:	12 95       	swap	r17
    1802:	10 7f       	andi	r17, 0xF0	; 240
    1804:	18 2b       	or	r17, r24
    1806:	1f 83       	std	Y+7, r17	; 0x07
	(usart)->BAUDCTRLA = (uint8_t)div;
    1808:	2e 83       	std	Y+6, r18	; 0x06

	return true;
    180a:	81 e0       	ldi	r24, 0x01	; 1
    180c:	18 c0       	rjmp	.+48     	; 0x183e <usart_set_baudrate+0x1ea>
		max_rate /= 2;
		min_rate /= 2;
	}

	if ((baud > max_rate) || (baud < min_rate)) {
		return false;
    180e:	80 e0       	ldi	r24, 0x00	; 0
    1810:	16 c0       	rjmp	.+44     	; 0x183e <usart_set_baudrate+0x1ea>
    1812:	80 e0       	ldi	r24, 0x00	; 0
    1814:	14 c0       	rjmp	.+40     	; 0x183e <usart_set_baudrate+0x1ea>
	if (exp < 0) {
		/* We are supposed to subtract 1, then apply BSCALE. We want to
		 * apply BSCALE first, so we need to turn everything inside the
		 * parenthesis into a single fractional expression.
		 */
		cpu_hz -= 8 * baud;
    1816:	d5 01       	movw	r26, r10
    1818:	c4 01       	movw	r24, r8
    181a:	88 0f       	add	r24, r24
    181c:	99 1f       	adc	r25, r25
    181e:	aa 1f       	adc	r26, r26
    1820:	bb 1f       	adc	r27, r27
    1822:	88 0f       	add	r24, r24
    1824:	99 1f       	adc	r25, r25
    1826:	aa 1f       	adc	r26, r26
    1828:	bb 1f       	adc	r27, r27
    182a:	88 0f       	add	r24, r24
    182c:	99 1f       	adc	r25, r25
    182e:	aa 1f       	adc	r26, r26
    1830:	bb 1f       	adc	r27, r27
    1832:	48 1a       	sub	r4, r24
    1834:	59 0a       	sbc	r5, r25
    1836:	6a 0a       	sbc	r6, r26
    1838:	7b 0a       	sbc	r7, r27

	/* Find the lowest possible exponent. */
	limit = 0xfffU >> 4;
	ratio = cpu_hz / baud;

	for (exp = -7; exp < 7; exp++) {
    183a:	19 ef       	ldi	r17, 0xF9	; 249
    183c:	8e cf       	rjmp	.-228    	; 0x175a <usart_set_baudrate+0x106>

	(usart)->BAUDCTRLB = (uint8_t)(((div >> 8) & 0X0F) | (exp << 4));
	(usart)->BAUDCTRLA = (uint8_t)div;

	return true;
}
    183e:	df 91       	pop	r29
    1840:	cf 91       	pop	r28
    1842:	1f 91       	pop	r17
    1844:	0f 91       	pop	r16
    1846:	ff 90       	pop	r15
    1848:	ef 90       	pop	r14
    184a:	df 90       	pop	r13
    184c:	cf 90       	pop	r12
    184e:	bf 90       	pop	r11
    1850:	af 90       	pop	r10
    1852:	9f 90       	pop	r9
    1854:	8f 90       	pop	r8
    1856:	7f 90       	pop	r7
    1858:	6f 90       	pop	r6
    185a:	5f 90       	pop	r5
    185c:	4f 90       	pop	r4
    185e:	08 95       	ret

00001860 <main>:
 //uint8_t data_flag=1;  //nmishe tu ye tabe dg bashe?
//  long int countt;
//  long int testt=0;
 int main (void)
 {
	set_micro();
    1860:	a2 d9       	rcall	.-3260   	; 0xba6 <set_micro>
	//NRF_init();
	MS5611_reset();
    1862:	0e 94 ce 03 	call	0x79c	; 0x79c <MS5611_reset>
	MS5611_read_PROM();
    1866:	0e 94 e7 03 	call	0x7ce	; 0x7ce <MS5611_read_PROM>
	//SHT11_softreset();  
	variable_init();
    186a:	b3 d9       	rcall	.-3226   	; 0xbd2 <variable_init>
	
	TCD0_CNT=0;
    186c:	10 92 20 09 	sts	0x0920, r1
    1870:	10 92 21 09 	sts	0x0921, r1

	
	//if(data_flag)
	//{
		//LED_Blue_PORT.OUTTGL = LED_Blue_PIN_bm;
		while (TCD0_CNT!=0x9C3F); //10 ms timer lock. kamesh kon, baraye nrf ziade! (?)
    1874:	c0 e2       	ldi	r28, 0x20	; 32
    1876:	d9 e0       	ldi	r29, 0x09	; 9
    1878:	88 81       	ld	r24, Y
    187a:	99 81       	ldd	r25, Y+1	; 0x01
    187c:	8f 33       	cpi	r24, 0x3F	; 63
    187e:	9c 49       	sbci	r25, 0x9C	; 156
    1880:	d9 f7       	brne	.-10     	; 0x1878 <main+0x18>
		//SHT11_measure();
 		MS5611_measure();
    1882:	73 d8       	rcall	.-3866   	; 0x96a <MS5611_measure>

 //   _delay_us(3);  //dar girande?	 
  
 	 

 }
    1884:	f9 cf       	rjmp	.-14     	; 0x1878 <main+0x18>

00001886 <__vector_13>:
 
 }
 
 
    ISR(TWIC_TWIM_vect) //twi interrupt
    {
    1886:	1f 92       	push	r1
    1888:	0f 92       	push	r0
    188a:	0f b6       	in	r0, 0x3f	; 63
    188c:	0f 92       	push	r0
    188e:	11 24       	eor	r1, r1
    1890:	2f 93       	push	r18
    1892:	3f 93       	push	r19
    1894:	4f 93       	push	r20
    1896:	5f 93       	push	r21
    1898:	6f 93       	push	r22
    189a:	7f 93       	push	r23
    189c:	8f 93       	push	r24
    189e:	9f 93       	push	r25
    18a0:	af 93       	push	r26
    18a2:	bf 93       	push	r27
    18a4:	ef 93       	push	r30
    18a6:	ff 93       	push	r31
    	TWI_MasterInterruptHandler(&twiMaster);
    18a8:	84 e8       	ldi	r24, 0x84	; 132
    18aa:	90 e2       	ldi	r25, 0x20	; 32
    18ac:	60 da       	rcall	.-2880   	; 0xd6e <TWI_MasterInterruptHandler>
    }
    18ae:	ff 91       	pop	r31
    18b0:	ef 91       	pop	r30
    18b2:	bf 91       	pop	r27
    18b4:	af 91       	pop	r26
    18b6:	9f 91       	pop	r25
    18b8:	8f 91       	pop	r24
    18ba:	7f 91       	pop	r23
    18bc:	6f 91       	pop	r22
    18be:	5f 91       	pop	r21
    18c0:	4f 91       	pop	r20
    18c2:	3f 91       	pop	r19
    18c4:	2f 91       	pop	r18
    18c6:	0f 90       	pop	r0
    18c8:	0f be       	out	0x3f, r0	; 63
    18ca:	0f 90       	pop	r0
    18cc:	1f 90       	pop	r1
    18ce:	18 95       	reti

000018d0 <__vector_77>:
 
 
  ISR(TCD0_OVF_vect) //timer interrupt
  {
    18d0:	1f 92       	push	r1
    18d2:	0f 92       	push	r0
    18d4:	0f b6       	in	r0, 0x3f	; 63
    18d6:	0f 92       	push	r0
    18d8:	11 24       	eor	r1, r1
	//LED_Blue_PORT.OUTTGL = LED_Blue_PIN_bm;
	 
  }
    18da:	0f 90       	pop	r0
    18dc:	0f be       	out	0x3f, r0	; 63
    18de:	0f 90       	pop	r0
    18e0:	1f 90       	pop	r1
    18e2:	18 95       	reti

000018e4 <__subsf3>:
    18e4:	50 58       	subi	r21, 0x80	; 128

000018e6 <__addsf3>:
    18e6:	bb 27       	eor	r27, r27
    18e8:	aa 27       	eor	r26, r26
    18ea:	0e d0       	rcall	.+28     	; 0x1908 <__addsf3x>
    18ec:	75 c1       	rjmp	.+746    	; 0x1bd8 <__fp_round>
    18ee:	66 d1       	rcall	.+716    	; 0x1bbc <__fp_pscA>
    18f0:	30 f0       	brcs	.+12     	; 0x18fe <__addsf3+0x18>
    18f2:	6b d1       	rcall	.+726    	; 0x1bca <__fp_pscB>
    18f4:	20 f0       	brcs	.+8      	; 0x18fe <__addsf3+0x18>
    18f6:	31 f4       	brne	.+12     	; 0x1904 <__addsf3+0x1e>
    18f8:	9f 3f       	cpi	r25, 0xFF	; 255
    18fa:	11 f4       	brne	.+4      	; 0x1900 <__addsf3+0x1a>
    18fc:	1e f4       	brtc	.+6      	; 0x1904 <__addsf3+0x1e>
    18fe:	5b c1       	rjmp	.+694    	; 0x1bb6 <__fp_nan>
    1900:	0e f4       	brtc	.+2      	; 0x1904 <__addsf3+0x1e>
    1902:	e0 95       	com	r30
    1904:	e7 fb       	bst	r30, 7
    1906:	51 c1       	rjmp	.+674    	; 0x1baa <__fp_inf>

00001908 <__addsf3x>:
    1908:	e9 2f       	mov	r30, r25
    190a:	77 d1       	rcall	.+750    	; 0x1bfa <__fp_split3>
    190c:	80 f3       	brcs	.-32     	; 0x18ee <__addsf3+0x8>
    190e:	ba 17       	cp	r27, r26
    1910:	62 07       	cpc	r22, r18
    1912:	73 07       	cpc	r23, r19
    1914:	84 07       	cpc	r24, r20
    1916:	95 07       	cpc	r25, r21
    1918:	18 f0       	brcs	.+6      	; 0x1920 <__addsf3x+0x18>
    191a:	71 f4       	brne	.+28     	; 0x1938 <__addsf3x+0x30>
    191c:	9e f5       	brtc	.+102    	; 0x1984 <__addsf3x+0x7c>
    191e:	8f c1       	rjmp	.+798    	; 0x1c3e <__fp_zero>
    1920:	0e f4       	brtc	.+2      	; 0x1924 <__addsf3x+0x1c>
    1922:	e0 95       	com	r30
    1924:	0b 2e       	mov	r0, r27
    1926:	ba 2f       	mov	r27, r26
    1928:	a0 2d       	mov	r26, r0
    192a:	0b 01       	movw	r0, r22
    192c:	b9 01       	movw	r22, r18
    192e:	90 01       	movw	r18, r0
    1930:	0c 01       	movw	r0, r24
    1932:	ca 01       	movw	r24, r20
    1934:	a0 01       	movw	r20, r0
    1936:	11 24       	eor	r1, r1
    1938:	ff 27       	eor	r31, r31
    193a:	59 1b       	sub	r21, r25
    193c:	99 f0       	breq	.+38     	; 0x1964 <__addsf3x+0x5c>
    193e:	59 3f       	cpi	r21, 0xF9	; 249
    1940:	50 f4       	brcc	.+20     	; 0x1956 <__addsf3x+0x4e>
    1942:	50 3e       	cpi	r21, 0xE0	; 224
    1944:	68 f1       	brcs	.+90     	; 0x19a0 <__addsf3x+0x98>
    1946:	1a 16       	cp	r1, r26
    1948:	f0 40       	sbci	r31, 0x00	; 0
    194a:	a2 2f       	mov	r26, r18
    194c:	23 2f       	mov	r18, r19
    194e:	34 2f       	mov	r19, r20
    1950:	44 27       	eor	r20, r20
    1952:	58 5f       	subi	r21, 0xF8	; 248
    1954:	f3 cf       	rjmp	.-26     	; 0x193c <__addsf3x+0x34>
    1956:	46 95       	lsr	r20
    1958:	37 95       	ror	r19
    195a:	27 95       	ror	r18
    195c:	a7 95       	ror	r26
    195e:	f0 40       	sbci	r31, 0x00	; 0
    1960:	53 95       	inc	r21
    1962:	c9 f7       	brne	.-14     	; 0x1956 <__addsf3x+0x4e>
    1964:	7e f4       	brtc	.+30     	; 0x1984 <__addsf3x+0x7c>
    1966:	1f 16       	cp	r1, r31
    1968:	ba 0b       	sbc	r27, r26
    196a:	62 0b       	sbc	r22, r18
    196c:	73 0b       	sbc	r23, r19
    196e:	84 0b       	sbc	r24, r20
    1970:	ba f0       	brmi	.+46     	; 0x19a0 <__addsf3x+0x98>
    1972:	91 50       	subi	r25, 0x01	; 1
    1974:	a1 f0       	breq	.+40     	; 0x199e <__addsf3x+0x96>
    1976:	ff 0f       	add	r31, r31
    1978:	bb 1f       	adc	r27, r27
    197a:	66 1f       	adc	r22, r22
    197c:	77 1f       	adc	r23, r23
    197e:	88 1f       	adc	r24, r24
    1980:	c2 f7       	brpl	.-16     	; 0x1972 <__addsf3x+0x6a>
    1982:	0e c0       	rjmp	.+28     	; 0x19a0 <__addsf3x+0x98>
    1984:	ba 0f       	add	r27, r26
    1986:	62 1f       	adc	r22, r18
    1988:	73 1f       	adc	r23, r19
    198a:	84 1f       	adc	r24, r20
    198c:	48 f4       	brcc	.+18     	; 0x19a0 <__addsf3x+0x98>
    198e:	87 95       	ror	r24
    1990:	77 95       	ror	r23
    1992:	67 95       	ror	r22
    1994:	b7 95       	ror	r27
    1996:	f7 95       	ror	r31
    1998:	9e 3f       	cpi	r25, 0xFE	; 254
    199a:	08 f0       	brcs	.+2      	; 0x199e <__addsf3x+0x96>
    199c:	b3 cf       	rjmp	.-154    	; 0x1904 <__addsf3+0x1e>
    199e:	93 95       	inc	r25
    19a0:	88 0f       	add	r24, r24
    19a2:	08 f0       	brcs	.+2      	; 0x19a6 <__addsf3x+0x9e>
    19a4:	99 27       	eor	r25, r25
    19a6:	ee 0f       	add	r30, r30
    19a8:	97 95       	ror	r25
    19aa:	87 95       	ror	r24
    19ac:	08 95       	ret

000019ae <__cmpsf2>:
    19ae:	d9 d0       	rcall	.+434    	; 0x1b62 <__fp_cmp>
    19b0:	08 f4       	brcc	.+2      	; 0x19b4 <__cmpsf2+0x6>
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	08 95       	ret

000019b6 <__divsf3>:
    19b6:	0c d0       	rcall	.+24     	; 0x19d0 <__divsf3x>
    19b8:	0f c1       	rjmp	.+542    	; 0x1bd8 <__fp_round>
    19ba:	07 d1       	rcall	.+526    	; 0x1bca <__fp_pscB>
    19bc:	40 f0       	brcs	.+16     	; 0x19ce <__divsf3+0x18>
    19be:	fe d0       	rcall	.+508    	; 0x1bbc <__fp_pscA>
    19c0:	30 f0       	brcs	.+12     	; 0x19ce <__divsf3+0x18>
    19c2:	21 f4       	brne	.+8      	; 0x19cc <__divsf3+0x16>
    19c4:	5f 3f       	cpi	r21, 0xFF	; 255
    19c6:	19 f0       	breq	.+6      	; 0x19ce <__divsf3+0x18>
    19c8:	f0 c0       	rjmp	.+480    	; 0x1baa <__fp_inf>
    19ca:	51 11       	cpse	r21, r1
    19cc:	39 c1       	rjmp	.+626    	; 0x1c40 <__fp_szero>
    19ce:	f3 c0       	rjmp	.+486    	; 0x1bb6 <__fp_nan>

000019d0 <__divsf3x>:
    19d0:	14 d1       	rcall	.+552    	; 0x1bfa <__fp_split3>
    19d2:	98 f3       	brcs	.-26     	; 0x19ba <__divsf3+0x4>

000019d4 <__divsf3_pse>:
    19d4:	99 23       	and	r25, r25
    19d6:	c9 f3       	breq	.-14     	; 0x19ca <__divsf3+0x14>
    19d8:	55 23       	and	r21, r21
    19da:	b1 f3       	breq	.-20     	; 0x19c8 <__divsf3+0x12>
    19dc:	95 1b       	sub	r25, r21
    19de:	55 0b       	sbc	r21, r21
    19e0:	bb 27       	eor	r27, r27
    19e2:	aa 27       	eor	r26, r26
    19e4:	62 17       	cp	r22, r18
    19e6:	73 07       	cpc	r23, r19
    19e8:	84 07       	cpc	r24, r20
    19ea:	38 f0       	brcs	.+14     	; 0x19fa <__divsf3_pse+0x26>
    19ec:	9f 5f       	subi	r25, 0xFF	; 255
    19ee:	5f 4f       	sbci	r21, 0xFF	; 255
    19f0:	22 0f       	add	r18, r18
    19f2:	33 1f       	adc	r19, r19
    19f4:	44 1f       	adc	r20, r20
    19f6:	aa 1f       	adc	r26, r26
    19f8:	a9 f3       	breq	.-22     	; 0x19e4 <__divsf3_pse+0x10>
    19fa:	33 d0       	rcall	.+102    	; 0x1a62 <__divsf3_pse+0x8e>
    19fc:	0e 2e       	mov	r0, r30
    19fe:	3a f0       	brmi	.+14     	; 0x1a0e <__divsf3_pse+0x3a>
    1a00:	e0 e8       	ldi	r30, 0x80	; 128
    1a02:	30 d0       	rcall	.+96     	; 0x1a64 <__divsf3_pse+0x90>
    1a04:	91 50       	subi	r25, 0x01	; 1
    1a06:	50 40       	sbci	r21, 0x00	; 0
    1a08:	e6 95       	lsr	r30
    1a0a:	00 1c       	adc	r0, r0
    1a0c:	ca f7       	brpl	.-14     	; 0x1a00 <__divsf3_pse+0x2c>
    1a0e:	29 d0       	rcall	.+82     	; 0x1a62 <__divsf3_pse+0x8e>
    1a10:	fe 2f       	mov	r31, r30
    1a12:	27 d0       	rcall	.+78     	; 0x1a62 <__divsf3_pse+0x8e>
    1a14:	66 0f       	add	r22, r22
    1a16:	77 1f       	adc	r23, r23
    1a18:	88 1f       	adc	r24, r24
    1a1a:	bb 1f       	adc	r27, r27
    1a1c:	26 17       	cp	r18, r22
    1a1e:	37 07       	cpc	r19, r23
    1a20:	48 07       	cpc	r20, r24
    1a22:	ab 07       	cpc	r26, r27
    1a24:	b0 e8       	ldi	r27, 0x80	; 128
    1a26:	09 f0       	breq	.+2      	; 0x1a2a <__divsf3_pse+0x56>
    1a28:	bb 0b       	sbc	r27, r27
    1a2a:	80 2d       	mov	r24, r0
    1a2c:	bf 01       	movw	r22, r30
    1a2e:	ff 27       	eor	r31, r31
    1a30:	93 58       	subi	r25, 0x83	; 131
    1a32:	5f 4f       	sbci	r21, 0xFF	; 255
    1a34:	2a f0       	brmi	.+10     	; 0x1a40 <__divsf3_pse+0x6c>
    1a36:	9e 3f       	cpi	r25, 0xFE	; 254
    1a38:	51 05       	cpc	r21, r1
    1a3a:	68 f0       	brcs	.+26     	; 0x1a56 <__divsf3_pse+0x82>
    1a3c:	b6 c0       	rjmp	.+364    	; 0x1baa <__fp_inf>
    1a3e:	00 c1       	rjmp	.+512    	; 0x1c40 <__fp_szero>
    1a40:	5f 3f       	cpi	r21, 0xFF	; 255
    1a42:	ec f3       	brlt	.-6      	; 0x1a3e <__divsf3_pse+0x6a>
    1a44:	98 3e       	cpi	r25, 0xE8	; 232
    1a46:	dc f3       	brlt	.-10     	; 0x1a3e <__divsf3_pse+0x6a>
    1a48:	86 95       	lsr	r24
    1a4a:	77 95       	ror	r23
    1a4c:	67 95       	ror	r22
    1a4e:	b7 95       	ror	r27
    1a50:	f7 95       	ror	r31
    1a52:	9f 5f       	subi	r25, 0xFF	; 255
    1a54:	c9 f7       	brne	.-14     	; 0x1a48 <__divsf3_pse+0x74>
    1a56:	88 0f       	add	r24, r24
    1a58:	91 1d       	adc	r25, r1
    1a5a:	96 95       	lsr	r25
    1a5c:	87 95       	ror	r24
    1a5e:	97 f9       	bld	r25, 7
    1a60:	08 95       	ret
    1a62:	e1 e0       	ldi	r30, 0x01	; 1
    1a64:	66 0f       	add	r22, r22
    1a66:	77 1f       	adc	r23, r23
    1a68:	88 1f       	adc	r24, r24
    1a6a:	bb 1f       	adc	r27, r27
    1a6c:	62 17       	cp	r22, r18
    1a6e:	73 07       	cpc	r23, r19
    1a70:	84 07       	cpc	r24, r20
    1a72:	ba 07       	cpc	r27, r26
    1a74:	20 f0       	brcs	.+8      	; 0x1a7e <__divsf3_pse+0xaa>
    1a76:	62 1b       	sub	r22, r18
    1a78:	73 0b       	sbc	r23, r19
    1a7a:	84 0b       	sbc	r24, r20
    1a7c:	ba 0b       	sbc	r27, r26
    1a7e:	ee 1f       	adc	r30, r30
    1a80:	88 f7       	brcc	.-30     	; 0x1a64 <__divsf3_pse+0x90>
    1a82:	e0 95       	com	r30
    1a84:	08 95       	ret

00001a86 <__fixsfsi>:
    1a86:	04 d0       	rcall	.+8      	; 0x1a90 <__fixunssfsi>
    1a88:	68 94       	set
    1a8a:	b1 11       	cpse	r27, r1
    1a8c:	d9 c0       	rjmp	.+434    	; 0x1c40 <__fp_szero>
    1a8e:	08 95       	ret

00001a90 <__fixunssfsi>:
    1a90:	bc d0       	rcall	.+376    	; 0x1c0a <__fp_splitA>
    1a92:	88 f0       	brcs	.+34     	; 0x1ab6 <__fixunssfsi+0x26>
    1a94:	9f 57       	subi	r25, 0x7F	; 127
    1a96:	90 f0       	brcs	.+36     	; 0x1abc <__fixunssfsi+0x2c>
    1a98:	b9 2f       	mov	r27, r25
    1a9a:	99 27       	eor	r25, r25
    1a9c:	b7 51       	subi	r27, 0x17	; 23
    1a9e:	a0 f0       	brcs	.+40     	; 0x1ac8 <__fixunssfsi+0x38>
    1aa0:	d1 f0       	breq	.+52     	; 0x1ad6 <__fixunssfsi+0x46>
    1aa2:	66 0f       	add	r22, r22
    1aa4:	77 1f       	adc	r23, r23
    1aa6:	88 1f       	adc	r24, r24
    1aa8:	99 1f       	adc	r25, r25
    1aaa:	1a f0       	brmi	.+6      	; 0x1ab2 <__fixunssfsi+0x22>
    1aac:	ba 95       	dec	r27
    1aae:	c9 f7       	brne	.-14     	; 0x1aa2 <__fixunssfsi+0x12>
    1ab0:	12 c0       	rjmp	.+36     	; 0x1ad6 <__fixunssfsi+0x46>
    1ab2:	b1 30       	cpi	r27, 0x01	; 1
    1ab4:	81 f0       	breq	.+32     	; 0x1ad6 <__fixunssfsi+0x46>
    1ab6:	c3 d0       	rcall	.+390    	; 0x1c3e <__fp_zero>
    1ab8:	b1 e0       	ldi	r27, 0x01	; 1
    1aba:	08 95       	ret
    1abc:	c0 c0       	rjmp	.+384    	; 0x1c3e <__fp_zero>
    1abe:	67 2f       	mov	r22, r23
    1ac0:	78 2f       	mov	r23, r24
    1ac2:	88 27       	eor	r24, r24
    1ac4:	b8 5f       	subi	r27, 0xF8	; 248
    1ac6:	39 f0       	breq	.+14     	; 0x1ad6 <__fixunssfsi+0x46>
    1ac8:	b9 3f       	cpi	r27, 0xF9	; 249
    1aca:	cc f3       	brlt	.-14     	; 0x1abe <__fixunssfsi+0x2e>
    1acc:	86 95       	lsr	r24
    1ace:	77 95       	ror	r23
    1ad0:	67 95       	ror	r22
    1ad2:	b3 95       	inc	r27
    1ad4:	d9 f7       	brne	.-10     	; 0x1acc <__fixunssfsi+0x3c>
    1ad6:	3e f4       	brtc	.+14     	; 0x1ae6 <__fixunssfsi+0x56>
    1ad8:	90 95       	com	r25
    1ada:	80 95       	com	r24
    1adc:	70 95       	com	r23
    1ade:	61 95       	neg	r22
    1ae0:	7f 4f       	sbci	r23, 0xFF	; 255
    1ae2:	8f 4f       	sbci	r24, 0xFF	; 255
    1ae4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ae6:	08 95       	ret

00001ae8 <__floatunsisf>:
    1ae8:	e8 94       	clt
    1aea:	09 c0       	rjmp	.+18     	; 0x1afe <__floatsisf+0x12>

00001aec <__floatsisf>:
    1aec:	97 fb       	bst	r25, 7
    1aee:	3e f4       	brtc	.+14     	; 0x1afe <__floatsisf+0x12>
    1af0:	90 95       	com	r25
    1af2:	80 95       	com	r24
    1af4:	70 95       	com	r23
    1af6:	61 95       	neg	r22
    1af8:	7f 4f       	sbci	r23, 0xFF	; 255
    1afa:	8f 4f       	sbci	r24, 0xFF	; 255
    1afc:	9f 4f       	sbci	r25, 0xFF	; 255
    1afe:	99 23       	and	r25, r25
    1b00:	a9 f0       	breq	.+42     	; 0x1b2c <__floatsisf+0x40>
    1b02:	f9 2f       	mov	r31, r25
    1b04:	96 e9       	ldi	r25, 0x96	; 150
    1b06:	bb 27       	eor	r27, r27
    1b08:	93 95       	inc	r25
    1b0a:	f6 95       	lsr	r31
    1b0c:	87 95       	ror	r24
    1b0e:	77 95       	ror	r23
    1b10:	67 95       	ror	r22
    1b12:	b7 95       	ror	r27
    1b14:	f1 11       	cpse	r31, r1
    1b16:	f8 cf       	rjmp	.-16     	; 0x1b08 <__floatsisf+0x1c>
    1b18:	fa f4       	brpl	.+62     	; 0x1b58 <__floatsisf+0x6c>
    1b1a:	bb 0f       	add	r27, r27
    1b1c:	11 f4       	brne	.+4      	; 0x1b22 <__floatsisf+0x36>
    1b1e:	60 ff       	sbrs	r22, 0
    1b20:	1b c0       	rjmp	.+54     	; 0x1b58 <__floatsisf+0x6c>
    1b22:	6f 5f       	subi	r22, 0xFF	; 255
    1b24:	7f 4f       	sbci	r23, 0xFF	; 255
    1b26:	8f 4f       	sbci	r24, 0xFF	; 255
    1b28:	9f 4f       	sbci	r25, 0xFF	; 255
    1b2a:	16 c0       	rjmp	.+44     	; 0x1b58 <__floatsisf+0x6c>
    1b2c:	88 23       	and	r24, r24
    1b2e:	11 f0       	breq	.+4      	; 0x1b34 <__floatsisf+0x48>
    1b30:	96 e9       	ldi	r25, 0x96	; 150
    1b32:	11 c0       	rjmp	.+34     	; 0x1b56 <__floatsisf+0x6a>
    1b34:	77 23       	and	r23, r23
    1b36:	21 f0       	breq	.+8      	; 0x1b40 <__floatsisf+0x54>
    1b38:	9e e8       	ldi	r25, 0x8E	; 142
    1b3a:	87 2f       	mov	r24, r23
    1b3c:	76 2f       	mov	r23, r22
    1b3e:	05 c0       	rjmp	.+10     	; 0x1b4a <__floatsisf+0x5e>
    1b40:	66 23       	and	r22, r22
    1b42:	71 f0       	breq	.+28     	; 0x1b60 <__floatsisf+0x74>
    1b44:	96 e8       	ldi	r25, 0x86	; 134
    1b46:	86 2f       	mov	r24, r22
    1b48:	70 e0       	ldi	r23, 0x00	; 0
    1b4a:	60 e0       	ldi	r22, 0x00	; 0
    1b4c:	2a f0       	brmi	.+10     	; 0x1b58 <__floatsisf+0x6c>
    1b4e:	9a 95       	dec	r25
    1b50:	66 0f       	add	r22, r22
    1b52:	77 1f       	adc	r23, r23
    1b54:	88 1f       	adc	r24, r24
    1b56:	da f7       	brpl	.-10     	; 0x1b4e <__floatsisf+0x62>
    1b58:	88 0f       	add	r24, r24
    1b5a:	96 95       	lsr	r25
    1b5c:	87 95       	ror	r24
    1b5e:	97 f9       	bld	r25, 7
    1b60:	08 95       	ret

00001b62 <__fp_cmp>:
    1b62:	99 0f       	add	r25, r25
    1b64:	00 08       	sbc	r0, r0
    1b66:	55 0f       	add	r21, r21
    1b68:	aa 0b       	sbc	r26, r26
    1b6a:	e0 e8       	ldi	r30, 0x80	; 128
    1b6c:	fe ef       	ldi	r31, 0xFE	; 254
    1b6e:	16 16       	cp	r1, r22
    1b70:	17 06       	cpc	r1, r23
    1b72:	e8 07       	cpc	r30, r24
    1b74:	f9 07       	cpc	r31, r25
    1b76:	c0 f0       	brcs	.+48     	; 0x1ba8 <__fp_cmp+0x46>
    1b78:	12 16       	cp	r1, r18
    1b7a:	13 06       	cpc	r1, r19
    1b7c:	e4 07       	cpc	r30, r20
    1b7e:	f5 07       	cpc	r31, r21
    1b80:	98 f0       	brcs	.+38     	; 0x1ba8 <__fp_cmp+0x46>
    1b82:	62 1b       	sub	r22, r18
    1b84:	73 0b       	sbc	r23, r19
    1b86:	84 0b       	sbc	r24, r20
    1b88:	95 0b       	sbc	r25, r21
    1b8a:	39 f4       	brne	.+14     	; 0x1b9a <__fp_cmp+0x38>
    1b8c:	0a 26       	eor	r0, r26
    1b8e:	61 f0       	breq	.+24     	; 0x1ba8 <__fp_cmp+0x46>
    1b90:	23 2b       	or	r18, r19
    1b92:	24 2b       	or	r18, r20
    1b94:	25 2b       	or	r18, r21
    1b96:	21 f4       	brne	.+8      	; 0x1ba0 <__fp_cmp+0x3e>
    1b98:	08 95       	ret
    1b9a:	0a 26       	eor	r0, r26
    1b9c:	09 f4       	brne	.+2      	; 0x1ba0 <__fp_cmp+0x3e>
    1b9e:	a1 40       	sbci	r26, 0x01	; 1
    1ba0:	a6 95       	lsr	r26
    1ba2:	8f ef       	ldi	r24, 0xFF	; 255
    1ba4:	81 1d       	adc	r24, r1
    1ba6:	81 1d       	adc	r24, r1
    1ba8:	08 95       	ret

00001baa <__fp_inf>:
    1baa:	97 f9       	bld	r25, 7
    1bac:	9f 67       	ori	r25, 0x7F	; 127
    1bae:	80 e8       	ldi	r24, 0x80	; 128
    1bb0:	70 e0       	ldi	r23, 0x00	; 0
    1bb2:	60 e0       	ldi	r22, 0x00	; 0
    1bb4:	08 95       	ret

00001bb6 <__fp_nan>:
    1bb6:	9f ef       	ldi	r25, 0xFF	; 255
    1bb8:	80 ec       	ldi	r24, 0xC0	; 192
    1bba:	08 95       	ret

00001bbc <__fp_pscA>:
    1bbc:	00 24       	eor	r0, r0
    1bbe:	0a 94       	dec	r0
    1bc0:	16 16       	cp	r1, r22
    1bc2:	17 06       	cpc	r1, r23
    1bc4:	18 06       	cpc	r1, r24
    1bc6:	09 06       	cpc	r0, r25
    1bc8:	08 95       	ret

00001bca <__fp_pscB>:
    1bca:	00 24       	eor	r0, r0
    1bcc:	0a 94       	dec	r0
    1bce:	12 16       	cp	r1, r18
    1bd0:	13 06       	cpc	r1, r19
    1bd2:	14 06       	cpc	r1, r20
    1bd4:	05 06       	cpc	r0, r21
    1bd6:	08 95       	ret

00001bd8 <__fp_round>:
    1bd8:	09 2e       	mov	r0, r25
    1bda:	03 94       	inc	r0
    1bdc:	00 0c       	add	r0, r0
    1bde:	11 f4       	brne	.+4      	; 0x1be4 <__fp_round+0xc>
    1be0:	88 23       	and	r24, r24
    1be2:	52 f0       	brmi	.+20     	; 0x1bf8 <__fp_round+0x20>
    1be4:	bb 0f       	add	r27, r27
    1be6:	40 f4       	brcc	.+16     	; 0x1bf8 <__fp_round+0x20>
    1be8:	bf 2b       	or	r27, r31
    1bea:	11 f4       	brne	.+4      	; 0x1bf0 <__fp_round+0x18>
    1bec:	60 ff       	sbrs	r22, 0
    1bee:	04 c0       	rjmp	.+8      	; 0x1bf8 <__fp_round+0x20>
    1bf0:	6f 5f       	subi	r22, 0xFF	; 255
    1bf2:	7f 4f       	sbci	r23, 0xFF	; 255
    1bf4:	8f 4f       	sbci	r24, 0xFF	; 255
    1bf6:	9f 4f       	sbci	r25, 0xFF	; 255
    1bf8:	08 95       	ret

00001bfa <__fp_split3>:
    1bfa:	57 fd       	sbrc	r21, 7
    1bfc:	90 58       	subi	r25, 0x80	; 128
    1bfe:	44 0f       	add	r20, r20
    1c00:	55 1f       	adc	r21, r21
    1c02:	59 f0       	breq	.+22     	; 0x1c1a <__fp_splitA+0x10>
    1c04:	5f 3f       	cpi	r21, 0xFF	; 255
    1c06:	71 f0       	breq	.+28     	; 0x1c24 <__fp_splitA+0x1a>
    1c08:	47 95       	ror	r20

00001c0a <__fp_splitA>:
    1c0a:	88 0f       	add	r24, r24
    1c0c:	97 fb       	bst	r25, 7
    1c0e:	99 1f       	adc	r25, r25
    1c10:	61 f0       	breq	.+24     	; 0x1c2a <__fp_splitA+0x20>
    1c12:	9f 3f       	cpi	r25, 0xFF	; 255
    1c14:	79 f0       	breq	.+30     	; 0x1c34 <__fp_splitA+0x2a>
    1c16:	87 95       	ror	r24
    1c18:	08 95       	ret
    1c1a:	12 16       	cp	r1, r18
    1c1c:	13 06       	cpc	r1, r19
    1c1e:	14 06       	cpc	r1, r20
    1c20:	55 1f       	adc	r21, r21
    1c22:	f2 cf       	rjmp	.-28     	; 0x1c08 <__fp_split3+0xe>
    1c24:	46 95       	lsr	r20
    1c26:	f1 df       	rcall	.-30     	; 0x1c0a <__fp_splitA>
    1c28:	08 c0       	rjmp	.+16     	; 0x1c3a <__fp_splitA+0x30>
    1c2a:	16 16       	cp	r1, r22
    1c2c:	17 06       	cpc	r1, r23
    1c2e:	18 06       	cpc	r1, r24
    1c30:	99 1f       	adc	r25, r25
    1c32:	f1 cf       	rjmp	.-30     	; 0x1c16 <__fp_splitA+0xc>
    1c34:	86 95       	lsr	r24
    1c36:	71 05       	cpc	r23, r1
    1c38:	61 05       	cpc	r22, r1
    1c3a:	08 94       	sec
    1c3c:	08 95       	ret

00001c3e <__fp_zero>:
    1c3e:	e8 94       	clt

00001c40 <__fp_szero>:
    1c40:	bb 27       	eor	r27, r27
    1c42:	66 27       	eor	r22, r22
    1c44:	77 27       	eor	r23, r23
    1c46:	cb 01       	movw	r24, r22
    1c48:	97 f9       	bld	r25, 7
    1c4a:	08 95       	ret

00001c4c <__mulsf3>:
    1c4c:	0b d0       	rcall	.+22     	; 0x1c64 <__mulsf3x>
    1c4e:	c4 cf       	rjmp	.-120    	; 0x1bd8 <__fp_round>
    1c50:	b5 df       	rcall	.-150    	; 0x1bbc <__fp_pscA>
    1c52:	28 f0       	brcs	.+10     	; 0x1c5e <__mulsf3+0x12>
    1c54:	ba df       	rcall	.-140    	; 0x1bca <__fp_pscB>
    1c56:	18 f0       	brcs	.+6      	; 0x1c5e <__mulsf3+0x12>
    1c58:	95 23       	and	r25, r21
    1c5a:	09 f0       	breq	.+2      	; 0x1c5e <__mulsf3+0x12>
    1c5c:	a6 cf       	rjmp	.-180    	; 0x1baa <__fp_inf>
    1c5e:	ab cf       	rjmp	.-170    	; 0x1bb6 <__fp_nan>
    1c60:	11 24       	eor	r1, r1
    1c62:	ee cf       	rjmp	.-36     	; 0x1c40 <__fp_szero>

00001c64 <__mulsf3x>:
    1c64:	ca df       	rcall	.-108    	; 0x1bfa <__fp_split3>
    1c66:	a0 f3       	brcs	.-24     	; 0x1c50 <__mulsf3+0x4>

00001c68 <__mulsf3_pse>:
    1c68:	95 9f       	mul	r25, r21
    1c6a:	d1 f3       	breq	.-12     	; 0x1c60 <__mulsf3+0x14>
    1c6c:	95 0f       	add	r25, r21
    1c6e:	50 e0       	ldi	r21, 0x00	; 0
    1c70:	55 1f       	adc	r21, r21
    1c72:	62 9f       	mul	r22, r18
    1c74:	f0 01       	movw	r30, r0
    1c76:	72 9f       	mul	r23, r18
    1c78:	bb 27       	eor	r27, r27
    1c7a:	f0 0d       	add	r31, r0
    1c7c:	b1 1d       	adc	r27, r1
    1c7e:	63 9f       	mul	r22, r19
    1c80:	aa 27       	eor	r26, r26
    1c82:	f0 0d       	add	r31, r0
    1c84:	b1 1d       	adc	r27, r1
    1c86:	aa 1f       	adc	r26, r26
    1c88:	64 9f       	mul	r22, r20
    1c8a:	66 27       	eor	r22, r22
    1c8c:	b0 0d       	add	r27, r0
    1c8e:	a1 1d       	adc	r26, r1
    1c90:	66 1f       	adc	r22, r22
    1c92:	82 9f       	mul	r24, r18
    1c94:	22 27       	eor	r18, r18
    1c96:	b0 0d       	add	r27, r0
    1c98:	a1 1d       	adc	r26, r1
    1c9a:	62 1f       	adc	r22, r18
    1c9c:	73 9f       	mul	r23, r19
    1c9e:	b0 0d       	add	r27, r0
    1ca0:	a1 1d       	adc	r26, r1
    1ca2:	62 1f       	adc	r22, r18
    1ca4:	83 9f       	mul	r24, r19
    1ca6:	a0 0d       	add	r26, r0
    1ca8:	61 1d       	adc	r22, r1
    1caa:	22 1f       	adc	r18, r18
    1cac:	74 9f       	mul	r23, r20
    1cae:	33 27       	eor	r19, r19
    1cb0:	a0 0d       	add	r26, r0
    1cb2:	61 1d       	adc	r22, r1
    1cb4:	23 1f       	adc	r18, r19
    1cb6:	84 9f       	mul	r24, r20
    1cb8:	60 0d       	add	r22, r0
    1cba:	21 1d       	adc	r18, r1
    1cbc:	82 2f       	mov	r24, r18
    1cbe:	76 2f       	mov	r23, r22
    1cc0:	6a 2f       	mov	r22, r26
    1cc2:	11 24       	eor	r1, r1
    1cc4:	9f 57       	subi	r25, 0x7F	; 127
    1cc6:	50 40       	sbci	r21, 0x00	; 0
    1cc8:	8a f0       	brmi	.+34     	; 0x1cec <__mulsf3_pse+0x84>
    1cca:	e1 f0       	breq	.+56     	; 0x1d04 <__mulsf3_pse+0x9c>
    1ccc:	88 23       	and	r24, r24
    1cce:	4a f0       	brmi	.+18     	; 0x1ce2 <__mulsf3_pse+0x7a>
    1cd0:	ee 0f       	add	r30, r30
    1cd2:	ff 1f       	adc	r31, r31
    1cd4:	bb 1f       	adc	r27, r27
    1cd6:	66 1f       	adc	r22, r22
    1cd8:	77 1f       	adc	r23, r23
    1cda:	88 1f       	adc	r24, r24
    1cdc:	91 50       	subi	r25, 0x01	; 1
    1cde:	50 40       	sbci	r21, 0x00	; 0
    1ce0:	a9 f7       	brne	.-22     	; 0x1ccc <__mulsf3_pse+0x64>
    1ce2:	9e 3f       	cpi	r25, 0xFE	; 254
    1ce4:	51 05       	cpc	r21, r1
    1ce6:	70 f0       	brcs	.+28     	; 0x1d04 <__mulsf3_pse+0x9c>
    1ce8:	60 cf       	rjmp	.-320    	; 0x1baa <__fp_inf>
    1cea:	aa cf       	rjmp	.-172    	; 0x1c40 <__fp_szero>
    1cec:	5f 3f       	cpi	r21, 0xFF	; 255
    1cee:	ec f3       	brlt	.-6      	; 0x1cea <__mulsf3_pse+0x82>
    1cf0:	98 3e       	cpi	r25, 0xE8	; 232
    1cf2:	dc f3       	brlt	.-10     	; 0x1cea <__mulsf3_pse+0x82>
    1cf4:	86 95       	lsr	r24
    1cf6:	77 95       	ror	r23
    1cf8:	67 95       	ror	r22
    1cfa:	b7 95       	ror	r27
    1cfc:	f7 95       	ror	r31
    1cfe:	e7 95       	ror	r30
    1d00:	9f 5f       	subi	r25, 0xFF	; 255
    1d02:	c1 f7       	brne	.-16     	; 0x1cf4 <__mulsf3_pse+0x8c>
    1d04:	fe 2b       	or	r31, r30
    1d06:	88 0f       	add	r24, r24
    1d08:	91 1d       	adc	r25, r1
    1d0a:	96 95       	lsr	r25
    1d0c:	87 95       	ror	r24
    1d0e:	97 f9       	bld	r25, 7
    1d10:	08 95       	ret

00001d12 <__udivmodsi4>:
    1d12:	a1 e2       	ldi	r26, 0x21	; 33
    1d14:	1a 2e       	mov	r1, r26
    1d16:	aa 1b       	sub	r26, r26
    1d18:	bb 1b       	sub	r27, r27
    1d1a:	fd 01       	movw	r30, r26
    1d1c:	0d c0       	rjmp	.+26     	; 0x1d38 <__udivmodsi4_ep>

00001d1e <__udivmodsi4_loop>:
    1d1e:	aa 1f       	adc	r26, r26
    1d20:	bb 1f       	adc	r27, r27
    1d22:	ee 1f       	adc	r30, r30
    1d24:	ff 1f       	adc	r31, r31
    1d26:	a2 17       	cp	r26, r18
    1d28:	b3 07       	cpc	r27, r19
    1d2a:	e4 07       	cpc	r30, r20
    1d2c:	f5 07       	cpc	r31, r21
    1d2e:	20 f0       	brcs	.+8      	; 0x1d38 <__udivmodsi4_ep>
    1d30:	a2 1b       	sub	r26, r18
    1d32:	b3 0b       	sbc	r27, r19
    1d34:	e4 0b       	sbc	r30, r20
    1d36:	f5 0b       	sbc	r31, r21

00001d38 <__udivmodsi4_ep>:
    1d38:	66 1f       	adc	r22, r22
    1d3a:	77 1f       	adc	r23, r23
    1d3c:	88 1f       	adc	r24, r24
    1d3e:	99 1f       	adc	r25, r25
    1d40:	1a 94       	dec	r1
    1d42:	69 f7       	brne	.-38     	; 0x1d1e <__udivmodsi4_loop>
    1d44:	60 95       	com	r22
    1d46:	70 95       	com	r23
    1d48:	80 95       	com	r24
    1d4a:	90 95       	com	r25
    1d4c:	9b 01       	movw	r18, r22
    1d4e:	ac 01       	movw	r20, r24
    1d50:	bd 01       	movw	r22, r26
    1d52:	cf 01       	movw	r24, r30
    1d54:	08 95       	ret

00001d56 <sprintf>:
    1d56:	ae e0       	ldi	r26, 0x0E	; 14
    1d58:	b0 e0       	ldi	r27, 0x00	; 0
    1d5a:	e0 eb       	ldi	r30, 0xB0	; 176
    1d5c:	fe e0       	ldi	r31, 0x0E	; 14
    1d5e:	91 c2       	rjmp	.+1314   	; 0x2282 <__prologue_saves__+0x1c>
    1d60:	0d 89       	ldd	r16, Y+21	; 0x15
    1d62:	1e 89       	ldd	r17, Y+22	; 0x16
    1d64:	86 e0       	ldi	r24, 0x06	; 6
    1d66:	8c 83       	std	Y+4, r24	; 0x04
    1d68:	09 83       	std	Y+1, r16	; 0x01
    1d6a:	1a 83       	std	Y+2, r17	; 0x02
    1d6c:	8f ef       	ldi	r24, 0xFF	; 255
    1d6e:	9f e7       	ldi	r25, 0x7F	; 127
    1d70:	8d 83       	std	Y+5, r24	; 0x05
    1d72:	9e 83       	std	Y+6, r25	; 0x06
    1d74:	ae 01       	movw	r20, r28
    1d76:	47 5e       	subi	r20, 0xE7	; 231
    1d78:	5f 4f       	sbci	r21, 0xFF	; 255
    1d7a:	6f 89       	ldd	r22, Y+23	; 0x17
    1d7c:	78 8d       	ldd	r23, Y+24	; 0x18
    1d7e:	ce 01       	movw	r24, r28
    1d80:	01 96       	adiw	r24, 0x01	; 1
    1d82:	08 d0       	rcall	.+16     	; 0x1d94 <vfprintf>
    1d84:	ef 81       	ldd	r30, Y+7	; 0x07
    1d86:	f8 85       	ldd	r31, Y+8	; 0x08
    1d88:	e0 0f       	add	r30, r16
    1d8a:	f1 1f       	adc	r31, r17
    1d8c:	10 82       	st	Z, r1
    1d8e:	2e 96       	adiw	r28, 0x0e	; 14
    1d90:	e4 e0       	ldi	r30, 0x04	; 4
    1d92:	90 c2       	rjmp	.+1312   	; 0x22b4 <__epilogue_restores__+0x1c>

00001d94 <vfprintf>:
    1d94:	ac e0       	ldi	r26, 0x0C	; 12
    1d96:	b0 e0       	ldi	r27, 0x00	; 0
    1d98:	ef ec       	ldi	r30, 0xCF	; 207
    1d9a:	fe e0       	ldi	r31, 0x0E	; 14
    1d9c:	64 c2       	rjmp	.+1224   	; 0x2266 <__prologue_saves__>
    1d9e:	7c 01       	movw	r14, r24
    1da0:	6b 01       	movw	r12, r22
    1da2:	8a 01       	movw	r16, r20
    1da4:	fc 01       	movw	r30, r24
    1da6:	16 82       	std	Z+6, r1	; 0x06
    1da8:	17 82       	std	Z+7, r1	; 0x07
    1daa:	83 81       	ldd	r24, Z+3	; 0x03
    1dac:	81 ff       	sbrs	r24, 1
    1dae:	b0 c1       	rjmp	.+864    	; 0x2110 <vfprintf+0x37c>
    1db0:	ce 01       	movw	r24, r28
    1db2:	01 96       	adiw	r24, 0x01	; 1
    1db4:	4c 01       	movw	r8, r24
    1db6:	f7 01       	movw	r30, r14
    1db8:	93 81       	ldd	r25, Z+3	; 0x03
    1dba:	f6 01       	movw	r30, r12
    1dbc:	93 fd       	sbrc	r25, 3
    1dbe:	85 91       	lpm	r24, Z+
    1dc0:	93 ff       	sbrs	r25, 3
    1dc2:	81 91       	ld	r24, Z+
    1dc4:	6f 01       	movw	r12, r30
    1dc6:	88 23       	and	r24, r24
    1dc8:	09 f4       	brne	.+2      	; 0x1dcc <vfprintf+0x38>
    1dca:	9e c1       	rjmp	.+828    	; 0x2108 <vfprintf+0x374>
    1dcc:	85 32       	cpi	r24, 0x25	; 37
    1dce:	39 f4       	brne	.+14     	; 0x1dde <vfprintf+0x4a>
    1dd0:	93 fd       	sbrc	r25, 3
    1dd2:	85 91       	lpm	r24, Z+
    1dd4:	93 ff       	sbrs	r25, 3
    1dd6:	81 91       	ld	r24, Z+
    1dd8:	6f 01       	movw	r12, r30
    1dda:	85 32       	cpi	r24, 0x25	; 37
    1ddc:	21 f4       	brne	.+8      	; 0x1de6 <vfprintf+0x52>
    1dde:	b7 01       	movw	r22, r14
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	b1 d1       	rcall	.+866    	; 0x2146 <fputc>
    1de4:	e8 cf       	rjmp	.-48     	; 0x1db6 <vfprintf+0x22>
    1de6:	51 2c       	mov	r5, r1
    1de8:	31 2c       	mov	r3, r1
    1dea:	20 e0       	ldi	r18, 0x00	; 0
    1dec:	20 32       	cpi	r18, 0x20	; 32
    1dee:	a0 f4       	brcc	.+40     	; 0x1e18 <vfprintf+0x84>
    1df0:	8b 32       	cpi	r24, 0x2B	; 43
    1df2:	69 f0       	breq	.+26     	; 0x1e0e <vfprintf+0x7a>
    1df4:	30 f4       	brcc	.+12     	; 0x1e02 <vfprintf+0x6e>
    1df6:	80 32       	cpi	r24, 0x20	; 32
    1df8:	59 f0       	breq	.+22     	; 0x1e10 <vfprintf+0x7c>
    1dfa:	83 32       	cpi	r24, 0x23	; 35
    1dfc:	69 f4       	brne	.+26     	; 0x1e18 <vfprintf+0x84>
    1dfe:	20 61       	ori	r18, 0x10	; 16
    1e00:	2c c0       	rjmp	.+88     	; 0x1e5a <vfprintf+0xc6>
    1e02:	8d 32       	cpi	r24, 0x2D	; 45
    1e04:	39 f0       	breq	.+14     	; 0x1e14 <vfprintf+0x80>
    1e06:	80 33       	cpi	r24, 0x30	; 48
    1e08:	39 f4       	brne	.+14     	; 0x1e18 <vfprintf+0x84>
    1e0a:	21 60       	ori	r18, 0x01	; 1
    1e0c:	26 c0       	rjmp	.+76     	; 0x1e5a <vfprintf+0xc6>
    1e0e:	22 60       	ori	r18, 0x02	; 2
    1e10:	24 60       	ori	r18, 0x04	; 4
    1e12:	23 c0       	rjmp	.+70     	; 0x1e5a <vfprintf+0xc6>
    1e14:	28 60       	ori	r18, 0x08	; 8
    1e16:	21 c0       	rjmp	.+66     	; 0x1e5a <vfprintf+0xc6>
    1e18:	27 fd       	sbrc	r18, 7
    1e1a:	27 c0       	rjmp	.+78     	; 0x1e6a <vfprintf+0xd6>
    1e1c:	30 ed       	ldi	r19, 0xD0	; 208
    1e1e:	38 0f       	add	r19, r24
    1e20:	3a 30       	cpi	r19, 0x0A	; 10
    1e22:	78 f4       	brcc	.+30     	; 0x1e42 <vfprintf+0xae>
    1e24:	26 ff       	sbrs	r18, 6
    1e26:	06 c0       	rjmp	.+12     	; 0x1e34 <vfprintf+0xa0>
    1e28:	fa e0       	ldi	r31, 0x0A	; 10
    1e2a:	5f 9e       	mul	r5, r31
    1e2c:	30 0d       	add	r19, r0
    1e2e:	11 24       	eor	r1, r1
    1e30:	53 2e       	mov	r5, r19
    1e32:	13 c0       	rjmp	.+38     	; 0x1e5a <vfprintf+0xc6>
    1e34:	8a e0       	ldi	r24, 0x0A	; 10
    1e36:	38 9e       	mul	r3, r24
    1e38:	30 0d       	add	r19, r0
    1e3a:	11 24       	eor	r1, r1
    1e3c:	33 2e       	mov	r3, r19
    1e3e:	20 62       	ori	r18, 0x20	; 32
    1e40:	0c c0       	rjmp	.+24     	; 0x1e5a <vfprintf+0xc6>
    1e42:	8e 32       	cpi	r24, 0x2E	; 46
    1e44:	21 f4       	brne	.+8      	; 0x1e4e <vfprintf+0xba>
    1e46:	26 fd       	sbrc	r18, 6
    1e48:	5f c1       	rjmp	.+702    	; 0x2108 <vfprintf+0x374>
    1e4a:	20 64       	ori	r18, 0x40	; 64
    1e4c:	06 c0       	rjmp	.+12     	; 0x1e5a <vfprintf+0xc6>
    1e4e:	8c 36       	cpi	r24, 0x6C	; 108
    1e50:	11 f4       	brne	.+4      	; 0x1e56 <vfprintf+0xc2>
    1e52:	20 68       	ori	r18, 0x80	; 128
    1e54:	02 c0       	rjmp	.+4      	; 0x1e5a <vfprintf+0xc6>
    1e56:	88 36       	cpi	r24, 0x68	; 104
    1e58:	41 f4       	brne	.+16     	; 0x1e6a <vfprintf+0xd6>
    1e5a:	f6 01       	movw	r30, r12
    1e5c:	93 fd       	sbrc	r25, 3
    1e5e:	85 91       	lpm	r24, Z+
    1e60:	93 ff       	sbrs	r25, 3
    1e62:	81 91       	ld	r24, Z+
    1e64:	6f 01       	movw	r12, r30
    1e66:	81 11       	cpse	r24, r1
    1e68:	c1 cf       	rjmp	.-126    	; 0x1dec <vfprintf+0x58>
    1e6a:	98 2f       	mov	r25, r24
    1e6c:	9f 7d       	andi	r25, 0xDF	; 223
    1e6e:	95 54       	subi	r25, 0x45	; 69
    1e70:	93 30       	cpi	r25, 0x03	; 3
    1e72:	28 f4       	brcc	.+10     	; 0x1e7e <vfprintf+0xea>
    1e74:	0c 5f       	subi	r16, 0xFC	; 252
    1e76:	1f 4f       	sbci	r17, 0xFF	; 255
    1e78:	ff e3       	ldi	r31, 0x3F	; 63
    1e7a:	f9 83       	std	Y+1, r31	; 0x01
    1e7c:	0d c0       	rjmp	.+26     	; 0x1e98 <vfprintf+0x104>
    1e7e:	83 36       	cpi	r24, 0x63	; 99
    1e80:	31 f0       	breq	.+12     	; 0x1e8e <vfprintf+0xfa>
    1e82:	83 37       	cpi	r24, 0x73	; 115
    1e84:	71 f0       	breq	.+28     	; 0x1ea2 <vfprintf+0x10e>
    1e86:	83 35       	cpi	r24, 0x53	; 83
    1e88:	09 f0       	breq	.+2      	; 0x1e8c <vfprintf+0xf8>
    1e8a:	57 c0       	rjmp	.+174    	; 0x1f3a <vfprintf+0x1a6>
    1e8c:	21 c0       	rjmp	.+66     	; 0x1ed0 <vfprintf+0x13c>
    1e8e:	f8 01       	movw	r30, r16
    1e90:	80 81       	ld	r24, Z
    1e92:	89 83       	std	Y+1, r24	; 0x01
    1e94:	0e 5f       	subi	r16, 0xFE	; 254
    1e96:	1f 4f       	sbci	r17, 0xFF	; 255
    1e98:	44 24       	eor	r4, r4
    1e9a:	43 94       	inc	r4
    1e9c:	51 2c       	mov	r5, r1
    1e9e:	54 01       	movw	r10, r8
    1ea0:	14 c0       	rjmp	.+40     	; 0x1eca <vfprintf+0x136>
    1ea2:	38 01       	movw	r6, r16
    1ea4:	f2 e0       	ldi	r31, 0x02	; 2
    1ea6:	6f 0e       	add	r6, r31
    1ea8:	71 1c       	adc	r7, r1
    1eaa:	f8 01       	movw	r30, r16
    1eac:	a0 80       	ld	r10, Z
    1eae:	b1 80       	ldd	r11, Z+1	; 0x01
    1eb0:	26 ff       	sbrs	r18, 6
    1eb2:	03 c0       	rjmp	.+6      	; 0x1eba <vfprintf+0x126>
    1eb4:	65 2d       	mov	r22, r5
    1eb6:	70 e0       	ldi	r23, 0x00	; 0
    1eb8:	02 c0       	rjmp	.+4      	; 0x1ebe <vfprintf+0x12a>
    1eba:	6f ef       	ldi	r22, 0xFF	; 255
    1ebc:	7f ef       	ldi	r23, 0xFF	; 255
    1ebe:	c5 01       	movw	r24, r10
    1ec0:	2c 87       	std	Y+12, r18	; 0x0c
    1ec2:	36 d1       	rcall	.+620    	; 0x2130 <strnlen>
    1ec4:	2c 01       	movw	r4, r24
    1ec6:	83 01       	movw	r16, r6
    1ec8:	2c 85       	ldd	r18, Y+12	; 0x0c
    1eca:	2f 77       	andi	r18, 0x7F	; 127
    1ecc:	22 2e       	mov	r2, r18
    1ece:	16 c0       	rjmp	.+44     	; 0x1efc <vfprintf+0x168>
    1ed0:	38 01       	movw	r6, r16
    1ed2:	f2 e0       	ldi	r31, 0x02	; 2
    1ed4:	6f 0e       	add	r6, r31
    1ed6:	71 1c       	adc	r7, r1
    1ed8:	f8 01       	movw	r30, r16
    1eda:	a0 80       	ld	r10, Z
    1edc:	b1 80       	ldd	r11, Z+1	; 0x01
    1ede:	26 ff       	sbrs	r18, 6
    1ee0:	03 c0       	rjmp	.+6      	; 0x1ee8 <vfprintf+0x154>
    1ee2:	65 2d       	mov	r22, r5
    1ee4:	70 e0       	ldi	r23, 0x00	; 0
    1ee6:	02 c0       	rjmp	.+4      	; 0x1eec <vfprintf+0x158>
    1ee8:	6f ef       	ldi	r22, 0xFF	; 255
    1eea:	7f ef       	ldi	r23, 0xFF	; 255
    1eec:	c5 01       	movw	r24, r10
    1eee:	2c 87       	std	Y+12, r18	; 0x0c
    1ef0:	14 d1       	rcall	.+552    	; 0x211a <strnlen_P>
    1ef2:	2c 01       	movw	r4, r24
    1ef4:	2c 85       	ldd	r18, Y+12	; 0x0c
    1ef6:	20 68       	ori	r18, 0x80	; 128
    1ef8:	22 2e       	mov	r2, r18
    1efa:	83 01       	movw	r16, r6
    1efc:	23 fc       	sbrc	r2, 3
    1efe:	19 c0       	rjmp	.+50     	; 0x1f32 <vfprintf+0x19e>
    1f00:	83 2d       	mov	r24, r3
    1f02:	90 e0       	ldi	r25, 0x00	; 0
    1f04:	48 16       	cp	r4, r24
    1f06:	59 06       	cpc	r5, r25
    1f08:	a0 f4       	brcc	.+40     	; 0x1f32 <vfprintf+0x19e>
    1f0a:	b7 01       	movw	r22, r14
    1f0c:	80 e2       	ldi	r24, 0x20	; 32
    1f0e:	90 e0       	ldi	r25, 0x00	; 0
    1f10:	1a d1       	rcall	.+564    	; 0x2146 <fputc>
    1f12:	3a 94       	dec	r3
    1f14:	f5 cf       	rjmp	.-22     	; 0x1f00 <vfprintf+0x16c>
    1f16:	f5 01       	movw	r30, r10
    1f18:	27 fc       	sbrc	r2, 7
    1f1a:	85 91       	lpm	r24, Z+
    1f1c:	27 fe       	sbrs	r2, 7
    1f1e:	81 91       	ld	r24, Z+
    1f20:	5f 01       	movw	r10, r30
    1f22:	b7 01       	movw	r22, r14
    1f24:	90 e0       	ldi	r25, 0x00	; 0
    1f26:	0f d1       	rcall	.+542    	; 0x2146 <fputc>
    1f28:	31 10       	cpse	r3, r1
    1f2a:	3a 94       	dec	r3
    1f2c:	f1 e0       	ldi	r31, 0x01	; 1
    1f2e:	4f 1a       	sub	r4, r31
    1f30:	51 08       	sbc	r5, r1
    1f32:	41 14       	cp	r4, r1
    1f34:	51 04       	cpc	r5, r1
    1f36:	79 f7       	brne	.-34     	; 0x1f16 <vfprintf+0x182>
    1f38:	de c0       	rjmp	.+444    	; 0x20f6 <vfprintf+0x362>
    1f3a:	84 36       	cpi	r24, 0x64	; 100
    1f3c:	11 f0       	breq	.+4      	; 0x1f42 <vfprintf+0x1ae>
    1f3e:	89 36       	cpi	r24, 0x69	; 105
    1f40:	31 f5       	brne	.+76     	; 0x1f8e <vfprintf+0x1fa>
    1f42:	f8 01       	movw	r30, r16
    1f44:	27 ff       	sbrs	r18, 7
    1f46:	07 c0       	rjmp	.+14     	; 0x1f56 <vfprintf+0x1c2>
    1f48:	60 81       	ld	r22, Z
    1f4a:	71 81       	ldd	r23, Z+1	; 0x01
    1f4c:	82 81       	ldd	r24, Z+2	; 0x02
    1f4e:	93 81       	ldd	r25, Z+3	; 0x03
    1f50:	0c 5f       	subi	r16, 0xFC	; 252
    1f52:	1f 4f       	sbci	r17, 0xFF	; 255
    1f54:	08 c0       	rjmp	.+16     	; 0x1f66 <vfprintf+0x1d2>
    1f56:	60 81       	ld	r22, Z
    1f58:	71 81       	ldd	r23, Z+1	; 0x01
    1f5a:	88 27       	eor	r24, r24
    1f5c:	77 fd       	sbrc	r23, 7
    1f5e:	80 95       	com	r24
    1f60:	98 2f       	mov	r25, r24
    1f62:	0e 5f       	subi	r16, 0xFE	; 254
    1f64:	1f 4f       	sbci	r17, 0xFF	; 255
    1f66:	2f 76       	andi	r18, 0x6F	; 111
    1f68:	b2 2e       	mov	r11, r18
    1f6a:	97 ff       	sbrs	r25, 7
    1f6c:	09 c0       	rjmp	.+18     	; 0x1f80 <vfprintf+0x1ec>
    1f6e:	90 95       	com	r25
    1f70:	80 95       	com	r24
    1f72:	70 95       	com	r23
    1f74:	61 95       	neg	r22
    1f76:	7f 4f       	sbci	r23, 0xFF	; 255
    1f78:	8f 4f       	sbci	r24, 0xFF	; 255
    1f7a:	9f 4f       	sbci	r25, 0xFF	; 255
    1f7c:	20 68       	ori	r18, 0x80	; 128
    1f7e:	b2 2e       	mov	r11, r18
    1f80:	2a e0       	ldi	r18, 0x0A	; 10
    1f82:	30 e0       	ldi	r19, 0x00	; 0
    1f84:	a4 01       	movw	r20, r8
    1f86:	11 d1       	rcall	.+546    	; 0x21aa <__ultoa_invert>
    1f88:	a8 2e       	mov	r10, r24
    1f8a:	a8 18       	sub	r10, r8
    1f8c:	43 c0       	rjmp	.+134    	; 0x2014 <vfprintf+0x280>
    1f8e:	85 37       	cpi	r24, 0x75	; 117
    1f90:	29 f4       	brne	.+10     	; 0x1f9c <vfprintf+0x208>
    1f92:	2f 7e       	andi	r18, 0xEF	; 239
    1f94:	b2 2e       	mov	r11, r18
    1f96:	2a e0       	ldi	r18, 0x0A	; 10
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	25 c0       	rjmp	.+74     	; 0x1fe6 <vfprintf+0x252>
    1f9c:	f2 2f       	mov	r31, r18
    1f9e:	f9 7f       	andi	r31, 0xF9	; 249
    1fa0:	bf 2e       	mov	r11, r31
    1fa2:	8f 36       	cpi	r24, 0x6F	; 111
    1fa4:	c1 f0       	breq	.+48     	; 0x1fd6 <vfprintf+0x242>
    1fa6:	18 f4       	brcc	.+6      	; 0x1fae <vfprintf+0x21a>
    1fa8:	88 35       	cpi	r24, 0x58	; 88
    1faa:	79 f0       	breq	.+30     	; 0x1fca <vfprintf+0x236>
    1fac:	ad c0       	rjmp	.+346    	; 0x2108 <vfprintf+0x374>
    1fae:	80 37       	cpi	r24, 0x70	; 112
    1fb0:	19 f0       	breq	.+6      	; 0x1fb8 <vfprintf+0x224>
    1fb2:	88 37       	cpi	r24, 0x78	; 120
    1fb4:	21 f0       	breq	.+8      	; 0x1fbe <vfprintf+0x22a>
    1fb6:	a8 c0       	rjmp	.+336    	; 0x2108 <vfprintf+0x374>
    1fb8:	2f 2f       	mov	r18, r31
    1fba:	20 61       	ori	r18, 0x10	; 16
    1fbc:	b2 2e       	mov	r11, r18
    1fbe:	b4 fe       	sbrs	r11, 4
    1fc0:	0d c0       	rjmp	.+26     	; 0x1fdc <vfprintf+0x248>
    1fc2:	8b 2d       	mov	r24, r11
    1fc4:	84 60       	ori	r24, 0x04	; 4
    1fc6:	b8 2e       	mov	r11, r24
    1fc8:	09 c0       	rjmp	.+18     	; 0x1fdc <vfprintf+0x248>
    1fca:	24 ff       	sbrs	r18, 4
    1fcc:	0a c0       	rjmp	.+20     	; 0x1fe2 <vfprintf+0x24e>
    1fce:	9f 2f       	mov	r25, r31
    1fd0:	96 60       	ori	r25, 0x06	; 6
    1fd2:	b9 2e       	mov	r11, r25
    1fd4:	06 c0       	rjmp	.+12     	; 0x1fe2 <vfprintf+0x24e>
    1fd6:	28 e0       	ldi	r18, 0x08	; 8
    1fd8:	30 e0       	ldi	r19, 0x00	; 0
    1fda:	05 c0       	rjmp	.+10     	; 0x1fe6 <vfprintf+0x252>
    1fdc:	20 e1       	ldi	r18, 0x10	; 16
    1fde:	30 e0       	ldi	r19, 0x00	; 0
    1fe0:	02 c0       	rjmp	.+4      	; 0x1fe6 <vfprintf+0x252>
    1fe2:	20 e1       	ldi	r18, 0x10	; 16
    1fe4:	32 e0       	ldi	r19, 0x02	; 2
    1fe6:	f8 01       	movw	r30, r16
    1fe8:	b7 fe       	sbrs	r11, 7
    1fea:	07 c0       	rjmp	.+14     	; 0x1ffa <vfprintf+0x266>
    1fec:	60 81       	ld	r22, Z
    1fee:	71 81       	ldd	r23, Z+1	; 0x01
    1ff0:	82 81       	ldd	r24, Z+2	; 0x02
    1ff2:	93 81       	ldd	r25, Z+3	; 0x03
    1ff4:	0c 5f       	subi	r16, 0xFC	; 252
    1ff6:	1f 4f       	sbci	r17, 0xFF	; 255
    1ff8:	06 c0       	rjmp	.+12     	; 0x2006 <vfprintf+0x272>
    1ffa:	60 81       	ld	r22, Z
    1ffc:	71 81       	ldd	r23, Z+1	; 0x01
    1ffe:	80 e0       	ldi	r24, 0x00	; 0
    2000:	90 e0       	ldi	r25, 0x00	; 0
    2002:	0e 5f       	subi	r16, 0xFE	; 254
    2004:	1f 4f       	sbci	r17, 0xFF	; 255
    2006:	a4 01       	movw	r20, r8
    2008:	d0 d0       	rcall	.+416    	; 0x21aa <__ultoa_invert>
    200a:	a8 2e       	mov	r10, r24
    200c:	a8 18       	sub	r10, r8
    200e:	fb 2d       	mov	r31, r11
    2010:	ff 77       	andi	r31, 0x7F	; 127
    2012:	bf 2e       	mov	r11, r31
    2014:	b6 fe       	sbrs	r11, 6
    2016:	0b c0       	rjmp	.+22     	; 0x202e <vfprintf+0x29a>
    2018:	2b 2d       	mov	r18, r11
    201a:	2e 7f       	andi	r18, 0xFE	; 254
    201c:	a5 14       	cp	r10, r5
    201e:	50 f4       	brcc	.+20     	; 0x2034 <vfprintf+0x2a0>
    2020:	b4 fe       	sbrs	r11, 4
    2022:	0a c0       	rjmp	.+20     	; 0x2038 <vfprintf+0x2a4>
    2024:	b2 fc       	sbrc	r11, 2
    2026:	08 c0       	rjmp	.+16     	; 0x2038 <vfprintf+0x2a4>
    2028:	2b 2d       	mov	r18, r11
    202a:	2e 7e       	andi	r18, 0xEE	; 238
    202c:	05 c0       	rjmp	.+10     	; 0x2038 <vfprintf+0x2a4>
    202e:	7a 2c       	mov	r7, r10
    2030:	2b 2d       	mov	r18, r11
    2032:	03 c0       	rjmp	.+6      	; 0x203a <vfprintf+0x2a6>
    2034:	7a 2c       	mov	r7, r10
    2036:	01 c0       	rjmp	.+2      	; 0x203a <vfprintf+0x2a6>
    2038:	75 2c       	mov	r7, r5
    203a:	24 ff       	sbrs	r18, 4
    203c:	0d c0       	rjmp	.+26     	; 0x2058 <vfprintf+0x2c4>
    203e:	fe 01       	movw	r30, r28
    2040:	ea 0d       	add	r30, r10
    2042:	f1 1d       	adc	r31, r1
    2044:	80 81       	ld	r24, Z
    2046:	80 33       	cpi	r24, 0x30	; 48
    2048:	11 f4       	brne	.+4      	; 0x204e <vfprintf+0x2ba>
    204a:	29 7e       	andi	r18, 0xE9	; 233
    204c:	09 c0       	rjmp	.+18     	; 0x2060 <vfprintf+0x2cc>
    204e:	22 ff       	sbrs	r18, 2
    2050:	06 c0       	rjmp	.+12     	; 0x205e <vfprintf+0x2ca>
    2052:	73 94       	inc	r7
    2054:	73 94       	inc	r7
    2056:	04 c0       	rjmp	.+8      	; 0x2060 <vfprintf+0x2cc>
    2058:	82 2f       	mov	r24, r18
    205a:	86 78       	andi	r24, 0x86	; 134
    205c:	09 f0       	breq	.+2      	; 0x2060 <vfprintf+0x2cc>
    205e:	73 94       	inc	r7
    2060:	23 fd       	sbrc	r18, 3
    2062:	12 c0       	rjmp	.+36     	; 0x2088 <vfprintf+0x2f4>
    2064:	20 ff       	sbrs	r18, 0
    2066:	06 c0       	rjmp	.+12     	; 0x2074 <vfprintf+0x2e0>
    2068:	5a 2c       	mov	r5, r10
    206a:	73 14       	cp	r7, r3
    206c:	18 f4       	brcc	.+6      	; 0x2074 <vfprintf+0x2e0>
    206e:	53 0c       	add	r5, r3
    2070:	57 18       	sub	r5, r7
    2072:	73 2c       	mov	r7, r3
    2074:	73 14       	cp	r7, r3
    2076:	60 f4       	brcc	.+24     	; 0x2090 <vfprintf+0x2fc>
    2078:	b7 01       	movw	r22, r14
    207a:	80 e2       	ldi	r24, 0x20	; 32
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	2c 87       	std	Y+12, r18	; 0x0c
    2080:	62 d0       	rcall	.+196    	; 0x2146 <fputc>
    2082:	73 94       	inc	r7
    2084:	2c 85       	ldd	r18, Y+12	; 0x0c
    2086:	f6 cf       	rjmp	.-20     	; 0x2074 <vfprintf+0x2e0>
    2088:	73 14       	cp	r7, r3
    208a:	10 f4       	brcc	.+4      	; 0x2090 <vfprintf+0x2fc>
    208c:	37 18       	sub	r3, r7
    208e:	01 c0       	rjmp	.+2      	; 0x2092 <vfprintf+0x2fe>
    2090:	31 2c       	mov	r3, r1
    2092:	24 ff       	sbrs	r18, 4
    2094:	11 c0       	rjmp	.+34     	; 0x20b8 <vfprintf+0x324>
    2096:	b7 01       	movw	r22, r14
    2098:	80 e3       	ldi	r24, 0x30	; 48
    209a:	90 e0       	ldi	r25, 0x00	; 0
    209c:	2c 87       	std	Y+12, r18	; 0x0c
    209e:	53 d0       	rcall	.+166    	; 0x2146 <fputc>
    20a0:	2c 85       	ldd	r18, Y+12	; 0x0c
    20a2:	22 ff       	sbrs	r18, 2
    20a4:	16 c0       	rjmp	.+44     	; 0x20d2 <vfprintf+0x33e>
    20a6:	21 ff       	sbrs	r18, 1
    20a8:	03 c0       	rjmp	.+6      	; 0x20b0 <vfprintf+0x31c>
    20aa:	88 e5       	ldi	r24, 0x58	; 88
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	02 c0       	rjmp	.+4      	; 0x20b4 <vfprintf+0x320>
    20b0:	88 e7       	ldi	r24, 0x78	; 120
    20b2:	90 e0       	ldi	r25, 0x00	; 0
    20b4:	b7 01       	movw	r22, r14
    20b6:	0c c0       	rjmp	.+24     	; 0x20d0 <vfprintf+0x33c>
    20b8:	82 2f       	mov	r24, r18
    20ba:	86 78       	andi	r24, 0x86	; 134
    20bc:	51 f0       	breq	.+20     	; 0x20d2 <vfprintf+0x33e>
    20be:	21 fd       	sbrc	r18, 1
    20c0:	02 c0       	rjmp	.+4      	; 0x20c6 <vfprintf+0x332>
    20c2:	80 e2       	ldi	r24, 0x20	; 32
    20c4:	01 c0       	rjmp	.+2      	; 0x20c8 <vfprintf+0x334>
    20c6:	8b e2       	ldi	r24, 0x2B	; 43
    20c8:	27 fd       	sbrc	r18, 7
    20ca:	8d e2       	ldi	r24, 0x2D	; 45
    20cc:	b7 01       	movw	r22, r14
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	3a d0       	rcall	.+116    	; 0x2146 <fputc>
    20d2:	a5 14       	cp	r10, r5
    20d4:	30 f4       	brcc	.+12     	; 0x20e2 <vfprintf+0x34e>
    20d6:	b7 01       	movw	r22, r14
    20d8:	80 e3       	ldi	r24, 0x30	; 48
    20da:	90 e0       	ldi	r25, 0x00	; 0
    20dc:	34 d0       	rcall	.+104    	; 0x2146 <fputc>
    20de:	5a 94       	dec	r5
    20e0:	f8 cf       	rjmp	.-16     	; 0x20d2 <vfprintf+0x33e>
    20e2:	aa 94       	dec	r10
    20e4:	f4 01       	movw	r30, r8
    20e6:	ea 0d       	add	r30, r10
    20e8:	f1 1d       	adc	r31, r1
    20ea:	80 81       	ld	r24, Z
    20ec:	b7 01       	movw	r22, r14
    20ee:	90 e0       	ldi	r25, 0x00	; 0
    20f0:	2a d0       	rcall	.+84     	; 0x2146 <fputc>
    20f2:	a1 10       	cpse	r10, r1
    20f4:	f6 cf       	rjmp	.-20     	; 0x20e2 <vfprintf+0x34e>
    20f6:	33 20       	and	r3, r3
    20f8:	09 f4       	brne	.+2      	; 0x20fc <vfprintf+0x368>
    20fa:	5d ce       	rjmp	.-838    	; 0x1db6 <vfprintf+0x22>
    20fc:	b7 01       	movw	r22, r14
    20fe:	80 e2       	ldi	r24, 0x20	; 32
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	21 d0       	rcall	.+66     	; 0x2146 <fputc>
    2104:	3a 94       	dec	r3
    2106:	f7 cf       	rjmp	.-18     	; 0x20f6 <vfprintf+0x362>
    2108:	f7 01       	movw	r30, r14
    210a:	86 81       	ldd	r24, Z+6	; 0x06
    210c:	97 81       	ldd	r25, Z+7	; 0x07
    210e:	02 c0       	rjmp	.+4      	; 0x2114 <vfprintf+0x380>
    2110:	8f ef       	ldi	r24, 0xFF	; 255
    2112:	9f ef       	ldi	r25, 0xFF	; 255
    2114:	2c 96       	adiw	r28, 0x0c	; 12
    2116:	e2 e1       	ldi	r30, 0x12	; 18
    2118:	bf c0       	rjmp	.+382    	; 0x2298 <__epilogue_restores__>

0000211a <strnlen_P>:
    211a:	fc 01       	movw	r30, r24
    211c:	05 90       	lpm	r0, Z+
    211e:	61 50       	subi	r22, 0x01	; 1
    2120:	70 40       	sbci	r23, 0x00	; 0
    2122:	01 10       	cpse	r0, r1
    2124:	d8 f7       	brcc	.-10     	; 0x211c <strnlen_P+0x2>
    2126:	80 95       	com	r24
    2128:	90 95       	com	r25
    212a:	8e 0f       	add	r24, r30
    212c:	9f 1f       	adc	r25, r31
    212e:	08 95       	ret

00002130 <strnlen>:
    2130:	fc 01       	movw	r30, r24
    2132:	61 50       	subi	r22, 0x01	; 1
    2134:	70 40       	sbci	r23, 0x00	; 0
    2136:	01 90       	ld	r0, Z+
    2138:	01 10       	cpse	r0, r1
    213a:	d8 f7       	brcc	.-10     	; 0x2132 <strnlen+0x2>
    213c:	80 95       	com	r24
    213e:	90 95       	com	r25
    2140:	8e 0f       	add	r24, r30
    2142:	9f 1f       	adc	r25, r31
    2144:	08 95       	ret

00002146 <fputc>:
    2146:	0f 93       	push	r16
    2148:	1f 93       	push	r17
    214a:	cf 93       	push	r28
    214c:	df 93       	push	r29
    214e:	18 2f       	mov	r17, r24
    2150:	09 2f       	mov	r16, r25
    2152:	eb 01       	movw	r28, r22
    2154:	8b 81       	ldd	r24, Y+3	; 0x03
    2156:	81 fd       	sbrc	r24, 1
    2158:	03 c0       	rjmp	.+6      	; 0x2160 <fputc+0x1a>
    215a:	8f ef       	ldi	r24, 0xFF	; 255
    215c:	9f ef       	ldi	r25, 0xFF	; 255
    215e:	20 c0       	rjmp	.+64     	; 0x21a0 <fputc+0x5a>
    2160:	82 ff       	sbrs	r24, 2
    2162:	10 c0       	rjmp	.+32     	; 0x2184 <fputc+0x3e>
    2164:	4e 81       	ldd	r20, Y+6	; 0x06
    2166:	5f 81       	ldd	r21, Y+7	; 0x07
    2168:	2c 81       	ldd	r18, Y+4	; 0x04
    216a:	3d 81       	ldd	r19, Y+5	; 0x05
    216c:	42 17       	cp	r20, r18
    216e:	53 07       	cpc	r21, r19
    2170:	7c f4       	brge	.+30     	; 0x2190 <fputc+0x4a>
    2172:	e8 81       	ld	r30, Y
    2174:	f9 81       	ldd	r31, Y+1	; 0x01
    2176:	9f 01       	movw	r18, r30
    2178:	2f 5f       	subi	r18, 0xFF	; 255
    217a:	3f 4f       	sbci	r19, 0xFF	; 255
    217c:	28 83       	st	Y, r18
    217e:	39 83       	std	Y+1, r19	; 0x01
    2180:	10 83       	st	Z, r17
    2182:	06 c0       	rjmp	.+12     	; 0x2190 <fputc+0x4a>
    2184:	e8 85       	ldd	r30, Y+8	; 0x08
    2186:	f9 85       	ldd	r31, Y+9	; 0x09
    2188:	81 2f       	mov	r24, r17
    218a:	09 95       	icall
    218c:	89 2b       	or	r24, r25
    218e:	29 f7       	brne	.-54     	; 0x215a <fputc+0x14>
    2190:	2e 81       	ldd	r18, Y+6	; 0x06
    2192:	3f 81       	ldd	r19, Y+7	; 0x07
    2194:	2f 5f       	subi	r18, 0xFF	; 255
    2196:	3f 4f       	sbci	r19, 0xFF	; 255
    2198:	2e 83       	std	Y+6, r18	; 0x06
    219a:	3f 83       	std	Y+7, r19	; 0x07
    219c:	81 2f       	mov	r24, r17
    219e:	90 2f       	mov	r25, r16
    21a0:	df 91       	pop	r29
    21a2:	cf 91       	pop	r28
    21a4:	1f 91       	pop	r17
    21a6:	0f 91       	pop	r16
    21a8:	08 95       	ret

000021aa <__ultoa_invert>:
    21aa:	fa 01       	movw	r30, r20
    21ac:	aa 27       	eor	r26, r26
    21ae:	28 30       	cpi	r18, 0x08	; 8
    21b0:	51 f1       	breq	.+84     	; 0x2206 <__ultoa_invert+0x5c>
    21b2:	20 31       	cpi	r18, 0x10	; 16
    21b4:	81 f1       	breq	.+96     	; 0x2216 <__ultoa_invert+0x6c>
    21b6:	e8 94       	clt
    21b8:	6f 93       	push	r22
    21ba:	6e 7f       	andi	r22, 0xFE	; 254
    21bc:	6e 5f       	subi	r22, 0xFE	; 254
    21be:	7f 4f       	sbci	r23, 0xFF	; 255
    21c0:	8f 4f       	sbci	r24, 0xFF	; 255
    21c2:	9f 4f       	sbci	r25, 0xFF	; 255
    21c4:	af 4f       	sbci	r26, 0xFF	; 255
    21c6:	b1 e0       	ldi	r27, 0x01	; 1
    21c8:	3e d0       	rcall	.+124    	; 0x2246 <__ultoa_invert+0x9c>
    21ca:	b4 e0       	ldi	r27, 0x04	; 4
    21cc:	3c d0       	rcall	.+120    	; 0x2246 <__ultoa_invert+0x9c>
    21ce:	67 0f       	add	r22, r23
    21d0:	78 1f       	adc	r23, r24
    21d2:	89 1f       	adc	r24, r25
    21d4:	9a 1f       	adc	r25, r26
    21d6:	a1 1d       	adc	r26, r1
    21d8:	68 0f       	add	r22, r24
    21da:	79 1f       	adc	r23, r25
    21dc:	8a 1f       	adc	r24, r26
    21de:	91 1d       	adc	r25, r1
    21e0:	a1 1d       	adc	r26, r1
    21e2:	6a 0f       	add	r22, r26
    21e4:	71 1d       	adc	r23, r1
    21e6:	81 1d       	adc	r24, r1
    21e8:	91 1d       	adc	r25, r1
    21ea:	a1 1d       	adc	r26, r1
    21ec:	20 d0       	rcall	.+64     	; 0x222e <__ultoa_invert+0x84>
    21ee:	09 f4       	brne	.+2      	; 0x21f2 <__ultoa_invert+0x48>
    21f0:	68 94       	set
    21f2:	3f 91       	pop	r19
    21f4:	2a e0       	ldi	r18, 0x0A	; 10
    21f6:	26 9f       	mul	r18, r22
    21f8:	11 24       	eor	r1, r1
    21fa:	30 19       	sub	r19, r0
    21fc:	30 5d       	subi	r19, 0xD0	; 208
    21fe:	31 93       	st	Z+, r19
    2200:	de f6       	brtc	.-74     	; 0x21b8 <__ultoa_invert+0xe>
    2202:	cf 01       	movw	r24, r30
    2204:	08 95       	ret
    2206:	46 2f       	mov	r20, r22
    2208:	47 70       	andi	r20, 0x07	; 7
    220a:	40 5d       	subi	r20, 0xD0	; 208
    220c:	41 93       	st	Z+, r20
    220e:	b3 e0       	ldi	r27, 0x03	; 3
    2210:	0f d0       	rcall	.+30     	; 0x2230 <__ultoa_invert+0x86>
    2212:	c9 f7       	brne	.-14     	; 0x2206 <__ultoa_invert+0x5c>
    2214:	f6 cf       	rjmp	.-20     	; 0x2202 <__ultoa_invert+0x58>
    2216:	46 2f       	mov	r20, r22
    2218:	4f 70       	andi	r20, 0x0F	; 15
    221a:	40 5d       	subi	r20, 0xD0	; 208
    221c:	4a 33       	cpi	r20, 0x3A	; 58
    221e:	18 f0       	brcs	.+6      	; 0x2226 <__ultoa_invert+0x7c>
    2220:	49 5d       	subi	r20, 0xD9	; 217
    2222:	31 fd       	sbrc	r19, 1
    2224:	40 52       	subi	r20, 0x20	; 32
    2226:	41 93       	st	Z+, r20
    2228:	02 d0       	rcall	.+4      	; 0x222e <__ultoa_invert+0x84>
    222a:	a9 f7       	brne	.-22     	; 0x2216 <__ultoa_invert+0x6c>
    222c:	ea cf       	rjmp	.-44     	; 0x2202 <__ultoa_invert+0x58>
    222e:	b4 e0       	ldi	r27, 0x04	; 4
    2230:	a6 95       	lsr	r26
    2232:	97 95       	ror	r25
    2234:	87 95       	ror	r24
    2236:	77 95       	ror	r23
    2238:	67 95       	ror	r22
    223a:	ba 95       	dec	r27
    223c:	c9 f7       	brne	.-14     	; 0x2230 <__ultoa_invert+0x86>
    223e:	00 97       	sbiw	r24, 0x00	; 0
    2240:	61 05       	cpc	r22, r1
    2242:	71 05       	cpc	r23, r1
    2244:	08 95       	ret
    2246:	9b 01       	movw	r18, r22
    2248:	ac 01       	movw	r20, r24
    224a:	0a 2e       	mov	r0, r26
    224c:	06 94       	lsr	r0
    224e:	57 95       	ror	r21
    2250:	47 95       	ror	r20
    2252:	37 95       	ror	r19
    2254:	27 95       	ror	r18
    2256:	ba 95       	dec	r27
    2258:	c9 f7       	brne	.-14     	; 0x224c <__ultoa_invert+0xa2>
    225a:	62 0f       	add	r22, r18
    225c:	73 1f       	adc	r23, r19
    225e:	84 1f       	adc	r24, r20
    2260:	95 1f       	adc	r25, r21
    2262:	a0 1d       	adc	r26, r0
    2264:	08 95       	ret

00002266 <__prologue_saves__>:
    2266:	2f 92       	push	r2
    2268:	3f 92       	push	r3
    226a:	4f 92       	push	r4
    226c:	5f 92       	push	r5
    226e:	6f 92       	push	r6
    2270:	7f 92       	push	r7
    2272:	8f 92       	push	r8
    2274:	9f 92       	push	r9
    2276:	af 92       	push	r10
    2278:	bf 92       	push	r11
    227a:	cf 92       	push	r12
    227c:	df 92       	push	r13
    227e:	ef 92       	push	r14
    2280:	ff 92       	push	r15
    2282:	0f 93       	push	r16
    2284:	1f 93       	push	r17
    2286:	cf 93       	push	r28
    2288:	df 93       	push	r29
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
    228e:	ca 1b       	sub	r28, r26
    2290:	db 0b       	sbc	r29, r27
    2292:	cd bf       	out	0x3d, r28	; 61
    2294:	de bf       	out	0x3e, r29	; 62
    2296:	09 94       	ijmp

00002298 <__epilogue_restores__>:
    2298:	2a 88       	ldd	r2, Y+18	; 0x12
    229a:	39 88       	ldd	r3, Y+17	; 0x11
    229c:	48 88       	ldd	r4, Y+16	; 0x10
    229e:	5f 84       	ldd	r5, Y+15	; 0x0f
    22a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    22a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    22a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    22a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    22a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    22aa:	b9 84       	ldd	r11, Y+9	; 0x09
    22ac:	c8 84       	ldd	r12, Y+8	; 0x08
    22ae:	df 80       	ldd	r13, Y+7	; 0x07
    22b0:	ee 80       	ldd	r14, Y+6	; 0x06
    22b2:	fd 80       	ldd	r15, Y+5	; 0x05
    22b4:	0c 81       	ldd	r16, Y+4	; 0x04
    22b6:	1b 81       	ldd	r17, Y+3	; 0x03
    22b8:	aa 81       	ldd	r26, Y+2	; 0x02
    22ba:	b9 81       	ldd	r27, Y+1	; 0x01
    22bc:	ce 0f       	add	r28, r30
    22be:	d1 1d       	adc	r29, r1
    22c0:	cd bf       	out	0x3d, r28	; 61
    22c2:	de bf       	out	0x3e, r29	; 62
    22c4:	ed 01       	movw	r28, r26
    22c6:	08 95       	ret

000022c8 <_exit>:
    22c8:	f8 94       	cli

000022ca <__stop_program>:
    22ca:	ff cf       	rjmp	.-2      	; 0x22ca <__stop_program>
